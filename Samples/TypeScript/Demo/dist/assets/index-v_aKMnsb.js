(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))i(s);new MutationObserver(s=>{for(const a of s)if(a.type==="childList")for(const o of a.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&i(o)}).observe(document,{childList:!0,subtree:!0});function e(s){const a={};return s.integrity&&(a.integrity=s.integrity),s.referrerPolicy&&(a.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?a.credentials="include":s.crossOrigin==="anonymous"?a.credentials="omit":a.credentials="same-origin",a}function i(s){if(s.ep)return;s.ep=!0;const a=e(s);fetch(s.href,a)}})();const D=class D{constructor(t=0){t<1?(this._ptr=[],this._capacity=0,this._size=0):(this._ptr=new Array(t),this._capacity=t,this._size=0)}at(t){return this._ptr[t]}set(t,e){this._ptr[t]=e}get(t=0){const e=new Array;for(let i=t;i<this._size;i++)e.push(this._ptr[i]);return e}pushBack(t){this._size>=this._capacity&&this.prepareCapacity(this._capacity==0?D.DefaultSize:this._capacity*2),this._ptr[this._size++]=t}clear(){this._ptr.length=0,this._size=0}getSize(){return this._size}assign(t,e){this._size<t&&this.prepareCapacity(t);for(let s=0;s<t;s++)this._ptr[s]=e;this._size=t}resize(t,e=null){this.updateSize(t,e,!0)}updateSize(t,e=null,i=!0){if(this._size<t)if(this.prepareCapacity(t),i)for(let a=this._size;a<t;a++)typeof e=="function"?this._ptr[a]=JSON.parse(JSON.stringify(new e)):this._ptr[a]=e;else for(let a=this._size;a<t;a++)this._ptr[a]=e;else{const a=this._size-t;this._ptr.splice(this._size-a,a)}this._size=t}insert(t,e,i){let s=t._index;const a=e._index,o=i._index,n=o-a;this.prepareCapacity(this._size+n);const l=this._size-s;if(l>0)for(let h=0;h<l;h++)this._ptr.splice(s+h,0,null);for(let h=a;h<o;h++,s++)this._ptr[s]=e._vector._ptr[h];this._size=this._size+n}remove(t){return t<0||this._size<=t?!1:(this._ptr.splice(t,1),--this._size,!0)}erase(t){const e=t._index;return e<0||this._size<=e?t:(this._ptr.splice(e,1),--this._size,new iterator$1(this,e))}prepareCapacity(t){t>this._capacity&&(this._capacity==0?(this._ptr=new Array(t),this._capacity=t):(this._ptr.length=t,this._capacity=t))}begin(){return this._size==0?this.end():new iterator$1(this,0)}end(){return new iterator$1(this,this._size)}getOffset(t){const e=new D;return e._ptr=this.get(t),e._size=this.get(t).length,e._capacity=this.get(t).length,e}};D.DefaultSize=10;let csmVector=D,iterator$1=class A{constructor(t,e){this._vector=t??null,this._index=e??0}set(t){return this._index=t._index,this._vector=t._vector,this}preIncrement(){return++this._index,this}preDecrement(){return--this._index,this}increment(){return new A(this._vector,this._index++)}decrement(){return new A(this._vector,this._index--)}ptr(){return this._vector._ptr[this._index]}substitution(t){return this._index=t._index,this._vector=t._vector,this}notEqual(t){return this._index!=t._index||this._vector!=t._vector}};var Live2DCubismFramework$E;(r=>{r.csmVector=csmVector,r.iterator=iterator$1})(Live2DCubismFramework$E||(Live2DCubismFramework$E={}));class csmString{append(t,e){return this.s+=e!==void 0?t.substr(0,e):t,this}expansion(t,e){for(let i=0;i<t;i++)this.append(e);return this}getBytes(){return encodeURIComponent(this.s).replace(/%../g,"x").length}getLength(){return this.s.length}isLess(t){return this.s<t.s}isGreat(t){return this.s>t.s}isEqual(t){return this.s==t}isEmpty(){return this.s.length==0}constructor(t){this.s=t}}var Live2DCubismFramework$D;(r=>{r.csmString=csmString})(Live2DCubismFramework$D||(Live2DCubismFramework$D={}));class CubismId{static createIdInternal(t){return new CubismId(t)}getString(){return this._id}isEqual(t){return typeof t=="string"?this._id.isEqual(t):t instanceof csmString?this._id.isEqual(t.s):t instanceof CubismId?this._id.isEqual(t._id.s):!1}isNotEqual(t){return typeof t=="string"?!this._id.isEqual(t):t instanceof csmString?!this._id.isEqual(t.s):t instanceof CubismId?!this._id.isEqual(t._id.s):!1}constructor(t){if(typeof t=="string"){this._id=new csmString(t);return}this._id=t}}var Live2DCubismFramework$C;(r=>{r.CubismId=CubismId})(Live2DCubismFramework$C||(Live2DCubismFramework$C={}));class CubismIdManager{constructor(){this._ids=new csmVector}release(){for(let t=0;t<this._ids.getSize();++t)this._ids.set(t,void 0);this._ids=null}registerIds(t){for(let e=0;e<t.length;e++)this.registerId(t[e])}registerId(t){let e=null;if(typeof t=="string"){if((e=this.findId(t))!=null)return e;e=CubismId.createIdInternal(t),this._ids.pushBack(e)}else return this.registerId(t.s);return e}getId(t){return this.registerId(t)}isExist(t){return typeof t=="string"?this.findId(t)!=null:this.isExist(t.s)}findId(t){for(let e=0;e<this._ids.getSize();++e)if(this._ids.at(e).getString().isEqual(t))return this._ids.at(e);return null}}var Live2DCubismFramework$B;(r=>{r.CubismIdManager=CubismIdManager})(Live2DCubismFramework$B||(Live2DCubismFramework$B={}));class CubismMatrix44{constructor(){this._tr=new Float32Array(16),this.loadIdentity()}static multiply(t,e,i){const s=new Float32Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),a=4;for(let o=0;o<a;++o)for(let n=0;n<a;++n)for(let l=0;l<a;++l)s[n+o*4]+=t[l+o*4]*e[n+l*4];for(let o=0;o<16;++o)i[o]=s[o]}loadIdentity(){const t=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);this.setMatrix(t)}setMatrix(t){for(let e=0;e<16;++e)this._tr[e]=t[e]}getArray(){return this._tr}getScaleX(){return this._tr[0]}getScaleY(){return this._tr[5]}getTranslateX(){return this._tr[12]}getTranslateY(){return this._tr[13]}transformX(t){return this._tr[0]*t+this._tr[12]}transformY(t){return this._tr[5]*t+this._tr[13]}invertTransformX(t){return(t-this._tr[12])/this._tr[0]}invertTransformY(t){return(t-this._tr[13])/this._tr[5]}translateRelative(t,e){const i=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,t,e,0,1]);CubismMatrix44.multiply(i,this._tr,this._tr)}translate(t,e){this._tr[12]=t,this._tr[13]=e}translateX(t){this._tr[12]=t}translateY(t){this._tr[13]=t}scaleRelative(t,e){const i=new Float32Array([t,0,0,0,0,e,0,0,0,0,1,0,0,0,0,1]);CubismMatrix44.multiply(i,this._tr,this._tr)}scale(t,e){this._tr[0]=t,this._tr[5]=e}multiplyByMatrix(t){CubismMatrix44.multiply(t.getArray(),this._tr,this._tr)}clone(){const t=new CubismMatrix44;for(let e=0;e<this._tr.length;e++)t._tr[e]=this._tr[e];return t}}var Live2DCubismFramework$A;(r=>{r.CubismMatrix44=CubismMatrix44})(Live2DCubismFramework$A||(Live2DCubismFramework$A={}));class csmRect{constructor(t,e,i,s){this.x=t,this.y=e,this.width=i,this.height=s}getCenterX(){return this.x+.5*this.width}getCenterY(){return this.y+.5*this.height}getRight(){return this.x+this.width}getBottom(){return this.y+this.height}setRect(t){this.x=t.x,this.y=t.y,this.width=t.width,this.height=t.height}expand(t,e){this.x-=t,this.y-=e,this.width+=t*2,this.height+=e*2}}var Live2DCubismFramework$z;(r=>{r.csmRect=csmRect})(Live2DCubismFramework$z||(Live2DCubismFramework$z={}));class CubismRenderer{static create(){return null}static delete(t){}initialize(t){this._model=t}drawModel(){this.getModel()!=null&&(this.saveProfile(),this.doDrawModel(),this.restoreProfile())}setMvpMatrix(t){this._mvpMatrix4x4.setMatrix(t.getArray())}getMvpMatrix(){return this._mvpMatrix4x4}setModelColor(t,e,i,s){t<0?t=0:t>1&&(t=1),e<0?e=0:e>1&&(e=1),i<0?i=0:i>1&&(i=1),s<0?s=0:s>1&&(s=1),this._modelColor.r=t,this._modelColor.g=e,this._modelColor.b=i,this._modelColor.a=s}getModelColor(){return JSON.parse(JSON.stringify(this._modelColor))}getModelColorWithOpacity(t){const e=this.getModelColor();return e.a*=t,this.isPremultipliedAlpha()&&(e.r*=e.a,e.g*=e.a,e.b*=e.a),e}setIsPremultipliedAlpha(t){this._isPremultipliedAlpha=t}isPremultipliedAlpha(){return this._isPremultipliedAlpha}setIsCulling(t){this._isCulling=t}isCulling(){return this._isCulling}setAnisotropy(t){this._anisotropy=t}getAnisotropy(){return this._anisotropy}getModel(){return this._model}useHighPrecisionMask(t){this._useHighPrecisionMask=t}isUsingHighPrecisionMask(){return this._useHighPrecisionMask}constructor(){this._isCulling=!1,this._isPremultipliedAlpha=!1,this._anisotropy=0,this._model=null,this._modelColor=new CubismTextureColor,this._useHighPrecisionMask=!1,this._mvpMatrix4x4=new CubismMatrix44,this._mvpMatrix4x4.loadIdentity()}}var CubismBlendMode=(r=>(r[r.CubismBlendMode_Normal=0]="CubismBlendMode_Normal",r[r.CubismBlendMode_Additive=1]="CubismBlendMode_Additive",r[r.CubismBlendMode_Multiplicative=2]="CubismBlendMode_Multiplicative",r))(CubismBlendMode||{});class CubismTextureColor{constructor(t=1,e=1,i=1,s=1){this.r=t,this.g=e,this.b=i,this.a=s}}class CubismClippingContext{constructor(t,e){this._clippingIdList=t,this._clippingIdCount=e,this._allClippedDrawRect=new csmRect,this._layoutBounds=new csmRect,this._clippedDrawableIndexList=[],this._matrixForMask=new CubismMatrix44,this._matrixForDraw=new CubismMatrix44,this._bufferIndex=0}release(){this._layoutBounds!=null&&(this._layoutBounds=null),this._allClippedDrawRect!=null&&(this._allClippedDrawRect=null),this._clippedDrawableIndexList!=null&&(this._clippedDrawableIndexList=null)}addClippedDrawable(t){this._clippedDrawableIndexList.push(t)}}var Live2DCubismFramework$y;(r=>{r.CubismBlendMode=CubismBlendMode,r.CubismRenderer=CubismRenderer,r.CubismTextureColor=CubismTextureColor})(Live2DCubismFramework$y||(Live2DCubismFramework$y={}));const CubismLogPrint=(r,t,e)=>{CubismDebug.print(r,"[CSM]"+t,e)},CubismLogPrintIn=(r,t,e)=>{CubismLogPrint(r,t+`
`,e)},CSM_ASSERT=r=>{console.assert(r)};let CubismLogDebug,CubismLogInfo,CubismLogWarning,CubismLogError;CubismLogDebug=(r,...t)=>{CubismLogPrintIn(LogLevel.LogLevel_Debug,"[D]"+r,t)},CubismLogInfo=(r,...t)=>{CubismLogPrintIn(LogLevel.LogLevel_Info,"[I]"+r,t)},CubismLogWarning=(r,...t)=>{CubismLogPrintIn(LogLevel.LogLevel_Warning,"[W]"+r,t)},CubismLogError=(r,...t)=>{CubismLogPrintIn(LogLevel.LogLevel_Error,"[E]"+r,t)};class CubismDebug{static print(t,e,i){if(t<CubismFramework.getLoggingLevel())return;const s=CubismFramework.coreLogFunction;if(!s)return;const a=e.replace(/\{(\d+)\}/g,(o,n)=>i[n]);s(a)}static dumpBytes(t,e,i){for(let s=0;s<i;s++)s%16==0&&s>0?this.print(t,`
`):s%8==0&&s>0&&this.print(t,"  "),this.print(t,"{0} ",[e[s]&255]);this.print(t,`
`)}constructor(){}}var Live2DCubismFramework$x;(r=>{r.CubismDebug=CubismDebug})(Live2DCubismFramework$x||(Live2DCubismFramework$x={}));class csmPair{constructor(t,e){this.first=t??null,this.second=e??null}}const E=class E{constructor(t){t!=null?t<1?(this._keyValues=[],this._dummyValue=null,this._size=0):(this._keyValues=new Array(t),this._size=t):(this._keyValues=[],this._dummyValue=null,this._size=0)}release(){this.clear()}appendKey(t){this.prepareCapacity(this._size+1,!1),this._keyValues[this._size]=new csmPair(t),this._size+=1}getValue(t){let e=-1;for(let i=0;i<this._size;i++)if(this._keyValues[i].first==t){e=i;break}return e>=0?this._keyValues[e].second:(this.appendKey(t),this._keyValues[this._size-1].second)}setValue(t,e){let i=-1;for(let s=0;s<this._size;s++)if(this._keyValues[s].first==t){i=s;break}i>=0?this._keyValues[i].second=e:(this.appendKey(t),this._keyValues[this._size-1].second=e)}isExist(t){for(let e=0;e<this._size;e++)if(this._keyValues[e].first==t)return!0;return!1}clear(){this._keyValues=void 0,this._keyValues=null,this._keyValues=[],this._size=0}getSize(){return this._size}prepareCapacity(t,e){t>this._keyValues.length&&(this._keyValues.length==0?(!e&&t<E.DefaultSize&&(t=E.DefaultSize),this._keyValues.length=t):(!e&&t<this._keyValues.length*2&&(t=this._keyValues.length*2),this._keyValues.length=t))}begin(){return new iterator(this,0)}end(){return new iterator(this,this._size)}erase(t){const e=t._index;return e<0||this._size<=e?t:(this._keyValues.splice(e,1),--this._size,new iterator(this,e))}dumpAsInt(){for(let t=0;t<this._size;t++)CubismLogDebug("{0} ,",this._keyValues[t]),CubismLogDebug(`
`)}};E.DefaultSize=10;let csmMap=E;class iterator{constructor(t,e){this._map=t??new csmMap,this._index=e??0}set(t){return this._index=t._index,this._map=t._map,this}preIncrement(){return++this._index,this}preDecrement(){return--this._index,this}increment(){return new iterator(this._map,this._index++)}decrement(){const t=new iterator(this._map,this._index);return this._map=t._map,this._index=t._index,this}ptr(){return this._map._keyValues[this._index]}notEqual(t){return this._index!=t._index||this._map!=t._map}}var Live2DCubismFramework$w;(r=>{r.csmMap=csmMap,r.csmPair=csmPair,r.iterator=iterator})(Live2DCubismFramework$w||(Live2DCubismFramework$w={}));class CubismJsonExtension{static parseJsonObject(t,e){return Object.keys(t).forEach(i=>{if(typeof t[i]=="boolean"){const s=!!t[i];e.put(i,new JsonBoolean(s))}else if(typeof t[i]=="string"){const s=String(t[i]);e.put(i,new JsonString(s))}else if(typeof t[i]=="number"){const s=Number(t[i]);e.put(i,new JsonFloat(s))}else t[i]instanceof Array?e.put(i,CubismJsonExtension.parseJsonArray(t[i])):t[i]instanceof Object?e.put(i,CubismJsonExtension.parseJsonObject(t[i],new JsonMap)):t[i]==null?e.put(i,new JsonNullvalue):e.put(i,t[i])}),e}static parseJsonArray(t){const e=new JsonArray;return Object.keys(t).forEach(i=>{if(typeof Number(i)=="number")if(typeof t[i]=="boolean"){const a=!!t[i];e.add(new JsonBoolean(a))}else if(typeof t[i]=="string"){const a=String(t[i]);e.add(new JsonString(a))}else if(typeof t[i]=="number"){const a=Number(t[i]);e.add(new JsonFloat(a))}else t[i]instanceof Array?e.add(this.parseJsonArray(t[i])):t[i]instanceof Object?e.add(this.parseJsonObject(t[i],new JsonMap)):t[i]==null?e.add(new JsonNullvalue):e.add(t[i]);else if(t[i]instanceof Array)e.add(this.parseJsonArray(t[i]));else if(t[i]instanceof Object)e.add(this.parseJsonObject(t[i],new JsonMap));else if(t[i]==null)e.add(new JsonNullvalue);else{const a=Array(t[i]);for(let o=0;o<a.length;o++)e.add(a[o])}}),e}}const CSM_JSON_ERROR_TYPE_MISMATCH="Error: type mismatch",CSM_JSON_ERROR_INDEX_OF_BOUNDS="Error: index out of bounds";let Value$2=class v{constructor(){}getRawString(t,e){return this.getString(t,e)}toInt(t=0){return t}toFloat(t=0){return t}toBoolean(t=!1){return t}getSize(){return 0}getArray(t=null){return t}getVector(t=new csmVector){return t}getMap(t){return t}getValueByIndex(t){return v.errorValue.setErrorNotForClientCall(CSM_JSON_ERROR_TYPE_MISMATCH)}getValueByString(t){return v.nullValue.setErrorNotForClientCall(CSM_JSON_ERROR_TYPE_MISMATCH)}getKeys(){return v.dummyKeys}isError(){return!1}isNull(){return!1}isBool(){return!1}isFloat(){return!1}isString(){return!1}isArray(){return!1}isMap(){return!1}equals(t){return!1}isStatic(){return!1}setErrorNotForClientCall(t){return JsonError.errorValue}static staticInitializeNotForClientCall(){JsonBoolean.trueValue=new JsonBoolean(!0),JsonBoolean.falseValue=new JsonBoolean(!1),v.errorValue=new JsonError("ERROR",!0),v.nullValue=new JsonNullvalue,v.dummyKeys=new csmVector}static staticReleaseNotForClientCall(){JsonBoolean.trueValue=null,JsonBoolean.falseValue=null,v.errorValue=null,v.nullValue=null,v.dummyKeys=null}};class CubismJson{constructor(t,e){this._parseCallback=CubismJsonExtension.parseJsonObject,this._error=null,this._lineCount=0,this._root=null,t!=null&&this.parseBytes(t,e,this._parseCallback)}static create(t,e){const i=new CubismJson;return i.parseBytes(t,e,i._parseCallback)?i:(CubismJson.delete(i),null)}static delete(t){}getRoot(){return this._root}static arrayBufferToString(t){const e=new Uint8Array(t);let i="";for(let s=0,a=e.length;s<a;++s)i+="%"+this.pad(e[s].toString(16));return i=decodeURIComponent(i),i}static pad(t){return t.length<2?"0"+t:t}parseBytes(t,e,i){const s=new Array(1),a=CubismJson.arrayBufferToString(t);if(i==null?this._root=this.parseValue(a,e,0,s):this._root=i(JSON.parse(a),new JsonMap),this._error){let o="\0";return o="Json parse error : @line "+(this._lineCount+1)+`
`,this._root=new JsonString(o),CubismLogInfo("{0}",this._root.getRawString()),!1}else if(this._root==null)return this._root=new JsonError(new csmString(this._error),!1),!1;return!0}getParseError(){return this._error}checkEndOfFile(){return this._root.getArray()[1].equals("EOF")}parseValue(t,e,i,s){if(this._error)return null;let a=null,o=i,n;for(;o<e;o++)switch(t[o]){case"-":case".":case"0":case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":{const h=new Array(1);return n=strtod(t.slice(o),h),s[0]=t.indexOf(h[0]),new JsonFloat(n)}case'"':return new JsonString(this.parseString(t,e,o+1,s));case"[":return a=this.parseArray(t,e,o+1,s),a;case"{":return a=this.parseObject(t,e,o+1,s),a;case"n":return o+3<e?(a=new JsonNullvalue,s[0]=o+4):this._error="parse null",a;case"t":return o+3<e?(a=JsonBoolean.trueValue,s[0]=o+4):this._error="parse true",a;case"f":return o+4<e?(a=JsonBoolean.falseValue,s[0]=o+5):this._error="illegal ',' position",a;case",":return this._error="illegal ',' position",null;case"]":return s[0]=o,null;case`
`:this._lineCount++}return this._error="illegal end of value",null}parseString(t,e,i,s){if(this._error)return null;if(!t)return this._error="string is null",null;let a=i,o,n;const l=new csmString("");let h=i;for(;a<e;a++)switch(o=t[a],o){case'"':return s[0]=a+1,l.append(t.slice(h),a-h),l.s;case"//":if(a++,a-1>h&&l.append(t.slice(h),a-h),h=a+1,a<e)switch(n=t[a],n){case"\\":l.expansion(1,"\\");break;case'"':l.expansion(1,'"');break;case"/":l.expansion(1,"/");break;case"b":l.expansion(1,"\b");break;case"f":l.expansion(1,"\f");break;case"n":l.expansion(1,`
`);break;case"r":l.expansion(1,"\r");break;case"t":l.expansion(1,"	");break;case"u":this._error="parse string/unicord escape not supported";break}else this._error="parse string/escape error"}return this._error="parse string/illegal end",null}parseObject(t,e,i,s){if(this._error)return null;if(!t)return this._error="buffer is null",null;const a=new JsonMap;let o="",n=i,l="";const h=Array(1);let u=!1;for(;n<e;n++){t:for(;n<e;n++)switch(l=t[n],l){case'"':if(o=this.parseString(t,e,n+1,h),this._error)return null;n=h[0],u=!0;break t;case"}":return s[0]=n+1,a;case":":this._error="illegal ':' position";break;case`
`:this._lineCount++}if(!u)return this._error="key not found",null;u=!1;t:for(;n<e;n++)switch(l=t[n],l){case":":u=!0,n++;break t;case"}":this._error="illegal '}' position";break;case`
`:this._lineCount++}if(!u)return this._error="':' not found",null;const g=this.parseValue(t,e,n,h);if(this._error)return null;n=h[0],a.put(o,g);t:for(;n<e;n++)switch(l=t[n],l){case",":break t;case"}":return s[0]=n+1,a;case`
`:this._lineCount++}}return this._error="illegal end of perseObject",null}parseArray(t,e,i,s){if(this._error)return null;if(!t)return this._error="buffer is null",null;let a=new JsonArray,o=i,n;const l=new Array(1);for(;o<e;o++){const h=this.parseValue(t,e,o,l);if(this._error)return null;o=l[0],h&&a.add(h);t:for(;o<e;o++)switch(n=t[o],n){case",":break t;case"]":return s[0]=o+1,a;case`
`:++this._lineCount}}return a=void 0,this._error="illegal end of parseObject",null}}class JsonFloat extends Value$2{constructor(t){super(),this._value=t}isFloat(){return!0}getString(t,e){const i="\0";return this._value=parseFloat(i),this._stringBuffer=i,this._stringBuffer}toInt(t=0){return parseInt(this._value.toString())}toFloat(t=0){return this._value}equals(t){return typeof t=="number"?Math.round(t)?!1:t==this._value:!1}}class JsonBoolean extends Value$2{isBool(){return!0}toBoolean(t=!1){return this._boolValue}getString(t,e){return this._stringBuffer=this._boolValue?"true":"false",this._stringBuffer}equals(t){return typeof t=="boolean"?t==this._boolValue:!1}isStatic(){return!0}constructor(t){super(),this._boolValue=t}}class JsonString extends Value$2{constructor(t){super(),typeof t=="string"&&(this._stringBuffer=t),t instanceof csmString&&(this._stringBuffer=t.s)}isString(){return!0}getString(t,e){return this._stringBuffer}equals(t){return typeof t=="string"?this._stringBuffer==t:t instanceof csmString?this._stringBuffer==t.s:!1}}class JsonError extends JsonString{isStatic(){return this._isStatic}setErrorNotForClientCall(t){return this._stringBuffer=t,this}constructor(t,e){typeof t=="string"?super(t):super(t),this._isStatic=e}isError(){return!0}}class JsonNullvalue extends Value$2{isNull(){return!0}getString(t,e){return this._stringBuffer}isStatic(){return!0}setErrorNotForClientCall(t){return this._stringBuffer=t,JsonError.nullValue}constructor(){super(),this._stringBuffer="NullValue"}}class JsonArray extends Value$2{constructor(){super(),this._array=new csmVector}release(){for(let t=this._array.begin();t.notEqual(this._array.end());t.preIncrement()){let e=t.ptr();e&&!e.isStatic()&&(e=void 0,e=null)}}isArray(){return!0}getValueByIndex(t){if(t<0||this._array.getSize()<=t)return Value$2.errorValue.setErrorNotForClientCall(CSM_JSON_ERROR_INDEX_OF_BOUNDS);const e=this._array.at(t);return e??Value$2.nullValue}getValueByString(t){return Value$2.errorValue.setErrorNotForClientCall(CSM_JSON_ERROR_TYPE_MISMATCH)}getString(t,e){const i=e+`[
`;for(let s=this._array.begin();s.notEqual(this._array.end());s.increment()){const a=s.ptr();this._stringBuffer+=e+""+a.getString(e+" ")+`
`}return this._stringBuffer=i+e+`]
`,this._stringBuffer}add(t){this._array.pushBack(t)}getVector(t=null){return this._array}getSize(){return this._array.getSize()}}class JsonMap extends Value$2{constructor(){super(),this._map=new csmMap}release(){const t=this._map.begin();for(;t.notEqual(this._map.end());){let e=t.ptr().second;e&&!e.isStatic()&&(e=void 0,e=null),t.preIncrement()}}isMap(){return!0}getValueByString(t){if(t instanceof csmString){const e=this._map.getValue(t.s);return e??Value$2.nullValue}for(let e=this._map.begin();e.notEqual(this._map.end());e.preIncrement())if(e.ptr().first==t)return e.ptr().second==null?Value$2.nullValue:e.ptr().second;return Value$2.nullValue}getValueByIndex(t){return Value$2.errorValue.setErrorNotForClientCall(CSM_JSON_ERROR_TYPE_MISMATCH)}getString(t,e){this._stringBuffer=e+`{
`;const i=this._map.begin();for(;i.notEqual(this._map.end());){const s=i.ptr().first,a=i.ptr().second;this._stringBuffer+=e+" "+s+" : "+a.getString(e+"   ")+` 
`,i.preIncrement()}return this._stringBuffer+=e+`}
`,this._stringBuffer}getMap(t){return this._map}put(t,e){this._map.setValue(t,e)}getKeys(){if(!this._keys){this._keys=new csmVector;const t=this._map.begin();for(;t.notEqual(this._map.end());){const e=t.ptr().first;this._keys.pushBack(e),t.preIncrement()}}return this._keys}getSize(){return this._keys.getSize()}}var Live2DCubismFramework$v;(r=>{r.CubismJson=CubismJson,r.JsonArray=JsonArray,r.JsonBoolean=JsonBoolean,r.JsonError=JsonError,r.JsonFloat=JsonFloat,r.JsonMap=JsonMap,r.JsonNullvalue=JsonNullvalue,r.JsonString=JsonString,r.Value=Value$2})(Live2DCubismFramework$v||(Live2DCubismFramework$v={}));function strtod(r,t){let e=0;for(let s=1;;s++){const a=r.slice(s-1,s);if(a=="e"||a=="-"||a=="E")continue;const o=r.substring(0,s),n=Number(o);if(isNaN(n))break;e=s}let i=parseFloat(r);return isNaN(i)&&(i=NaN),t[0]=r.slice(e),i}let s_isStarted=!1,s_isInitialized=!1,s_option=null,s_cubismIdManager=null;const Constant=Object.freeze({vertexOffset:0,vertexStep:2});function csmDelete(r){r&&(r=void 0)}class CubismFramework{static startUp(t=null){if(s_isStarted)return CubismLogInfo("CubismFramework.startUp() is already done."),s_isStarted;if(s_option=t,s_option!=null&&Live2DCubismCore.Logging.csmSetLogFunction(s_option.logFunction),s_isStarted=!0,s_isStarted){const e=Live2DCubismCore.Version.csmGetVersion(),i=(e&4278190080)>>24,s=(e&16711680)>>16,a=e&65535,o=e;CubismLogInfo("Live2D Cubism Core version: {0}.{1}.{2} ({3})",("00"+i).slice(-2),("00"+s).slice(-2),("0000"+a).slice(-4),o)}return CubismLogInfo("CubismFramework.startUp() is complete."),s_isStarted}static cleanUp(){s_isStarted=!1,s_isInitialized=!1,s_option=null,s_cubismIdManager=null}static initialize(t=0){if(CSM_ASSERT(s_isStarted),!s_isStarted){CubismLogWarning("CubismFramework is not started.");return}if(s_isInitialized){CubismLogWarning("CubismFramework.initialize() skipped, already initialized.");return}Value$2.staticInitializeNotForClientCall(),s_cubismIdManager=new CubismIdManager,Live2DCubismCore.Memory.initializeAmountOfMemory(t),s_isInitialized=!0,CubismLogInfo("CubismFramework.initialize() is complete.")}static dispose(){if(CSM_ASSERT(s_isStarted),!s_isStarted){CubismLogWarning("CubismFramework is not started.");return}if(!s_isInitialized){CubismLogWarning("CubismFramework.dispose() skipped, not initialized.");return}Value$2.staticReleaseNotForClientCall(),s_cubismIdManager.release(),s_cubismIdManager=null,CubismRenderer.staticRelease(),s_isInitialized=!1,CubismLogInfo("CubismFramework.dispose() is complete.")}static isStarted(){return s_isStarted}static isInitialized(){return s_isInitialized}static coreLogFunction(t){Live2DCubismCore.Logging.csmGetLogFunction()&&Live2DCubismCore.Logging.csmGetLogFunction()(t)}static getLoggingLevel(){return s_option!=null?s_option.loggingLevel:5}static getIdManager(){return s_cubismIdManager}constructor(){}}class Option{}var LogLevel=(r=>(r[r.LogLevel_Verbose=0]="LogLevel_Verbose",r[r.LogLevel_Debug=1]="LogLevel_Debug",r[r.LogLevel_Info=2]="LogLevel_Info",r[r.LogLevel_Warning=3]="LogLevel_Warning",r[r.LogLevel_Error=4]="LogLevel_Error",r[r.LogLevel_Off=5]="LogLevel_Off",r))(LogLevel||{}),Live2DCubismFramework$u;(r=>{r.Constant=Constant,r.csmDelete=csmDelete,r.CubismFramework=CubismFramework})(Live2DCubismFramework$u||(Live2DCubismFramework$u={}));const ViewScale=1,ViewMaxScale=2,ViewMinScale=.8,ViewLogicalLeft=-1,ViewLogicalRight=1,ViewLogicalMaxLeft=-2,ViewLogicalMaxRight=2,ViewLogicalMaxBottom=-2,ViewLogicalMaxTop=2,ResourcesPath="../../Resources/",BackImageName="room.png",GearImageName="",ModelDir=["Haru","Hiyori","Mark","Natori","Rice","Mao","Wanko"],ModelDirSize=ModelDir.length,MotionGroupIdle="Idle",MotionGroupTapBody="TapBody",HitAreaNameHead="Head",HitAreaNameBody="Body",PriorityIdle=1,PriorityNormal=2,PriorityForce=3,CubismLoggingLevel=LogLevel.LogLevel_Verbose;let canvas=null,gl=null,s_instance$4=null;class LAppGlManager{static getInstance(){return s_instance$4==null&&(s_instance$4=new LAppGlManager),s_instance$4}static releaseInstance(){s_instance$4!=null&&s_instance$4.release(),s_instance$4=null}constructor(){canvas=document.createElement("canvas"),gl=canvas.getContext("webgl2"),gl||(alert("Cannot initialize WebGL. This browser does not support."),gl=null,document.body.innerHTML="This browser does not support the <code>&lt;canvas&gt;</code> element.")}release(){}}const CubismDefaultParameterId=Object.freeze({HitAreaPrefix:"HitArea",HitAreaHead:"Head",HitAreaBody:"Body",PartsIdCore:"Parts01Core",PartsArmPrefix:"Parts01Arm_",PartsArmLPrefix:"Parts01ArmL_",PartsArmRPrefix:"Parts01ArmR_",ParamAngleX:"ParamAngleX",ParamAngleY:"ParamAngleY",ParamAngleZ:"ParamAngleZ",ParamEyeLOpen:"ParamEyeLOpen",ParamEyeLSmile:"ParamEyeLSmile",ParamEyeROpen:"ParamEyeROpen",ParamEyeRSmile:"ParamEyeRSmile",ParamEyeBallX:"ParamEyeBallX",ParamEyeBallY:"ParamEyeBallY",ParamEyeBallForm:"ParamEyeBallForm",ParamBrowLY:"ParamBrowLY",ParamBrowRY:"ParamBrowRY",ParamBrowLX:"ParamBrowLX",ParamBrowRX:"ParamBrowRX",ParamBrowLAngle:"ParamBrowLAngle",ParamBrowRAngle:"ParamBrowRAngle",ParamBrowLForm:"ParamBrowLForm",ParamBrowRForm:"ParamBrowRForm",ParamMouthForm:"ParamMouthForm",ParamMouthOpenY:"ParamMouthOpenY",ParamCheek:"ParamCheek",ParamBodyAngleX:"ParamBodyAngleX",ParamBodyAngleY:"ParamBodyAngleY",ParamBodyAngleZ:"ParamBodyAngleZ",ParamBreath:"ParamBreath",ParamArmLA:"ParamArmLA",ParamArmRA:"ParamArmRA",ParamArmLB:"ParamArmLB",ParamArmRB:"ParamArmRB",ParamHandL:"ParamHandL",ParamHandR:"ParamHandR",ParamHairFront:"ParamHairFront",ParamHairSide:"ParamHairSide",ParamHairBack:"ParamHairBack",ParamHairFluffy:"ParamHairFluffy",ParamShoulderY:"ParamShoulderY",ParamBustX:"ParamBustX",ParamBustY:"ParamBustY",ParamBaseX:"ParamBaseX",ParamBaseY:"ParamBaseY",ParamNONE:"NONE:"});var Live2DCubismFramework$t;(r=>{r.HitAreaBody=CubismDefaultParameterId.HitAreaBody,r.HitAreaHead=CubismDefaultParameterId.HitAreaHead,r.HitAreaPrefix=CubismDefaultParameterId.HitAreaPrefix,r.ParamAngleX=CubismDefaultParameterId.ParamAngleX,r.ParamAngleY=CubismDefaultParameterId.ParamAngleY,r.ParamAngleZ=CubismDefaultParameterId.ParamAngleZ,r.ParamArmLA=CubismDefaultParameterId.ParamArmLA,r.ParamArmLB=CubismDefaultParameterId.ParamArmLB,r.ParamArmRA=CubismDefaultParameterId.ParamArmRA,r.ParamArmRB=CubismDefaultParameterId.ParamArmRB,r.ParamBaseX=CubismDefaultParameterId.ParamBaseX,r.ParamBaseY=CubismDefaultParameterId.ParamBaseY,r.ParamBodyAngleX=CubismDefaultParameterId.ParamBodyAngleX,r.ParamBodyAngleY=CubismDefaultParameterId.ParamBodyAngleY,r.ParamBodyAngleZ=CubismDefaultParameterId.ParamBodyAngleZ,r.ParamBreath=CubismDefaultParameterId.ParamBreath,r.ParamBrowLAngle=CubismDefaultParameterId.ParamBrowLAngle,r.ParamBrowLForm=CubismDefaultParameterId.ParamBrowLForm,r.ParamBrowLX=CubismDefaultParameterId.ParamBrowLX,r.ParamBrowLY=CubismDefaultParameterId.ParamBrowLY,r.ParamBrowRAngle=CubismDefaultParameterId.ParamBrowRAngle,r.ParamBrowRForm=CubismDefaultParameterId.ParamBrowRForm,r.ParamBrowRX=CubismDefaultParameterId.ParamBrowRX,r.ParamBrowRY=CubismDefaultParameterId.ParamBrowRY,r.ParamBustX=CubismDefaultParameterId.ParamBustX,r.ParamBustY=CubismDefaultParameterId.ParamBustY,r.ParamCheek=CubismDefaultParameterId.ParamCheek,r.ParamEyeBallForm=CubismDefaultParameterId.ParamEyeBallForm,r.ParamEyeBallX=CubismDefaultParameterId.ParamEyeBallX,r.ParamEyeBallY=CubismDefaultParameterId.ParamEyeBallY,r.ParamEyeLOpen=CubismDefaultParameterId.ParamEyeLOpen,r.ParamEyeLSmile=CubismDefaultParameterId.ParamEyeLSmile,r.ParamEyeROpen=CubismDefaultParameterId.ParamEyeROpen,r.ParamEyeRSmile=CubismDefaultParameterId.ParamEyeRSmile,r.ParamHairBack=CubismDefaultParameterId.ParamHairBack,r.ParamHairFluffy=CubismDefaultParameterId.ParamHairFluffy,r.ParamHairFront=CubismDefaultParameterId.ParamHairFront,r.ParamHairSide=CubismDefaultParameterId.ParamHairSide,r.ParamHandL=CubismDefaultParameterId.ParamHandL,r.ParamHandR=CubismDefaultParameterId.ParamHandR,r.ParamMouthForm=CubismDefaultParameterId.ParamMouthForm,r.ParamMouthOpenY=CubismDefaultParameterId.ParamMouthOpenY,r.ParamNONE=CubismDefaultParameterId.ParamNONE,r.ParamShoulderY=CubismDefaultParameterId.ParamShoulderY,r.PartsArmLPrefix=CubismDefaultParameterId.PartsArmLPrefix,r.PartsArmPrefix=CubismDefaultParameterId.PartsArmPrefix,r.PartsArmRPrefix=CubismDefaultParameterId.PartsArmRPrefix,r.PartsIdCore=CubismDefaultParameterId.PartsIdCore})(Live2DCubismFramework$t||(Live2DCubismFramework$t={}));class ICubismModelSetting{}var Live2DCubismFramework$s;(r=>{r.ICubismModelSetting=ICubismModelSetting})(Live2DCubismFramework$s||(Live2DCubismFramework$s={}));const FileReferences="FileReferences",Groups$1="Groups",Layout="Layout",HitAreas="HitAreas",Moc="Moc",Textures="Textures",Physics="Physics",Pose="Pose",Expressions="Expressions",Motions="Motions",UserData$2="UserData",Name="Name",FilePath="File",Id$4="Id",Ids="Ids",SoundPath="Sound",FadeInTime$1="FadeInTime",FadeOutTime$1="FadeOutTime",LipSync="LipSync",EyeBlink="EyeBlink";class CubismModelSettingJson extends ICubismModelSetting{constructor(t,e){super(),this._json=CubismJson.create(t,e),this.getJson()&&(this._jsonValue=new csmVector,this._jsonValue.pushBack(this.getJson().getRoot().getValueByString(Groups$1)),this._jsonValue.pushBack(this.getJson().getRoot().getValueByString(FileReferences).getValueByString(Moc)),this._jsonValue.pushBack(this.getJson().getRoot().getValueByString(FileReferences).getValueByString(Motions)),this._jsonValue.pushBack(this.getJson().getRoot().getValueByString(FileReferences).getValueByString(Expressions)),this._jsonValue.pushBack(this.getJson().getRoot().getValueByString(FileReferences).getValueByString(Textures)),this._jsonValue.pushBack(this.getJson().getRoot().getValueByString(FileReferences).getValueByString(Physics)),this._jsonValue.pushBack(this.getJson().getRoot().getValueByString(FileReferences).getValueByString(Pose)),this._jsonValue.pushBack(this.getJson().getRoot().getValueByString(HitAreas)))}release(){CubismJson.delete(this._json),this._jsonValue=null}getJson(){return this._json}getModelFileName(){return this.isExistModelFile()?this._jsonValue.at(1).getRawString():""}getTextureCount(){return this.isExistTextureFiles()?this._jsonValue.at(4).getSize():0}getTextureDirectory(){const e=this._jsonValue.at(4).getValueByIndex(0).getRawString().split("/"),i=e.length-1;let s="";for(let a=0;a<i;a++)s+=e[a],a<i-1&&(s+="/");return s}getTextureFileName(t){return this._jsonValue.at(4).getValueByIndex(t).getRawString()}getHitAreasCount(){return this.isExistHitAreas()?this._jsonValue.at(7).getSize():0}getHitAreaId(t){return CubismFramework.getIdManager().getId(this._jsonValue.at(7).getValueByIndex(t).getValueByString(Id$4).getRawString())}getHitAreaName(t){return this._jsonValue.at(7).getValueByIndex(t).getValueByString(Name).getRawString()}getPhysicsFileName(){return this.isExistPhysicsFile()?this._jsonValue.at(5).getRawString():""}getPoseFileName(){return this.isExistPoseFile()?this._jsonValue.at(6).getRawString():""}getExpressionCount(){return this.isExistExpressionFile()?this._jsonValue.at(3).getSize():0}getExpressionName(t){return this._jsonValue.at(3).getValueByIndex(t).getValueByString(Name).getRawString()}getExpressionFileName(t){return this._jsonValue.at(3).getValueByIndex(t).getValueByString(FilePath).getRawString()}getMotionGroupCount(){return this.isExistMotionGroups()?this._jsonValue.at(2).getKeys().getSize():0}getMotionGroupName(t){return this.isExistMotionGroups()?this._jsonValue.at(2).getKeys().at(t):null}getMotionCount(t){return this.isExistMotionGroupName(t)?this._jsonValue.at(2).getValueByString(t).getSize():0}getMotionFileName(t,e){return this.isExistMotionGroupName(t)?this._jsonValue.at(2).getValueByString(t).getValueByIndex(e).getValueByString(FilePath).getRawString():""}getMotionSoundFileName(t,e){return this.isExistMotionSoundFile(t,e)?this._jsonValue.at(2).getValueByString(t).getValueByIndex(e).getValueByString(SoundPath).getRawString():""}getMotionFadeInTimeValue(t,e){return this.isExistMotionFadeIn(t,e)?this._jsonValue.at(2).getValueByString(t).getValueByIndex(e).getValueByString(FadeInTime$1).toFloat():-1}getMotionFadeOutTimeValue(t,e){return this.isExistMotionFadeOut(t,e)?this._jsonValue.at(2).getValueByString(t).getValueByIndex(e).getValueByString(FadeOutTime$1).toFloat():-1}getUserDataFile(){return this.isExistUserDataFile()?this.getJson().getRoot().getValueByString(FileReferences).getValueByString(UserData$2).getRawString():""}getLayoutMap(t){const e=this.getJson().getRoot().getValueByString(Layout).getMap();if(e==null)return!1;let i=!1;for(const s=e.begin();s.notEqual(e.end());s.preIncrement())t.setValue(s.ptr().first,s.ptr().second.toFloat()),i=!0;return i}getEyeBlinkParameterCount(){if(!this.isExistEyeBlinkParameters())return 0;let t=0;for(let e=0;e<this._jsonValue.at(0).getSize();e++){const i=this._jsonValue.at(0).getValueByIndex(e);if(!(i.isNull()||i.isError())&&i.getValueByString(Name).getRawString()==EyeBlink){t=i.getValueByString(Ids).getVector().getSize();break}}return t}getEyeBlinkParameterId(t){if(!this.isExistEyeBlinkParameters())return null;for(let e=0;e<this._jsonValue.at(0).getSize();e++){const i=this._jsonValue.at(0).getValueByIndex(e);if(!(i.isNull()||i.isError())&&i.getValueByString(Name).getRawString()==EyeBlink)return CubismFramework.getIdManager().getId(i.getValueByString(Ids).getValueByIndex(t).getRawString())}return null}getLipSyncParameterCount(){if(!this.isExistLipSyncParameters())return 0;let t=0;for(let e=0;e<this._jsonValue.at(0).getSize();e++){const i=this._jsonValue.at(0).getValueByIndex(e);if(!(i.isNull()||i.isError())&&i.getValueByString(Name).getRawString()==LipSync){t=i.getValueByString(Ids).getVector().getSize();break}}return t}getLipSyncParameterId(t){if(!this.isExistLipSyncParameters())return null;for(let e=0;e<this._jsonValue.at(0).getSize();e++){const i=this._jsonValue.at(0).getValueByIndex(e);if(!(i.isNull()||i.isError())&&i.getValueByString(Name).getRawString()==LipSync)return CubismFramework.getIdManager().getId(i.getValueByString(Ids).getValueByIndex(t).getRawString())}return null}isExistModelFile(){const t=this._jsonValue.at(1);return!t.isNull()&&!t.isError()}isExistTextureFiles(){const t=this._jsonValue.at(4);return!t.isNull()&&!t.isError()}isExistHitAreas(){const t=this._jsonValue.at(7);return!t.isNull()&&!t.isError()}isExistPhysicsFile(){const t=this._jsonValue.at(5);return!t.isNull()&&!t.isError()}isExistPoseFile(){const t=this._jsonValue.at(6);return!t.isNull()&&!t.isError()}isExistExpressionFile(){const t=this._jsonValue.at(3);return!t.isNull()&&!t.isError()}isExistMotionGroups(){const t=this._jsonValue.at(2);return!t.isNull()&&!t.isError()}isExistMotionGroupName(t){const e=this._jsonValue.at(2).getValueByString(t);return!e.isNull()&&!e.isError()}isExistMotionSoundFile(t,e){const i=this._jsonValue.at(2).getValueByString(t).getValueByIndex(e).getValueByString(SoundPath);return!i.isNull()&&!i.isError()}isExistMotionFadeIn(t,e){const i=this._jsonValue.at(2).getValueByString(t).getValueByIndex(e).getValueByString(FadeInTime$1);return!i.isNull()&&!i.isError()}isExistMotionFadeOut(t,e){const i=this._jsonValue.at(2).getValueByString(t).getValueByIndex(e).getValueByString(FadeOutTime$1);return!i.isNull()&&!i.isError()}isExistUserDataFile(){const t=this.getJson().getRoot().getValueByString(FileReferences).getValueByString(UserData$2);return!t.isNull()&&!t.isError()}isExistEyeBlinkParameters(){if(this._jsonValue.at(0).isNull()||this._jsonValue.at(0).isError())return!1;for(let t=0;t<this._jsonValue.at(0).getSize();++t)if(this._jsonValue.at(0).getValueByIndex(t).getValueByString(Name).getRawString()==EyeBlink)return!0;return!1}isExistLipSyncParameters(){if(this._jsonValue.at(0).isNull()||this._jsonValue.at(0).isError())return!1;for(let t=0;t<this._jsonValue.at(0).getSize();++t)if(this._jsonValue.at(0).getValueByIndex(t).getValueByString(Name).getRawString()==LipSync)return!0;return!1}}var Live2DCubismFramework$r;(r=>{r.CubismModelSettingJson=CubismModelSettingJson})(Live2DCubismFramework$r||(Live2DCubismFramework$r={}));class CubismBreath{static create(){return new CubismBreath}static delete(t){}setParameters(t){this._breathParameters=t}getParameters(){return this._breathParameters}updateParameters(t,e){this._currentTime+=e;const i=this._currentTime*2*3.14159;for(let s=0;s<this._breathParameters.getSize();++s){const a=this._breathParameters.at(s);t.addParameterValueById(a.parameterId,a.offset+a.peak*Math.sin(i/a.cycle),a.weight)}}constructor(){this._currentTime=0}}class BreathParameterData{constructor(t,e,i,s,a){this.parameterId=t??null,this.offset=e??0,this.peak=i??0,this.cycle=s??0,this.weight=a??0}}var Live2DCubismFramework$q;(r=>{r.BreathParameterData=BreathParameterData,r.CubismBreath=CubismBreath})(Live2DCubismFramework$q||(Live2DCubismFramework$q={}));const R=class R{static create(t=null){return new R(t)}static delete(t){}setBlinkingInterval(t){this._blinkingIntervalSeconds=t}setBlinkingSetting(t,e,i){this._closingSeconds=t,this._closedSeconds=e,this._openingSeconds=i}setParameterIds(t){this._parameterIds=t}getParameterIds(){return this._parameterIds}updateParameters(t,e){this._userTimeSeconds+=e;let i,s=0;switch(this._blinkingState){case 2:s=(this._userTimeSeconds-this._stateStartTimeSeconds)/this._closingSeconds,s>=1&&(s=1,this._blinkingState=3,this._stateStartTimeSeconds=this._userTimeSeconds),i=1-s;break;case 3:s=(this._userTimeSeconds-this._stateStartTimeSeconds)/this._closedSeconds,s>=1&&(this._blinkingState=4,this._stateStartTimeSeconds=this._userTimeSeconds),i=0;break;case 4:s=(this._userTimeSeconds-this._stateStartTimeSeconds)/this._openingSeconds,s>=1&&(s=1,this._blinkingState=1,this._nextBlinkingTime=this.determinNextBlinkingTiming()),i=s;break;case 1:this._nextBlinkingTime<this._userTimeSeconds&&(this._blinkingState=2,this._stateStartTimeSeconds=this._userTimeSeconds),i=1;break;case 0:default:this._blinkingState=1,this._nextBlinkingTime=this.determinNextBlinkingTiming(),i=1;break}R.CloseIfZero||(i=-i);for(let o=0;o<this._parameterIds.getSize();++o)t.setParameterValueById(this._parameterIds.at(o),i)}constructor(t){if(this._blinkingState=0,this._nextBlinkingTime=0,this._stateStartTimeSeconds=0,this._blinkingIntervalSeconds=4,this._closingSeconds=.1,this._closedSeconds=.05,this._openingSeconds=.15,this._userTimeSeconds=0,this._parameterIds=new csmVector,t!=null)for(let e=0;e<t.getEyeBlinkParameterCount();++e)this._parameterIds.pushBack(t.getEyeBlinkParameterId(e))}determinNextBlinkingTiming(){const t=Math.random();return this._userTimeSeconds+t*(2*this._blinkingIntervalSeconds-1)}};R.CloseIfZero=!0;let CubismEyeBlink=R;var EyeState=(r=>(r[r.EyeState_First=0]="EyeState_First",r[r.EyeState_Interval=1]="EyeState_Interval",r[r.EyeState_Closing=2]="EyeState_Closing",r[r.EyeState_Closed=3]="EyeState_Closed",r[r.EyeState_Opening=4]="EyeState_Opening",r))(EyeState||{}),Live2DCubismFramework$p;(r=>{r.CubismEyeBlink=CubismEyeBlink,r.EyeState=EyeState})(Live2DCubismFramework$p||(Live2DCubismFramework$p={}));const Epsilon$1=.001,DefaultFadeInSeconds=.5,FadeIn="FadeInTime",Link="Link",Groups="Groups",Id$3="Id";class CubismPose{static create(t,e){const i=CubismJson.create(t,e);if(!i)return null;const s=new CubismPose,a=i.getRoot();a.getValueByString(FadeIn).isNull()||(s._fadeTimeSeconds=a.getValueByString(FadeIn).toFloat(DefaultFadeInSeconds),s._fadeTimeSeconds<=0&&(s._fadeTimeSeconds=DefaultFadeInSeconds));const o=a.getValueByString(Groups),n=o.getSize();for(let l=0;l<n;++l){const h=o.getValueByIndex(l),u=h.getSize();let g=0;for(let d=0;d<u;++d){const c=h.getValueByIndex(d),m=new PartData,p=CubismFramework.getIdManager().getId(c.getValueByString(Id$3).getRawString());if(m.partId=p,!c.getValueByString(Link).isNull()){const _=c.getValueByString(Link),C=_.getSize();for(let f=0;f<C;++f){const y=new PartData,S=CubismFramework.getIdManager().getId(_.getValueByIndex(f).getString());y.partId=S,m.link.pushBack(y)}}s._partGroups.pushBack(m.clone()),++g}s._partGroupCounts.pushBack(g)}return CubismJson.delete(i),s}static delete(t){}updateParameters(t,e){t!=this._lastModel&&this.reset(t),this._lastModel=t,e<0&&(e=0);let i=0;for(let s=0;s<this._partGroupCounts.getSize();s++){const a=this._partGroupCounts.at(s);this.doFade(t,e,i,a),i+=a}this.copyPartOpacities(t)}reset(t){let e=0;for(let i=0;i<this._partGroupCounts.getSize();++i){const s=this._partGroupCounts.at(i);for(let a=e;a<e+s;++a){this._partGroups.at(a).initialize(t);const o=this._partGroups.at(a).partIndex,n=this._partGroups.at(a).parameterIndex;if(!(o<0)){t.setPartOpacityByIndex(o,a==e?1:0),t.setParameterValueByIndex(n,a==e?1:0);for(let l=0;l<this._partGroups.at(a).link.getSize();++l)this._partGroups.at(a).link.at(l).initialize(t)}}e+=s}}copyPartOpacities(t){for(let e=0;e<this._partGroups.getSize();++e){const i=this._partGroups.at(e);if(i.link.getSize()==0)continue;const s=this._partGroups.at(e).partIndex,a=t.getPartOpacityByIndex(s);for(let o=0;o<i.link.getSize();++o){const l=i.link.at(o).partIndex;l<0||t.setPartOpacityByIndex(l,a)}}}doFade(t,e,i,s){let a=-1,o=1;const n=.5,l=.15;for(let h=i;h<i+s;++h){const u=this._partGroups.at(h).partIndex,g=this._partGroups.at(h).parameterIndex;if(t.getParameterValueByIndex(g)>Epsilon$1){if(a>=0)break;a=h,o=t.getPartOpacityByIndex(u),o+=e/this._fadeTimeSeconds,o>1&&(o=1)}}a<0&&(a=0,o=1);for(let h=i;h<i+s;++h){const u=this._partGroups.at(h).partIndex;if(a==h)t.setPartOpacityByIndex(u,o);else{let g=t.getPartOpacityByIndex(u),d;o<n?d=o*(n-1)/n+1:d=(1-o)*n/(1-n),(1-d)*(1-o)>l&&(d=1-l/(1-o)),g>d&&(g=d),t.setPartOpacityByIndex(u,g)}}}constructor(){this._fadeTimeSeconds=DefaultFadeInSeconds,this._lastModel=null,this._partGroups=new csmVector,this._partGroupCounts=new csmVector}}class PartData{constructor(t){if(this.parameterIndex=0,this.partIndex=0,this.link=new csmVector,t!=null){this.partId=t.partId;for(const e=t.link.begin();e.notEqual(t.link.end());e.preIncrement())this.link.pushBack(e.ptr().clone())}}assignment(t){this.partId=t.partId;for(const e=t.link.begin();e.notEqual(t.link.end());e.preIncrement())this.link.pushBack(e.ptr().clone());return this}initialize(t){this.parameterIndex=t.getParameterIndex(this.partId),this.partIndex=t.getPartIndex(this.partId),t.setParameterValueByIndex(this.parameterIndex,1)}clone(){const t=new PartData;t.partId=this.partId,t.parameterIndex=this.parameterIndex,t.partIndex=this.partIndex,t.link=new csmVector;for(let e=this.link.begin();e.notEqual(this.link.end());e.increment())t.link.pushBack(e.ptr().clone());return t}}var Live2DCubismFramework$o;(r=>{r.CubismPose=CubismPose,r.PartData=PartData})(Live2DCubismFramework$o||(Live2DCubismFramework$o={}));class CubismModelMatrix extends CubismMatrix44{constructor(t,e){super(),this._width=t!==void 0?t:0,this._height=e!==void 0?e:0,this.setHeight(2)}setWidth(t){const e=t/this._width,i=e;this.scale(e,i)}setHeight(t){const e=t/this._height,i=e;this.scale(e,i)}setPosition(t,e){this.translate(t,e)}setCenterPosition(t,e){this.centerX(t),this.centerY(e)}top(t){this.setY(t)}bottom(t){const e=this._height*this.getScaleY();this.translateY(t-e)}left(t){this.setX(t)}right(t){const e=this._width*this.getScaleX();this.translateX(t-e)}centerX(t){const e=this._width*this.getScaleX();this.translateX(t-e/2)}setX(t){this.translateX(t)}centerY(t){const e=this._height*this.getScaleY();this.translateY(t-e/2)}setY(t){this.translateY(t)}setupFromLayout(t){const e="width",i="height",s="x",a="y",o="center_x",n="center_y",l="top",h="bottom",u="left",g="right";for(const d=t.begin();d.notEqual(t.end());d.preIncrement()){const c=d.ptr().first,m=d.ptr().second;c==e?this.setWidth(m):c==i&&this.setHeight(m)}for(const d=t.begin();d.notEqual(t.end());d.preIncrement()){const c=d.ptr().first,m=d.ptr().second;c==s?this.setX(m):c==a?this.setY(m):c==o?this.centerX(m):c==n?this.centerY(m):c==l?this.top(m):c==h?this.bottom(m):c==u?this.left(m):c==g&&this.right(m)}}}var Live2DCubismFramework$n;(r=>{r.CubismModelMatrix=CubismModelMatrix})(Live2DCubismFramework$n||(Live2DCubismFramework$n={}));class CubismVector2{constructor(t,e){this.x=t,this.y=e,this.x=t??0,this.y=e??0}add(t){const e=new CubismVector2(0,0);return e.x=this.x+t.x,e.y=this.y+t.y,e}substract(t){const e=new CubismVector2(0,0);return e.x=this.x-t.x,e.y=this.y-t.y,e}multiply(t){const e=new CubismVector2(0,0);return e.x=this.x*t.x,e.y=this.y*t.y,e}multiplyByScaler(t){return this.multiply(new CubismVector2(t,t))}division(t){const e=new CubismVector2(0,0);return e.x=this.x/t.x,e.y=this.y/t.y,e}divisionByScalar(t){return this.division(new CubismVector2(t,t))}getLength(){return Math.sqrt(this.x*this.x+this.y*this.y)}getDistanceWith(t){return Math.sqrt((this.x-t.x)*(this.x-t.x)+(this.y-t.y)*(this.y-t.y))}dot(t){return this.x*t.x+this.y*t.y}normalize(){const t=Math.pow(this.x*this.x+this.y*this.y,.5);this.x=this.x/t,this.y=this.y/t}isEqual(t){return this.x==t.x&&this.y==t.y}isNotEqual(t){return!this.isEqual(t)}}var Live2DCubismFramework$m;(r=>{r.CubismVector2=CubismVector2})(Live2DCubismFramework$m||(Live2DCubismFramework$m={}));const T=class T{static range(t,e,i){return t<e?t=e:t>i&&(t=i),t}static sin(t){return Math.sin(t)}static cos(t){return Math.cos(t)}static abs(t){return Math.abs(t)}static sqrt(t){return Math.sqrt(t)}static cbrt(t){if(t===0)return t;let e=t;const i=e<0;i&&(e=-e);let s;return e===1/0?s=1/0:(s=Math.exp(Math.log(e)/3),s=(e/(s*s)+2*s)/3),i?-s:s}static getEasingSine(t){return t<0?0:t>1?1:.5-.5*this.cos(t*Math.PI)}static max(t,e){return t>e?t:e}static min(t,e){return t>e?e:t}static degreesToRadian(t){return t/180*Math.PI}static radianToDegrees(t){return t*180/Math.PI}static directionToRadian(t,e){const i=Math.atan2(e.y,e.x),s=Math.atan2(t.y,t.x);let a=i-s;for(;a<-Math.PI;)a+=Math.PI*2;for(;a>Math.PI;)a-=Math.PI*2;return a}static directionToDegrees(t,e){const i=this.directionToRadian(t,e);let s=this.radianToDegrees(i);return e.x-t.x>0&&(s=-s),s}static radianToDirection(t){const e=new CubismVector2;return e.x=this.sin(t),e.y=this.cos(t),e}static quadraticEquation(t,e,i){return this.abs(t)<T.Epsilon?this.abs(e)<T.Epsilon?-i:-i/e:-(e+this.sqrt(e*e-4*t*i))/(2*t)}static cardanoAlgorithmForBezier(t,e,i,s){if(this.sqrt(t)<T.Epsilon)return this.range(this.quadraticEquation(e,i,s),0,1);const a=e/t,o=i/t,n=s/t,l=(3*o-a*a)/3,h=l/3,u=(2*a*a*a-9*a*o+27*n)/27,g=u/2,d=g*g+h*h*h,c=.5,m=c+.01;if(d<0){const y=-l/3,S=y*y*y,x=this.sqrt(S),b=-u/(2*x),M=this.range(b,-1,1),B=Math.acos(M),w=2*this.cbrt(x),V=w*this.cos(B/3)-a/3;if(this.abs(V-c)<m)return this.range(V,0,1);const L=w*this.cos((B+2*Math.PI)/3)-a/3;if(this.abs(L-c)<m)return this.range(L,0,1);const k=w*this.cos((B+4*Math.PI)/3)-a/3;return this.range(k,0,1)}if(d==0){let y;g<0?y=this.cbrt(-g):y=-this.cbrt(g);const S=2*y-a/3;if(this.abs(S-c)<m)return this.range(S,0,1);const x=-y-a/3;return this.range(x,0,1)}const p=this.sqrt(d),_=this.cbrt(p-g),C=this.cbrt(p+g),f=_-C-a/3;return this.range(f,0,1)}static mod(t,e){if(!isFinite(t)||e===0||isNaN(t)||isNaN(e))return console.warn(`divided: ${t}, divisor: ${e} mod() returns 'NaN'.`),NaN;const i=Math.abs(t),s=Math.abs(e);let a=i-Math.floor(i/s)*s;return a*=Math.sign(t),a}constructor(){}};T.Epsilon=1e-5;let CubismMath=T;var Live2DCubismFramework$l;(r=>{r.CubismMath=CubismMath})(Live2DCubismFramework$l||(Live2DCubismFramework$l={}));const FrameRate=30,Epsilon=.01;class CubismTargetPoint{constructor(){this._faceTargetX=0,this._faceTargetY=0,this._faceX=0,this._faceY=0,this._faceVX=0,this._faceVY=0,this._lastTimeSeconds=0,this._userTimeSeconds=0}update(t){this._userTimeSeconds+=t;const i=40/10*1/FrameRate;if(this._lastTimeSeconds==0){this._lastTimeSeconds=this._userTimeSeconds;return}const s=(this._userTimeSeconds-this._lastTimeSeconds)*FrameRate;this._lastTimeSeconds=this._userTimeSeconds;const o=.15*FrameRate,n=s*i/o,l=this._faceTargetX-this._faceX,h=this._faceTargetY-this._faceY;if(CubismMath.abs(l)<=Epsilon&&CubismMath.abs(h)<=Epsilon)return;const u=CubismMath.sqrt(l*l+h*h),g=i*l/u,d=i*h/u;let c=g-this._faceVX,m=d-this._faceVY;const p=CubismMath.sqrt(c*c+m*m);(p<-n||p>n)&&(c*=n/p,m*=n/p),this._faceVX+=c,this._faceVY+=m;{const _=.5*(CubismMath.sqrt(n*n+16*n*u-8*n*u)-n),C=CubismMath.sqrt(this._faceVX*this._faceVX+this._faceVY*this._faceVY);C>_&&(this._faceVX*=_/C,this._faceVY*=_/C)}this._faceX+=this._faceVX,this._faceY+=this._faceVY}getX(){return this._faceX}getY(){return this._faceY}set(t,e){this._faceTargetX=t,this._faceTargetY=e}}var Live2DCubismFramework$k;(r=>{r.CubismTargetPoint=CubismTargetPoint})(Live2DCubismFramework$k||(Live2DCubismFramework$k={}));class ACubismMotion{constructor(){this.setFinishedMotionHandler=t=>this._onFinishedMotion=t,this.getFinishedMotionHandler=()=>this._onFinishedMotion,this._fadeInSeconds=-1,this._fadeOutSeconds=-1,this._weight=1,this._offsetSeconds=0,this._firedEventValues=new csmVector}static delete(t){t.release(),t=null}release(){this._weight=0}updateParameters(t,e,i){if(!e.isAvailable()||e.isFinished())return;this.setupMotionQueueEntry(e,i);const s=this.updateFadeWeight(e,i);this.doUpdateParameters(t,i,s,e),e.getEndTime()>0&&e.getEndTime()<i&&e.setIsFinished(!0)}setupMotionQueueEntry(t,e){if(t==null||t.isStarted()||!t.isAvailable())return;t.setIsStarted(!0),t.setStartTime(e-this._offsetSeconds),t.setFadeInStartTime(e);const i=this.getDuration();t.getEndTime()<0&&t.setEndTime(i<=0?-1:t.getStartTime()+i)}updateFadeWeight(t,e){t==null&&CubismDebug.print(LogLevel.LogLevel_Error,"motionQueueEntry is null.");let i=this._weight;const s=this._fadeInSeconds==0?1:CubismMath.getEasingSine((e-t.getFadeInStartTime())/this._fadeInSeconds),a=this._fadeOutSeconds==0||t.getEndTime()<0?1:CubismMath.getEasingSine((t.getEndTime()-e)/this._fadeOutSeconds);return i=i*s*a,t.setState(e,i),CSM_ASSERT(0<=i&&i<=1),i}setFadeInTime(t){this._fadeInSeconds=t}setFadeOutTime(t){this._fadeOutSeconds=t}getFadeOutTime(){return this._fadeOutSeconds}getFadeInTime(){return this._fadeInSeconds}setWeight(t){this._weight=t}getWeight(){return this._weight}getDuration(){return-1}getLoopDuration(){return-1}setOffsetTime(t){this._offsetSeconds=t}getFiredEvent(t,e){return this._firedEventValues}isExistModelOpacity(){return!1}getModelOpacityIndex(){return-1}getModelOpacityId(t){return null}getModelOpacityValue(){return 1}}var Live2DCubismFramework$j;(r=>{r.ACubismMotion=ACubismMotion})(Live2DCubismFramework$j||(Live2DCubismFramework$j={}));const ExpressionKeyFadeIn="FadeInTime",ExpressionKeyFadeOut="FadeOutTime",ExpressionKeyParameters="Parameters",ExpressionKeyId="Id",ExpressionKeyValue="Value",ExpressionKeyBlend="Blend",BlendValueAdd="Add",BlendValueMultiply="Multiply",BlendValueOverwrite="Overwrite",DefaultFadeTime=1,P=class P extends ACubismMotion{static create(t,e){const i=new P;return i.parse(t,e),i}doUpdateParameters(t,e,i,s){for(let a=0;a<this._parameters.getSize();++a){const o=this._parameters.at(a);switch(o.blendType){case 0:{t.addParameterValueById(o.parameterId,o.value,i);break}case 1:{t.multiplyParameterValueById(o.parameterId,o.value,i);break}case 2:{t.setParameterValueById(o.parameterId,o.value,i);break}}}}calculateExpressionParameters(t,e,i,s,a,o){if(!(i==null||s==null)&&i.isAvailable()){this._fadeWeight=this.updateFadeWeight(i,e);for(let n=0;n<s.getSize();++n){const l=s.at(n);if(l.parameterId==null)continue;const h=l.overwriteValue=t.getParameterValueById(l.parameterId),u=this.getExpressionParameters();let g=-1;for(let _=0;_<u.getSize();++_)if(l.parameterId==u.at(_).parameterId){g=_;break}if(g<0){a==0?(l.additiveValue=P.DefaultAdditiveValue,l.multiplyValue=P.DefaultMultiplyValue,l.overwriteValue=h):(l.additiveValue=this.calculateValue(l.additiveValue,P.DefaultAdditiveValue,o),l.multiplyValue=this.calculateValue(l.multiplyValue,P.DefaultMultiplyValue,o),l.overwriteValue=this.calculateValue(l.overwriteValue,h,o));continue}const d=u.at(g).value;let c,m,p;switch(u.at(g).blendType){case 0:c=d,m=P.DefaultMultiplyValue,p=h;break;case 1:c=P.DefaultAdditiveValue,m=d,p=h;break;case 2:c=P.DefaultAdditiveValue,m=P.DefaultMultiplyValue,p=d;break;default:return}a==0?(l.additiveValue=c,l.multiplyValue=m,l.overwriteValue=p):(l.additiveValue=l.additiveValue*(1-o)+c*o,l.multiplyValue=l.multiplyValue*(1-o)+m*o,l.overwriteValue=l.overwriteValue*(1-o)+p*o)}}}getExpressionParameters(){return this._parameters}getFadeWeight(){return this._fadeWeight}parse(t,e){const i=CubismJson.create(t,e);if(!i)return;const s=i.getRoot();this.setFadeInTime(s.getValueByString(ExpressionKeyFadeIn).toFloat(DefaultFadeTime)),this.setFadeOutTime(s.getValueByString(ExpressionKeyFadeOut).toFloat(DefaultFadeTime));const a=s.getValueByString(ExpressionKeyParameters).getSize();this._parameters.prepareCapacity(a);for(let o=0;o<a;++o){const n=s.getValueByString(ExpressionKeyParameters).getValueByIndex(o),l=CubismFramework.getIdManager().getId(n.getValueByString(ExpressionKeyId).getRawString()),h=n.getValueByString(ExpressionKeyValue).toFloat();let u;n.getValueByString(ExpressionKeyBlend).isNull()||n.getValueByString(ExpressionKeyBlend).getString()==BlendValueAdd?u=0:n.getValueByString(ExpressionKeyBlend).getString()==BlendValueMultiply?u=1:n.getValueByString(ExpressionKeyBlend).getString()==BlendValueOverwrite?u=2:u=0;const g=new ExpressionParameter;g.parameterId=l,g.blendType=u,g.value=h,this._parameters.pushBack(g)}CubismJson.delete(i)}calculateValue(t,e,i){return t*(1-i)+e*i}constructor(){super(),this._parameters=new csmVector,this._fadeWeight=0}};P.DefaultAdditiveValue=0,P.DefaultMultiplyValue=1;let CubismExpressionMotion=P;var ExpressionBlendType=(r=>(r[r.Additive=0]="Additive",r[r.Multiply=1]="Multiply",r[r.Overwrite=2]="Overwrite",r))(ExpressionBlendType||{});class ExpressionParameter{}var Live2DCubismFramework$i;(r=>{r.CubismExpressionMotion=CubismExpressionMotion,r.ExpressionBlendType=ExpressionBlendType,r.ExpressionParameter=ExpressionParameter})(Live2DCubismFramework$i||(Live2DCubismFramework$i={}));class CubismMotionQueueEntry{constructor(){this._autoDelete=!1,this._motion=null,this._available=!0,this._finished=!1,this._started=!1,this._startTimeSeconds=-1,this._fadeInStartTimeSeconds=0,this._endTimeSeconds=-1,this._stateTimeSeconds=0,this._stateWeight=0,this._lastEventCheckSeconds=0,this._motionQueueEntryHandle=this,this._fadeOutSeconds=0,this._isTriggeredFadeOut=!1}release(){this._autoDelete&&this._motion&&ACubismMotion.delete(this._motion)}setFadeOut(t){this._fadeOutSeconds=t,this._isTriggeredFadeOut=!0}startFadeOut(t,e){const i=e+t;this._isTriggeredFadeOut=!0,(this._endTimeSeconds<0||i<this._endTimeSeconds)&&(this._endTimeSeconds=i)}isFinished(){return this._finished}isStarted(){return this._started}getStartTime(){return this._startTimeSeconds}getFadeInStartTime(){return this._fadeInStartTimeSeconds}getEndTime(){return this._endTimeSeconds}setStartTime(t){this._startTimeSeconds=t}setFadeInStartTime(t){this._fadeInStartTimeSeconds=t}setEndTime(t){this._endTimeSeconds=t}setIsFinished(t){this._finished=t}setIsStarted(t){this._started=t}isAvailable(){return this._available}setIsAvailable(t){this._available=t}setState(t,e){this._stateTimeSeconds=t,this._stateWeight=e}getStateTime(){return this._stateTimeSeconds}getStateWeight(){return this._stateWeight}getLastCheckEventSeconds(){return this._lastEventCheckSeconds}setLastCheckEventSeconds(t){this._lastEventCheckSeconds=t}isTriggeredFadeOut(){return this._isTriggeredFadeOut}getFadeOutSeconds(){return this._fadeOutSeconds}getCubismMotion(){return this._motion}}var Live2DCubismFramework$h;(r=>{r.CubismMotionQueueEntry=CubismMotionQueueEntry})(Live2DCubismFramework$h||(Live2DCubismFramework$h={}));class CubismMotionQueueManager{constructor(){this._userTimeSeconds=0,this._eventCallBack=null,this._eventCustomData=null,this._motions=new csmVector}release(){for(let t=0;t<this._motions.getSize();++t)this._motions.at(t)&&(this._motions.at(t).release(),this._motions.set(t,null));this._motions=null}startMotion(t,e,i){if(t==null)return InvalidMotionQueueEntryHandleValue;let s=null;for(let a=0;a<this._motions.getSize();++a)s=this._motions.at(a),s!=null&&s.setFadeOut(s._motion.getFadeOutTime());return s=new CubismMotionQueueEntry,s._autoDelete=e,s._motion=t,this._motions.pushBack(s),s._motionQueueEntryHandle}isFinished(){for(let t=this._motions.begin();t.notEqual(this._motions.end());){let e=t.ptr();if(e==null){t=this._motions.erase(t);continue}if(e._motion==null){e.release(),e=null,t=this._motions.erase(t);continue}if(e.isFinished())t.preIncrement();else return!1}return!0}isFinishedByHandle(t){for(let e=this._motions.begin();e.notEqual(this._motions.end());e.increment()){const i=e.ptr();if(i!=null&&i._motionQueueEntryHandle==t&&!i.isFinished())return!1}return!0}stopAllMotions(){for(let t=this._motions.begin();t.notEqual(this._motions.end());){let e=t.ptr();if(e==null){t=this._motions.erase(t);continue}e.release(),e=null,t=this._motions.erase(t)}}getCubismMotionQueueEntries(){return this._motions}getCubismMotionQueueEntry(t){for(let e=this._motions.begin();e.notEqual(this._motions.end());e.preIncrement()){const i=e.ptr();if(i!=null&&i._motionQueueEntryHandle==t)return i}return null}setEventCallback(t,e=null){this._eventCallBack=t,this._eventCustomData=e}doUpdateMotion(t,e){let i=!1;for(let s=this._motions.begin();s.notEqual(this._motions.end());){let a=s.ptr();if(a==null){s=this._motions.erase(s);continue}const o=a._motion;if(o==null){a.release(),a=null,s=this._motions.erase(s);continue}o.updateParameters(t,a,e),i=!0;const n=o.getFiredEvent(a.getLastCheckEventSeconds()-a.getStartTime(),e-a.getStartTime());for(let l=0;l<n.getSize();++l)this._eventCallBack(this,n.at(l),this._eventCustomData);a.setLastCheckEventSeconds(e),a.isFinished()?(a.release(),a=null,s=this._motions.erase(s)):(a.isTriggeredFadeOut()&&a.startFadeOut(a.getFadeOutSeconds(),e),s.preIncrement())}return i}}const InvalidMotionQueueEntryHandleValue=-1;var Live2DCubismFramework$g;(r=>{r.CubismMotionQueueManager=CubismMotionQueueManager,r.InvalidMotionQueueEntryHandleValue=InvalidMotionQueueEntryHandleValue})(Live2DCubismFramework$g||(Live2DCubismFramework$g={}));class ExpressionParameterValue{}class CubismExpressionMotionManager extends CubismMotionQueueManager{constructor(){super(),this._currentPriority=0,this._reservePriority=0,this._expressionParameterValues=new csmVector,this._fadeWeights=new csmVector}release(){this._expressionParameterValues&&(csmDelete(this._expressionParameterValues),this._expressionParameterValues=null),this._fadeWeights&&(csmDelete(this._fadeWeights),this._fadeWeights=null)}getCurrentPriority(){return this._currentPriority}getReservePriority(){return this._reservePriority}getFadeWeight(t){return this._fadeWeights.at(t)}setReservePriority(t){this._reservePriority=t}startMotionPriority(t,e,i){return i==this.getReservePriority()&&this.setReservePriority(0),this._currentPriority=i,this._fadeWeights.pushBack(0),this.startMotion(t,e)}updateMotion(t,e){this._userTimeSeconds+=e;let i=!1;const s=this.getCubismMotionQueueEntries();let a=0,o=0;for(let n=this._motions.begin();n.notEqual(this._motions.end());){const l=n.ptr();if(l==null){n=s.erase(n);continue}const h=l.getCubismMotion();if(h==null){csmDelete(l),n=s.erase(n);continue}const u=h.getExpressionParameters();if(l.isAvailable())for(let g=0;g<u.getSize();++g){if(u.at(g).parameterId==null)continue;let d=-1;for(let m=0;m<this._expressionParameterValues.getSize();++m)if(this._expressionParameterValues.at(m).parameterId==u.at(g).parameterId){d=m;break}if(d>=0)continue;const c=new ExpressionParameterValue;c.parameterId=u.at(g).parameterId,c.additiveValue=CubismExpressionMotion.DefaultAdditiveValue,c.multiplyValue=CubismExpressionMotion.DefaultMultiplyValue,c.overwriteValue=t.getParameterValueById(c.parameterId),this._expressionParameterValues.pushBack(c)}h.setupMotionQueueEntry(l,this._userTimeSeconds),this._fadeWeights.set(o,h.updateFadeWeight(l,this._userTimeSeconds)),h.calculateExpressionParameters(t,this._userTimeSeconds,l,this._expressionParameterValues,o,this._fadeWeights.at(o)),a+=h.getFadeInTime()==0?1:CubismMath.getEasingSine((this._userTimeSeconds-l.getFadeInStartTime())/h.getFadeInTime()),i=!0,l.isTriggeredFadeOut()&&l.startFadeOut(l.getFadeOutSeconds(),this._userTimeSeconds),n.preIncrement(),++o}if(s.getSize()>1&&(s.at(s.getSize()-1).getCubismMotion(),this._fadeWeights.at(this._fadeWeights.getSize()-1)>=1))for(let l=s.getSize()-2;l>=0;--l){const h=s.at(l);csmDelete(h),s.remove(l),this._fadeWeights.remove(l)}a>1&&(a=1);for(let n=0;n<this._expressionParameterValues.getSize();++n){const l=this._expressionParameterValues.at(n);t.setParameterValueById(l.parameterId,(l.overwriteValue+l.additiveValue)*l.multiplyValue,a),l.additiveValue=CubismExpressionMotion.DefaultAdditiveValue,l.multiplyValue=CubismExpressionMotion.DefaultMultiplyValue}return i}}var Live2DCubismFramework$f;(r=>{r.CubismExpressionMotionManager=CubismExpressionMotionManager})(Live2DCubismFramework$f||(Live2DCubismFramework$f={}));var CubismMotionCurveTarget=(r=>(r[r.CubismMotionCurveTarget_Model=0]="CubismMotionCurveTarget_Model",r[r.CubismMotionCurveTarget_Parameter=1]="CubismMotionCurveTarget_Parameter",r[r.CubismMotionCurveTarget_PartOpacity=2]="CubismMotionCurveTarget_PartOpacity",r))(CubismMotionCurveTarget||{}),CubismMotionSegmentType=(r=>(r[r.CubismMotionSegmentType_Linear=0]="CubismMotionSegmentType_Linear",r[r.CubismMotionSegmentType_Bezier=1]="CubismMotionSegmentType_Bezier",r[r.CubismMotionSegmentType_Stepped=2]="CubismMotionSegmentType_Stepped",r[r.CubismMotionSegmentType_InverseStepped=3]="CubismMotionSegmentType_InverseStepped",r))(CubismMotionSegmentType||{});class CubismMotionPoint{constructor(){this.time=0,this.value=0}}class CubismMotionSegment{constructor(){this.evaluate=null,this.basePointIndex=0,this.segmentType=0}}class CubismMotionCurve{constructor(){this.type=0,this.segmentCount=0,this.baseSegmentIndex=0,this.fadeInTime=0,this.fadeOutTime=0}}class CubismMotionEvent{constructor(){this.fireTime=0}}class CubismMotionData{constructor(){this.duration=0,this.loop=!1,this.curveCount=0,this.eventCount=0,this.fps=0,this.curves=new csmVector,this.segments=new csmVector,this.points=new csmVector,this.events=new csmVector}}var Live2DCubismFramework$e;(r=>{r.CubismMotionCurve=CubismMotionCurve,r.CubismMotionCurveTarget=CubismMotionCurveTarget,r.CubismMotionData=CubismMotionData,r.CubismMotionEvent=CubismMotionEvent,r.CubismMotionPoint=CubismMotionPoint,r.CubismMotionSegment=CubismMotionSegment,r.CubismMotionSegmentType=CubismMotionSegmentType})(Live2DCubismFramework$e||(Live2DCubismFramework$e={}));const Meta$2="Meta",Duration="Duration",Loop="Loop",AreBeziersRestricted="AreBeziersRestricted",CurveCount="CurveCount",Fps$1="Fps",TotalSegmentCount="TotalSegmentCount",TotalPointCount="TotalPointCount",Curves="Curves",Target$1="Target",Id$2="Id",FadeInTime="FadeInTime",FadeOutTime="FadeOutTime",Segments="Segments",UserData$1="UserData",UserDataCount$1="UserDataCount",TotalUserDataSize$1="TotalUserDataSize",Time="Time",Value$1="Value";class CubismMotionJson{constructor(t,e){this._json=CubismJson.create(t,e)}release(){CubismJson.delete(this._json)}getMotionDuration(){return this._json.getRoot().getValueByString(Meta$2).getValueByString(Duration).toFloat()}isMotionLoop(){return this._json.getRoot().getValueByString(Meta$2).getValueByString(Loop).toBoolean()}getEvaluationOptionFlag(t){return t==0?this._json.getRoot().getValueByString(Meta$2).getValueByString(AreBeziersRestricted).toBoolean():!1}getMotionCurveCount(){return this._json.getRoot().getValueByString(Meta$2).getValueByString(CurveCount).toInt()}getMotionFps(){return this._json.getRoot().getValueByString(Meta$2).getValueByString(Fps$1).toFloat()}getMotionTotalSegmentCount(){return this._json.getRoot().getValueByString(Meta$2).getValueByString(TotalSegmentCount).toInt()}getMotionTotalPointCount(){return this._json.getRoot().getValueByString(Meta$2).getValueByString(TotalPointCount).toInt()}isExistMotionFadeInTime(){return!this._json.getRoot().getValueByString(Meta$2).getValueByString(FadeInTime).isNull()}isExistMotionFadeOutTime(){return!this._json.getRoot().getValueByString(Meta$2).getValueByString(FadeOutTime).isNull()}getMotionFadeInTime(){return this._json.getRoot().getValueByString(Meta$2).getValueByString(FadeInTime).toFloat()}getMotionFadeOutTime(){return this._json.getRoot().getValueByString(Meta$2).getValueByString(FadeOutTime).toFloat()}getMotionCurveTarget(t){return this._json.getRoot().getValueByString(Curves).getValueByIndex(t).getValueByString(Target$1).getRawString()}getMotionCurveId(t){return CubismFramework.getIdManager().getId(this._json.getRoot().getValueByString(Curves).getValueByIndex(t).getValueByString(Id$2).getRawString())}isExistMotionCurveFadeInTime(t){return!this._json.getRoot().getValueByString(Curves).getValueByIndex(t).getValueByString(FadeInTime).isNull()}isExistMotionCurveFadeOutTime(t){return!this._json.getRoot().getValueByString(Curves).getValueByIndex(t).getValueByString(FadeOutTime).isNull()}getMotionCurveFadeInTime(t){return this._json.getRoot().getValueByString(Curves).getValueByIndex(t).getValueByString(FadeInTime).toFloat()}getMotionCurveFadeOutTime(t){return this._json.getRoot().getValueByString(Curves).getValueByIndex(t).getValueByString(FadeOutTime).toFloat()}getMotionCurveSegmentCount(t){return this._json.getRoot().getValueByString(Curves).getValueByIndex(t).getValueByString(Segments).getVector().getSize()}getMotionCurveSegment(t,e){return this._json.getRoot().getValueByString(Curves).getValueByIndex(t).getValueByString(Segments).getValueByIndex(e).toFloat()}getEventCount(){return this._json.getRoot().getValueByString(Meta$2).getValueByString(UserDataCount$1).toInt()}getTotalEventValueSize(){return this._json.getRoot().getValueByString(Meta$2).getValueByString(TotalUserDataSize$1).toInt()}getEventTime(t){return this._json.getRoot().getValueByString(UserData$1).getValueByIndex(t).getValueByString(Time).toFloat()}getEventValue(t){return new csmString(this._json.getRoot().getValueByString(UserData$1).getValueByIndex(t).getValueByString(Value$1).getRawString())}}var EvaluationOptionFlag=(r=>(r[r.EvaluationOptionFlag_AreBeziersRistricted=0]="EvaluationOptionFlag_AreBeziersRistricted",r))(EvaluationOptionFlag||{}),Live2DCubismFramework$d;(r=>{r.CubismMotionJson=CubismMotionJson})(Live2DCubismFramework$d||(Live2DCubismFramework$d={}));const EffectNameEyeBlink="EyeBlink",EffectNameLipSync="LipSync",TargetNameModel="Model",TargetNameParameter="Parameter",TargetNamePartOpacity="PartOpacity",IdNameOpacity="Opacity",UseOldBeziersCurveMotion=!1;function lerpPoints(r,t,e){const i=new CubismMotionPoint;return i.time=r.time+(t.time-r.time)*e,i.value=r.value+(t.value-r.value)*e,i}function linearEvaluate(r,t){let e=(t-r[0].time)/(r[1].time-r[0].time);return e<0&&(e=0),r[0].value+(r[1].value-r[0].value)*e}function bezierEvaluate(r,t){let e=(t-r[0].time)/(r[3].time-r[0].time);e<0&&(e=0);const i=lerpPoints(r[0],r[1],e),s=lerpPoints(r[1],r[2],e),a=lerpPoints(r[2],r[3],e),o=lerpPoints(i,s,e),n=lerpPoints(s,a,e);return lerpPoints(o,n,e).value}function bezierEvaluateCardanoInterpretation(r,t){const e=t,i=r[0].time,s=r[3].time,a=r[1].time,o=r[2].time,n=s-3*o+3*a-i,l=3*o-6*a+3*i,h=3*a-3*i,u=i-e,g=CubismMath.cardanoAlgorithmForBezier(n,l,h,u),d=lerpPoints(r[0],r[1],g),c=lerpPoints(r[1],r[2],g),m=lerpPoints(r[2],r[3],g),p=lerpPoints(d,c,g),_=lerpPoints(c,m,g);return lerpPoints(p,_,g).value}function steppedEvaluate(r,t){return r[0].value}function inverseSteppedEvaluate(r,t){return r[1].value}function evaluateCurve(r,t,e){const i=r.curves.at(t);let s=-1;const a=i.baseSegmentIndex+i.segmentCount;let o=0;for(let l=i.baseSegmentIndex;l<a;++l)if(o=r.segments.at(l).basePointIndex+(r.segments.at(l).segmentType==CubismMotionSegmentType.CubismMotionSegmentType_Bezier?3:1),r.points.at(o).time>e){s=l;break}if(s==-1)return r.points.at(o).value;const n=r.segments.at(s);return n.evaluate(r.points.get(n.basePointIndex),e)}class CubismMotion extends ACubismMotion{static create(t,e,i){const s=new CubismMotion;return s.parse(t,e),s._sourceFrameRate=s._motionData.fps,s._loopDurationSeconds=s._motionData.duration,s._onFinishedMotion=i,s}doUpdateParameters(t,e,i,s){this._modelCurveIdEyeBlink==null&&(this._modelCurveIdEyeBlink=CubismFramework.getIdManager().getId(EffectNameEyeBlink)),this._modelCurveIdLipSync==null&&(this._modelCurveIdLipSync=CubismFramework.getIdManager().getId(EffectNameLipSync)),this._modelCurveIdOpacity==null&&(this._modelCurveIdOpacity=CubismFramework.getIdManager().getId(IdNameOpacity));let a=e-s.getStartTime();a<0&&(a=0);let o=Number.MAX_VALUE,n=Number.MAX_VALUE;const l=64;let h=0,u=0;this._eyeBlinkParameterIds.getSize()>l&&CubismLogDebug("too many eye blink targets : {0}",this._eyeBlinkParameterIds.getSize()),this._lipSyncParameterIds.getSize()>l&&CubismLogDebug("too many lip sync targets : {0}",this._lipSyncParameterIds.getSize());const g=this._fadeInSeconds<=0?1:CubismMath.getEasingSine((e-s.getFadeInStartTime())/this._fadeInSeconds),d=this._fadeOutSeconds<=0||s.getEndTime()<0?1:CubismMath.getEasingSine((s.getEndTime()-e)/this._fadeOutSeconds);let c,m,p,_=a;if(this._isLoop)for(;_>this._motionData.duration;)_-=this._motionData.duration;const C=this._motionData.curves;for(m=0;m<this._motionData.curveCount&&C.at(m).type==CubismMotionCurveTarget.CubismMotionCurveTarget_Model;++m)c=evaluateCurve(this._motionData,m,_),C.at(m).id==this._modelCurveIdEyeBlink?n=c:C.at(m).id==this._modelCurveIdLipSync?o=c:C.at(m).id==this._modelCurveIdOpacity&&(this._modelOpacity=c,t.setModelOapcity(this.getModelOpacityValue()));for(;m<this._motionData.curveCount&&C.at(m).type==CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter;++m){if(p=t.getParameterIndex(C.at(m).id),p==-1)continue;const f=t.getParameterValueByIndex(p);if(c=evaluateCurve(this._motionData,m,_),n!=Number.MAX_VALUE){for(let S=0;S<this._eyeBlinkParameterIds.getSize()&&S<l;++S)if(this._eyeBlinkParameterIds.at(S)==C.at(m).id){c*=n,u|=1<<S;break}}if(o!=Number.MAX_VALUE){for(let S=0;S<this._lipSyncParameterIds.getSize()&&S<l;++S)if(this._lipSyncParameterIds.at(S)==C.at(m).id){c+=o,h|=1<<S;break}}let y;if(C.at(m).fadeInTime<0&&C.at(m).fadeOutTime<0)y=f+(c-f)*i;else{let S,x;C.at(m).fadeInTime<0?S=g:S=C.at(m).fadeInTime==0?1:CubismMath.getEasingSine((e-s.getFadeInStartTime())/C.at(m).fadeInTime),C.at(m).fadeOutTime<0?x=d:x=C.at(m).fadeOutTime==0||s.getEndTime()<0?1:CubismMath.getEasingSine((s.getEndTime()-e)/C.at(m).fadeOutTime);const b=this._weight*S*x;y=f+(c-f)*b}t.setParameterValueByIndex(p,y,1)}{if(n!=Number.MAX_VALUE)for(let f=0;f<this._eyeBlinkParameterIds.getSize()&&f<l;++f){const y=t.getParameterValueById(this._eyeBlinkParameterIds.at(f));if(u>>f&1)continue;const S=y+(n-y)*i;t.setParameterValueById(this._eyeBlinkParameterIds.at(f),S)}if(o!=Number.MAX_VALUE)for(let f=0;f<this._lipSyncParameterIds.getSize()&&f<l;++f){const y=t.getParameterValueById(this._lipSyncParameterIds.at(f));if(h>>f&1)continue;const S=y+(o-y)*i;t.setParameterValueById(this._lipSyncParameterIds.at(f),S)}}for(;m<this._motionData.curveCount&&C.at(m).type==CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity;++m)p=t.getParameterIndex(C.at(m).id),p!=-1&&(c=evaluateCurve(this._motionData,m,_),t.setParameterValueByIndex(p,c));a>=this._motionData.duration&&(this._isLoop?(s.setStartTime(e),this._isLoopFadeIn&&s.setFadeInStartTime(e)):(this._onFinishedMotion&&this._onFinishedMotion(this),s.setIsFinished(!0))),this._lastWeight=i}setIsLoop(t){this._isLoop=t}isLoop(){return this._isLoop}setIsLoopFadeIn(t){this._isLoopFadeIn=t}isLoopFadeIn(){return this._isLoopFadeIn}getDuration(){return this._isLoop?-1:this._loopDurationSeconds}getLoopDuration(){return this._loopDurationSeconds}setParameterFadeInTime(t,e){const i=this._motionData.curves;for(let s=0;s<this._motionData.curveCount;++s)if(t==i.at(s).id){i.at(s).fadeInTime=e;return}}setParameterFadeOutTime(t,e){const i=this._motionData.curves;for(let s=0;s<this._motionData.curveCount;++s)if(t==i.at(s).id){i.at(s).fadeOutTime=e;return}}getParameterFadeInTime(t){const e=this._motionData.curves;for(let i=0;i<this._motionData.curveCount;++i)if(t==e.at(i).id)return e.at(i).fadeInTime;return-1}getParameterFadeOutTime(t){const e=this._motionData.curves;for(let i=0;i<this._motionData.curveCount;++i)if(t==e.at(i).id)return e.at(i).fadeOutTime;return-1}setEffectIds(t,e){this._eyeBlinkParameterIds=t,this._lipSyncParameterIds=e}constructor(){super(),this._sourceFrameRate=30,this._loopDurationSeconds=-1,this._isLoop=!1,this._isLoopFadeIn=!0,this._lastWeight=0,this._motionData=null,this._modelCurveIdEyeBlink=null,this._modelCurveIdLipSync=null,this._modelCurveIdOpacity=null,this._eyeBlinkParameterIds=null,this._lipSyncParameterIds=null,this._modelOpacity=1}release(){this._motionData=void 0,this._motionData=null}parse(t,e){this._motionData=new CubismMotionData;let i=new CubismMotionJson(t,e);if(!i){i.release(),i=void 0;return}this._motionData.duration=i.getMotionDuration(),this._motionData.loop=i.isMotionLoop(),this._motionData.curveCount=i.getMotionCurveCount(),this._motionData.fps=i.getMotionFps(),this._motionData.eventCount=i.getEventCount();const s=i.getEvaluationOptionFlag(EvaluationOptionFlag.EvaluationOptionFlag_AreBeziersRistricted);i.isExistMotionFadeInTime()?this._fadeInSeconds=i.getMotionFadeInTime()<0?1:i.getMotionFadeInTime():this._fadeInSeconds=1,i.isExistMotionFadeOutTime()?this._fadeOutSeconds=i.getMotionFadeOutTime()<0?1:i.getMotionFadeOutTime():this._fadeOutSeconds=1,this._motionData.curves.updateSize(this._motionData.curveCount,CubismMotionCurve,!0),this._motionData.segments.updateSize(i.getMotionTotalSegmentCount(),CubismMotionSegment,!0),this._motionData.points.updateSize(i.getMotionTotalPointCount(),CubismMotionPoint,!0),this._motionData.events.updateSize(this._motionData.eventCount,CubismMotionEvent,!0);let a=0,o=0;for(let n=0;n<this._motionData.curveCount;++n){i.getMotionCurveTarget(n)==TargetNameModel?this._motionData.curves.at(n).type=CubismMotionCurveTarget.CubismMotionCurveTarget_Model:i.getMotionCurveTarget(n)==TargetNameParameter?this._motionData.curves.at(n).type=CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter:i.getMotionCurveTarget(n)==TargetNamePartOpacity?this._motionData.curves.at(n).type=CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity:CubismLogWarning('Warning : Unable to get segment type from Curve! The number of "CurveCount" may be incorrect!'),this._motionData.curves.at(n).id=i.getMotionCurveId(n),this._motionData.curves.at(n).baseSegmentIndex=o,this._motionData.curves.at(n).fadeInTime=i.isExistMotionCurveFadeInTime(n)?i.getMotionCurveFadeInTime(n):-1,this._motionData.curves.at(n).fadeOutTime=i.isExistMotionCurveFadeOutTime(n)?i.getMotionCurveFadeOutTime(n):-1;for(let l=0;l<i.getMotionCurveSegmentCount(n);){switch(l==0?(this._motionData.segments.at(o).basePointIndex=a,this._motionData.points.at(a).time=i.getMotionCurveSegment(n,l),this._motionData.points.at(a).value=i.getMotionCurveSegment(n,l+1),a+=1,l+=2):this._motionData.segments.at(o).basePointIndex=a-1,i.getMotionCurveSegment(n,l)){case CubismMotionSegmentType.CubismMotionSegmentType_Linear:{this._motionData.segments.at(o).segmentType=CubismMotionSegmentType.CubismMotionSegmentType_Linear,this._motionData.segments.at(o).evaluate=linearEvaluate,this._motionData.points.at(a).time=i.getMotionCurveSegment(n,l+1),this._motionData.points.at(a).value=i.getMotionCurveSegment(n,l+2),a+=1,l+=3;break}case CubismMotionSegmentType.CubismMotionSegmentType_Bezier:{this._motionData.segments.at(o).segmentType=CubismMotionSegmentType.CubismMotionSegmentType_Bezier,s||UseOldBeziersCurveMotion?this._motionData.segments.at(o).evaluate=bezierEvaluate:this._motionData.segments.at(o).evaluate=bezierEvaluateCardanoInterpretation,this._motionData.points.at(a).time=i.getMotionCurveSegment(n,l+1),this._motionData.points.at(a).value=i.getMotionCurveSegment(n,l+2),this._motionData.points.at(a+1).time=i.getMotionCurveSegment(n,l+3),this._motionData.points.at(a+1).value=i.getMotionCurveSegment(n,l+4),this._motionData.points.at(a+2).time=i.getMotionCurveSegment(n,l+5),this._motionData.points.at(a+2).value=i.getMotionCurveSegment(n,l+6),a+=3,l+=7;break}case CubismMotionSegmentType.CubismMotionSegmentType_Stepped:{this._motionData.segments.at(o).segmentType=CubismMotionSegmentType.CubismMotionSegmentType_Stepped,this._motionData.segments.at(o).evaluate=steppedEvaluate,this._motionData.points.at(a).time=i.getMotionCurveSegment(n,l+1),this._motionData.points.at(a).value=i.getMotionCurveSegment(n,l+2),a+=1,l+=3;break}case CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped:{this._motionData.segments.at(o).segmentType=CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped,this._motionData.segments.at(o).evaluate=inverseSteppedEvaluate,this._motionData.points.at(a).time=i.getMotionCurveSegment(n,l+1),this._motionData.points.at(a).value=i.getMotionCurveSegment(n,l+2),a+=1,l+=3;break}default:{CSM_ASSERT(0);break}}++this._motionData.curves.at(n).segmentCount,++o}}for(let n=0;n<i.getEventCount();++n)this._motionData.events.at(n).fireTime=i.getEventTime(n),this._motionData.events.at(n).value=i.getEventValue(n);i.release(),i=void 0,i=null}getFiredEvent(t,e){this._firedEventValues.updateSize(0);for(let i=0;i<this._motionData.eventCount;++i)this._motionData.events.at(i).fireTime>t&&this._motionData.events.at(i).fireTime<=e&&this._firedEventValues.pushBack(new csmString(this._motionData.events.at(i).value.s));return this._firedEventValues}isExistModelOpacity(){for(let t=0;t<this._motionData.curveCount;t++){const e=this._motionData.curves.at(t);if(e.type==CubismMotionCurveTarget.CubismMotionCurveTarget_Model&&e.id.getString().s.localeCompare(IdNameOpacity)==0)return!0}return!1}getModelOpacityIndex(){if(this.isExistModelOpacity())for(let t=0;t<this._motionData.curveCount;t++){const e=this._motionData.curves.at(t);if(e.type==CubismMotionCurveTarget.CubismMotionCurveTarget_Model&&e.id.getString().s.localeCompare(IdNameOpacity)==0)return t}return-1}getModelOpacityId(t){if(t!=-1){const e=this._motionData.curves.at(t);if(e.type==CubismMotionCurveTarget.CubismMotionCurveTarget_Model&&e.id.getString().s.localeCompare(IdNameOpacity)==0)return CubismFramework.getIdManager().getId(e.id.getString().s)}return null}getModelOpacityValue(){return this._modelOpacity}}var Live2DCubismFramework$c;(r=>{r.CubismMotion=CubismMotion})(Live2DCubismFramework$c||(Live2DCubismFramework$c={}));class CubismMotionManager extends CubismMotionQueueManager{constructor(){super(),this._currentPriority=0,this._reservePriority=0}getCurrentPriority(){return this._currentPriority}getReservePriority(){return this._reservePriority}setReservePriority(t){this._reservePriority=t}startMotionPriority(t,e,i){return i==this._reservePriority&&(this._reservePriority=0),this._currentPriority=i,super.startMotion(t,e)}updateMotion(t,e){this._userTimeSeconds+=e;const i=super.doUpdateMotion(t,this._userTimeSeconds);return this.isFinished()&&(this._currentPriority=0),i}reserveMotion(t){return t<=this._reservePriority||t<=this._currentPriority?!1:(this._reservePriority=t,!0)}}var Live2DCubismFramework$b;(r=>{r.CubismMotionManager=CubismMotionManager})(Live2DCubismFramework$b||(Live2DCubismFramework$b={}));var CubismPhysicsTargetType=(r=>(r[r.CubismPhysicsTargetType_Parameter=0]="CubismPhysicsTargetType_Parameter",r))(CubismPhysicsTargetType||{}),CubismPhysicsSource=(r=>(r[r.CubismPhysicsSource_X=0]="CubismPhysicsSource_X",r[r.CubismPhysicsSource_Y=1]="CubismPhysicsSource_Y",r[r.CubismPhysicsSource_Angle=2]="CubismPhysicsSource_Angle",r))(CubismPhysicsSource||{});class PhysicsJsonEffectiveForces{constructor(){this.gravity=new CubismVector2(0,0),this.wind=new CubismVector2(0,0)}}class CubismPhysicsParameter{}class CubismPhysicsNormalization{}class CubismPhysicsParticle{constructor(){this.initialPosition=new CubismVector2(0,0),this.position=new CubismVector2(0,0),this.lastPosition=new CubismVector2(0,0),this.lastGravity=new CubismVector2(0,0),this.force=new CubismVector2(0,0),this.velocity=new CubismVector2(0,0)}}class CubismPhysicsSubRig{constructor(){this.normalizationPosition=new CubismPhysicsNormalization,this.normalizationAngle=new CubismPhysicsNormalization}}class CubismPhysicsInput{constructor(){this.source=new CubismPhysicsParameter}}class CubismPhysicsOutput{constructor(){this.destination=new CubismPhysicsParameter,this.translationScale=new CubismVector2(0,0)}}class CubismPhysicsRig{constructor(){this.settings=new csmVector,this.inputs=new csmVector,this.outputs=new csmVector,this.particles=new csmVector,this.gravity=new CubismVector2(0,0),this.wind=new CubismVector2(0,0),this.fps=0}}var Live2DCubismFramework$a;(r=>{r.CubismPhysicsInput=CubismPhysicsInput,r.CubismPhysicsNormalization=CubismPhysicsNormalization,r.CubismPhysicsOutput=CubismPhysicsOutput,r.CubismPhysicsParameter=CubismPhysicsParameter,r.CubismPhysicsParticle=CubismPhysicsParticle,r.CubismPhysicsRig=CubismPhysicsRig,r.CubismPhysicsSource=CubismPhysicsSource,r.CubismPhysicsSubRig=CubismPhysicsSubRig,r.CubismPhysicsTargetType=CubismPhysicsTargetType,r.PhysicsJsonEffectiveForces=PhysicsJsonEffectiveForces})(Live2DCubismFramework$a||(Live2DCubismFramework$a={}));const Position="Position",X="X",Y="Y",Angle="Angle",Type="Type",Id$1="Id",Meta$1="Meta",EffectiveForces="EffectiveForces",TotalInputCount="TotalInputCount",TotalOutputCount="TotalOutputCount",PhysicsSettingCount="PhysicsSettingCount",Gravity="Gravity",Wind="Wind",VertexCount="VertexCount",Fps="Fps",PhysicsSettings="PhysicsSettings",Normalization="Normalization",Minimum="Minimum",Maximum="Maximum",Default="Default",Reflect="Reflect",Weight="Weight",Input="Input",Source="Source",Output="Output",Scale="Scale",VertexIndex="VertexIndex",Destination="Destination",Vertices="Vertices",Mobility="Mobility",Delay="Delay",Radius="Radius",Acceleration="Acceleration";class CubismPhysicsJson{constructor(t,e){this._json=CubismJson.create(t,e)}release(){CubismJson.delete(this._json)}getGravity(){const t=new CubismVector2(0,0);return t.x=this._json.getRoot().getValueByString(Meta$1).getValueByString(EffectiveForces).getValueByString(Gravity).getValueByString(X).toFloat(),t.y=this._json.getRoot().getValueByString(Meta$1).getValueByString(EffectiveForces).getValueByString(Gravity).getValueByString(Y).toFloat(),t}getWind(){const t=new CubismVector2(0,0);return t.x=this._json.getRoot().getValueByString(Meta$1).getValueByString(EffectiveForces).getValueByString(Wind).getValueByString(X).toFloat(),t.y=this._json.getRoot().getValueByString(Meta$1).getValueByString(EffectiveForces).getValueByString(Wind).getValueByString(Y).toFloat(),t}getFps(){return this._json.getRoot().getValueByString(Meta$1).getValueByString(Fps).toFloat(0)}getSubRigCount(){return this._json.getRoot().getValueByString(Meta$1).getValueByString(PhysicsSettingCount).toInt()}getTotalInputCount(){return this._json.getRoot().getValueByString(Meta$1).getValueByString(TotalInputCount).toInt()}getTotalOutputCount(){return this._json.getRoot().getValueByString(Meta$1).getValueByString(TotalOutputCount).toInt()}getVertexCount(){return this._json.getRoot().getValueByString(Meta$1).getValueByString(VertexCount).toInt()}getNormalizationPositionMinimumValue(t){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Normalization).getValueByString(Position).getValueByString(Minimum).toFloat()}getNormalizationPositionMaximumValue(t){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Normalization).getValueByString(Position).getValueByString(Maximum).toFloat()}getNormalizationPositionDefaultValue(t){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Normalization).getValueByString(Position).getValueByString(Default).toFloat()}getNormalizationAngleMinimumValue(t){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Normalization).getValueByString(Angle).getValueByString(Minimum).toFloat()}getNormalizationAngleMaximumValue(t){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Normalization).getValueByString(Angle).getValueByString(Maximum).toFloat()}getNormalizationAngleDefaultValue(t){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Normalization).getValueByString(Angle).getValueByString(Default).toFloat()}getInputCount(t){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Input).getVector().getSize()}getInputWeight(t,e){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Input).getValueByIndex(e).getValueByString(Weight).toFloat()}getInputReflect(t,e){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Input).getValueByIndex(e).getValueByString(Reflect).toBoolean()}getInputType(t,e){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Input).getValueByIndex(e).getValueByString(Type).getRawString()}getInputSourceId(t,e){return CubismFramework.getIdManager().getId(this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Input).getValueByIndex(e).getValueByString(Source).getValueByString(Id$1).getRawString())}getOutputCount(t){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Output).getVector().getSize()}getOutputVertexIndex(t,e){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Output).getValueByIndex(e).getValueByString(VertexIndex).toInt()}getOutputAngleScale(t,e){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Output).getValueByIndex(e).getValueByString(Scale).toFloat()}getOutputWeight(t,e){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Output).getValueByIndex(e).getValueByString(Weight).toFloat()}getOutputDestinationId(t,e){return CubismFramework.getIdManager().getId(this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Output).getValueByIndex(e).getValueByString(Destination).getValueByString(Id$1).getRawString())}getOutputType(t,e){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Output).getValueByIndex(e).getValueByString(Type).getRawString()}getOutputReflect(t,e){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Output).getValueByIndex(e).getValueByString(Reflect).toBoolean()}getParticleCount(t){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Vertices).getVector().getSize()}getParticleMobility(t,e){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Vertices).getValueByIndex(e).getValueByString(Mobility).toFloat()}getParticleDelay(t,e){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Vertices).getValueByIndex(e).getValueByString(Delay).toFloat()}getParticleAcceleration(t,e){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Vertices).getValueByIndex(e).getValueByString(Acceleration).toFloat()}getParticleRadius(t,e){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Vertices).getValueByIndex(e).getValueByString(Radius).toFloat()}getParticlePosition(t,e){const i=new CubismVector2(0,0);return i.x=this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Vertices).getValueByIndex(e).getValueByString(Position).getValueByString(X).toFloat(),i.y=this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Vertices).getValueByIndex(e).getValueByString(Position).getValueByString(Y).toFloat(),i}}var Live2DCubismFramework$9;(r=>{r.CubismPhysicsJson=CubismPhysicsJson})(Live2DCubismFramework$9||(Live2DCubismFramework$9={}));const PhysicsTypeTagX="X",PhysicsTypeTagY="Y",PhysicsTypeTagAngle="Angle",AirResistance=5,MaximumWeight=100,MovementThreshold=.001,MaxDeltaTime=5;class CubismPhysics{static create(t,e){const i=new CubismPhysics;return i.parse(t,e),i._physicsRig.gravity.y=0,i}static delete(t){t!=null&&(t.release(),t=null)}parse(t,e){this._physicsRig=new CubismPhysicsRig;let i=new CubismPhysicsJson(t,e);this._physicsRig.gravity=i.getGravity(),this._physicsRig.wind=i.getWind(),this._physicsRig.subRigCount=i.getSubRigCount(),this._physicsRig.fps=i.getFps(),this._physicsRig.settings.updateSize(this._physicsRig.subRigCount,CubismPhysicsSubRig,!0),this._physicsRig.inputs.updateSize(i.getTotalInputCount(),CubismPhysicsInput,!0),this._physicsRig.outputs.updateSize(i.getTotalOutputCount(),CubismPhysicsOutput,!0),this._physicsRig.particles.updateSize(i.getVertexCount(),CubismPhysicsParticle,!0),this._currentRigOutputs.clear(),this._previousRigOutputs.clear();let s=0,a=0,o=0;for(let n=0;n<this._physicsRig.settings.getSize();++n){this._physicsRig.settings.at(n).normalizationPosition.minimum=i.getNormalizationPositionMinimumValue(n),this._physicsRig.settings.at(n).normalizationPosition.maximum=i.getNormalizationPositionMaximumValue(n),this._physicsRig.settings.at(n).normalizationPosition.defalut=i.getNormalizationPositionDefaultValue(n),this._physicsRig.settings.at(n).normalizationAngle.minimum=i.getNormalizationAngleMinimumValue(n),this._physicsRig.settings.at(n).normalizationAngle.maximum=i.getNormalizationAngleMaximumValue(n),this._physicsRig.settings.at(n).normalizationAngle.defalut=i.getNormalizationAngleDefaultValue(n),this._physicsRig.settings.at(n).inputCount=i.getInputCount(n),this._physicsRig.settings.at(n).baseInputIndex=s;for(let u=0;u<this._physicsRig.settings.at(n).inputCount;++u)this._physicsRig.inputs.at(s+u).sourceParameterIndex=-1,this._physicsRig.inputs.at(s+u).weight=i.getInputWeight(n,u),this._physicsRig.inputs.at(s+u).reflect=i.getInputReflect(n,u),i.getInputType(n,u)==PhysicsTypeTagX?(this._physicsRig.inputs.at(s+u).type=CubismPhysicsSource.CubismPhysicsSource_X,this._physicsRig.inputs.at(s+u).getNormalizedParameterValue=getInputTranslationXFromNormalizedParameterValue):i.getInputType(n,u)==PhysicsTypeTagY?(this._physicsRig.inputs.at(s+u).type=CubismPhysicsSource.CubismPhysicsSource_Y,this._physicsRig.inputs.at(s+u).getNormalizedParameterValue=getInputTranslationYFromNormalizedParamterValue):i.getInputType(n,u)==PhysicsTypeTagAngle&&(this._physicsRig.inputs.at(s+u).type=CubismPhysicsSource.CubismPhysicsSource_Angle,this._physicsRig.inputs.at(s+u).getNormalizedParameterValue=getInputAngleFromNormalizedParameterValue),this._physicsRig.inputs.at(s+u).source.targetType=CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter,this._physicsRig.inputs.at(s+u).source.id=i.getInputSourceId(n,u);s+=this._physicsRig.settings.at(n).inputCount,this._physicsRig.settings.at(n).outputCount=i.getOutputCount(n),this._physicsRig.settings.at(n).baseOutputIndex=a;const l=new PhysicsOutput;l.outputs.resize(this._physicsRig.settings.at(n).outputCount);const h=new PhysicsOutput;h.outputs.resize(this._physicsRig.settings.at(n).outputCount);for(let u=0;u<this._physicsRig.settings.at(n).outputCount;++u)l.outputs.set(u,0),h.outputs.set(u,0),this._physicsRig.outputs.at(a+u).destinationParameterIndex=-1,this._physicsRig.outputs.at(a+u).vertexIndex=i.getOutputVertexIndex(n,u),this._physicsRig.outputs.at(a+u).angleScale=i.getOutputAngleScale(n,u),this._physicsRig.outputs.at(a+u).weight=i.getOutputWeight(n,u),this._physicsRig.outputs.at(a+u).destination.targetType=CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter,this._physicsRig.outputs.at(a+u).destination.id=i.getOutputDestinationId(n,u),i.getOutputType(n,u)==PhysicsTypeTagX?(this._physicsRig.outputs.at(a+u).type=CubismPhysicsSource.CubismPhysicsSource_X,this._physicsRig.outputs.at(a+u).getValue=getOutputTranslationX,this._physicsRig.outputs.at(a+u).getScale=getOutputScaleTranslationX):i.getOutputType(n,u)==PhysicsTypeTagY?(this._physicsRig.outputs.at(a+u).type=CubismPhysicsSource.CubismPhysicsSource_Y,this._physicsRig.outputs.at(a+u).getValue=getOutputTranslationY,this._physicsRig.outputs.at(a+u).getScale=getOutputScaleTranslationY):i.getOutputType(n,u)==PhysicsTypeTagAngle&&(this._physicsRig.outputs.at(a+u).type=CubismPhysicsSource.CubismPhysicsSource_Angle,this._physicsRig.outputs.at(a+u).getValue=getOutputAngle,this._physicsRig.outputs.at(a+u).getScale=getOutputScaleAngle),this._physicsRig.outputs.at(a+u).reflect=i.getOutputReflect(n,u);this._currentRigOutputs.pushBack(l),this._previousRigOutputs.pushBack(h),a+=this._physicsRig.settings.at(n).outputCount,this._physicsRig.settings.at(n).particleCount=i.getParticleCount(n),this._physicsRig.settings.at(n).baseParticleIndex=o;for(let u=0;u<this._physicsRig.settings.at(n).particleCount;++u)this._physicsRig.particles.at(o+u).mobility=i.getParticleMobility(n,u),this._physicsRig.particles.at(o+u).delay=i.getParticleDelay(n,u),this._physicsRig.particles.at(o+u).acceleration=i.getParticleAcceleration(n,u),this._physicsRig.particles.at(o+u).radius=i.getParticleRadius(n,u),this._physicsRig.particles.at(o+u).position=i.getParticlePosition(n,u);o+=this._physicsRig.settings.at(n).particleCount}this.initialize(),i.release(),i=void 0,i=null}stabilization(t){var p,_;let e,i,s,a;const o=new CubismVector2;let n,l,h,u;const g=t.getModel().parameters.values,d=t.getModel().parameters.maximumValues,c=t.getModel().parameters.minimumValues,m=t.getModel().parameters.defaultValues;(((p=this._parameterCaches)==null?void 0:p.length)??0)<t.getParameterCount()&&(this._parameterCaches=new Float32Array(t.getParameterCount())),(((_=this._parameterInputCaches)==null?void 0:_.length)??0)<t.getParameterCount()&&(this._parameterInputCaches=new Float32Array(t.getParameterCount()));for(let C=0;C<t.getParameterCount();++C)this._parameterCaches[C]=g[C],this._parameterInputCaches[C]=g[C];for(let C=0;C<this._physicsRig.subRigCount;++C){e={angle:0},o.x=0,o.y=0,n=this._physicsRig.settings.at(C),l=this._physicsRig.inputs.get(n.baseInputIndex),h=this._physicsRig.outputs.get(n.baseOutputIndex),u=this._physicsRig.particles.get(n.baseParticleIndex);for(let f=0;f<n.inputCount;++f)i=l[f].weight/MaximumWeight,l[f].sourceParameterIndex==-1&&(l[f].sourceParameterIndex=t.getParameterIndex(l[f].source.id)),l[f].getNormalizedParameterValue(o,e,g[l[f].sourceParameterIndex],c[l[f].sourceParameterIndex],d[l[f].sourceParameterIndex],m[l[f].sourceParameterIndex],n.normalizationPosition,n.normalizationAngle,l[f].reflect,i),this._parameterCaches[l[f].sourceParameterIndex]=g[l[f].sourceParameterIndex];s=CubismMath.degreesToRadian(-e.angle),o.x=o.x*CubismMath.cos(s)-o.y*CubismMath.sin(s),o.y=o.x*CubismMath.sin(s)+o.y*CubismMath.cos(s),updateParticlesForStabilization(u,n.particleCount,o,e.angle,this._options.wind,MovementThreshold*n.normalizationPosition.maximum);for(let f=0;f<n.outputCount;++f){const y=h[f].vertexIndex;if(h[f].destinationParameterIndex==-1&&(h[f].destinationParameterIndex=t.getParameterIndex(h[f].destination.id)),y<1||y>=n.particleCount)continue;let S=new CubismVector2;S=u[y].position.substract(u[y-1].position),a=h[f].getValue(S,u,y,h[f].reflect,this._options.gravity),this._currentRigOutputs.at(C).outputs.set(f,a),this._previousRigOutputs.at(C).outputs.set(f,a);const x=h[f].destinationParameterIndex,b=!Float32Array.prototype.slice&&"subarray"in Float32Array.prototype?JSON.parse(JSON.stringify(g.subarray(x))):g.slice(x);updateOutputParameterValue(b,c[x],d[x],a,h[f]);for(let M=x,B=0;M<this._parameterCaches.length;M++,B++)g[M]=this._parameterCaches[M]=b[B]}}}evaluate(t,e){var f,y;let i,s,a,o;const n=new CubismVector2;let l,h,u,g;if(0>=e)return;const d=t.getModel().parameters.values,c=t.getModel().parameters.maximumValues,m=t.getModel().parameters.minimumValues,p=t.getModel().parameters.defaultValues;let _;if(this._currentRemainTime+=e,this._currentRemainTime>MaxDeltaTime&&(this._currentRemainTime=0),(((f=this._parameterCaches)==null?void 0:f.length)??0)<t.getParameterCount()&&(this._parameterCaches=new Float32Array(t.getParameterCount())),(((y=this._parameterInputCaches)==null?void 0:y.length)??0)<t.getParameterCount()){this._parameterInputCaches=new Float32Array(t.getParameterCount());for(let S=0;S<t.getParameterCount();++S)this._parameterInputCaches[S]=d[S]}for(this._physicsRig.fps>0?_=1/this._physicsRig.fps:_=e;this._currentRemainTime>=_;){for(let x=0;x<this._physicsRig.subRigCount;++x){l=this._physicsRig.settings.at(x),u=this._physicsRig.outputs.get(l.baseOutputIndex);for(let b=0;b<l.outputCount;++b)this._previousRigOutputs.at(x).outputs.set(b,this._currentRigOutputs.at(x).outputs.at(b))}const S=_/this._currentRemainTime;for(let x=0;x<t.getParameterCount();++x)this._parameterCaches[x]=this._parameterInputCaches[x]*(1-S)+d[x]*S,this._parameterInputCaches[x]=this._parameterCaches[x];for(let x=0;x<this._physicsRig.subRigCount;++x){i={angle:0},n.x=0,n.y=0,l=this._physicsRig.settings.at(x),h=this._physicsRig.inputs.get(l.baseInputIndex),u=this._physicsRig.outputs.get(l.baseOutputIndex),g=this._physicsRig.particles.get(l.baseParticleIndex);for(let b=0;b<l.inputCount;++b)s=h[b].weight/MaximumWeight,h[b].sourceParameterIndex==-1&&(h[b].sourceParameterIndex=t.getParameterIndex(h[b].source.id)),h[b].getNormalizedParameterValue(n,i,this._parameterCaches[h[b].sourceParameterIndex],m[h[b].sourceParameterIndex],c[h[b].sourceParameterIndex],p[h[b].sourceParameterIndex],l.normalizationPosition,l.normalizationAngle,h[b].reflect,s);a=CubismMath.degreesToRadian(-i.angle),n.x=n.x*CubismMath.cos(a)-n.y*CubismMath.sin(a),n.y=n.x*CubismMath.sin(a)+n.y*CubismMath.cos(a),updateParticles(g,l.particleCount,n,i.angle,this._options.wind,MovementThreshold*l.normalizationPosition.maximum,_,AirResistance);for(let b=0;b<l.outputCount;++b){const M=u[b].vertexIndex;if(u[b].destinationParameterIndex==-1&&(u[b].destinationParameterIndex=t.getParameterIndex(u[b].destination.id)),M<1||M>=l.particleCount)continue;const B=new CubismVector2;B.x=g[M].position.x-g[M-1].position.x,B.y=g[M].position.y-g[M-1].position.y,o=u[b].getValue(B,g,M,u[b].reflect,this._options.gravity),this._currentRigOutputs.at(x).outputs.set(b,o);const I=u[b].destinationParameterIndex,w=!Float32Array.prototype.slice&&"subarray"in Float32Array.prototype?JSON.parse(JSON.stringify(this._parameterCaches.subarray(I))):this._parameterCaches.slice(I);updateOutputParameterValue(w,m[I],c[I],o,u[b]);for(let V=I,L=0;V<this._parameterCaches.length;V++,L++)this._parameterCaches[V]=w[L]}}this._currentRemainTime-=_}const C=this._currentRemainTime/_;this.interpolate(t,C)}interpolate(t,e){let i,s;const a=t.getModel().parameters.values,o=t.getModel().parameters.maximumValues,n=t.getModel().parameters.minimumValues;for(let l=0;l<this._physicsRig.subRigCount;++l){s=this._physicsRig.settings.at(l),i=this._physicsRig.outputs.get(s.baseOutputIndex);for(let h=0;h<s.outputCount;++h){if(i[h].destinationParameterIndex==-1)continue;const u=i[h].destinationParameterIndex,g=!Float32Array.prototype.slice&&"subarray"in Float32Array.prototype?JSON.parse(JSON.stringify(a.subarray(u))):a.slice(u);updateOutputParameterValue(g,n[u],o[u],this._previousRigOutputs.at(l).outputs.at(h)*(1-e)+this._currentRigOutputs.at(l).outputs.at(h)*e,i[h]);for(let d=u,c=0;d<a.length;d++,c++)a[d]=g[c]}}}setOptions(t){this._options=t}getOption(){return this._options}constructor(){this._physicsRig=null,this._options=new Options,this._options.gravity.y=-1,this._options.gravity.x=0,this._options.wind.x=0,this._options.wind.y=0,this._currentRigOutputs=new csmVector,this._previousRigOutputs=new csmVector,this._currentRemainTime=0,this._parameterCaches=null,this._parameterInputCaches=null}release(){this._physicsRig=void 0,this._physicsRig=null}initialize(){let t,e,i;for(let s=0;s<this._physicsRig.subRigCount;++s){e=this._physicsRig.settings.at(s),t=this._physicsRig.particles.get(e.baseParticleIndex),t[0].initialPosition=new CubismVector2(0,0),t[0].lastPosition=new CubismVector2(t[0].initialPosition.x,t[0].initialPosition.y),t[0].lastGravity=new CubismVector2(0,-1),t[0].lastGravity.y*=-1,t[0].velocity=new CubismVector2(0,0),t[0].force=new CubismVector2(0,0);for(let a=1;a<e.particleCount;++a)i=new CubismVector2(0,0),i.y=t[a].radius,t[a].initialPosition=new CubismVector2(t[a-1].initialPosition.x+i.x,t[a-1].initialPosition.y+i.y),t[a].position=new CubismVector2(t[a].initialPosition.x,t[a].initialPosition.y),t[a].lastPosition=new CubismVector2(t[a].initialPosition.x,t[a].initialPosition.y),t[a].lastGravity=new CubismVector2(0,-1),t[a].lastGravity.y*=-1,t[a].velocity=new CubismVector2(0,0),t[a].force=new CubismVector2(0,0)}}}class Options{constructor(){this.gravity=new CubismVector2(0,0),this.wind=new CubismVector2(0,0)}}class PhysicsOutput{constructor(){this.outputs=new csmVector(0)}}function sign(r){let t=0;return r>0?t=1:r<0&&(t=-1),t}function getInputTranslationXFromNormalizedParameterValue(r,t,e,i,s,a,o,n,l,h){r.x+=normalizeParameterValue(e,i,s,a,o.minimum,o.maximum,o.defalut,l)*h}function getInputTranslationYFromNormalizedParamterValue(r,t,e,i,s,a,o,n,l,h){r.y+=normalizeParameterValue(e,i,s,a,o.minimum,o.maximum,o.defalut,l)*h}function getInputAngleFromNormalizedParameterValue(r,t,e,i,s,a,o,n,l,h){t.angle+=normalizeParameterValue(e,i,s,a,n.minimum,n.maximum,n.defalut,l)*h}function getOutputTranslationX(r,t,e,i,s){let a=r.x;return i&&(a*=-1),a}function getOutputTranslationY(r,t,e,i,s){let a=r.y;return i&&(a*=-1),a}function getOutputAngle(r,t,e,i,s){let a;return e>=2?s=t[e-1].position.substract(t[e-2].position):s=s.multiplyByScaler(-1),a=CubismMath.directionToRadian(s,r),i&&(a*=-1),a}function getRangeValue(r,t){const e=CubismMath.max(r,t),i=CubismMath.min(r,t);return CubismMath.abs(e-i)}function getDefaultValue(r,t){return CubismMath.min(r,t)+getRangeValue(r,t)/2}function getOutputScaleTranslationX(r,t){return JSON.parse(JSON.stringify(r.x))}function getOutputScaleTranslationY(r,t){return JSON.parse(JSON.stringify(r.y))}function getOutputScaleAngle(r,t){return JSON.parse(JSON.stringify(t))}function updateParticles(r,t,e,i,s,a,o,n){let l,h,u=new CubismVector2(0,0),g=new CubismVector2(0,0),d=new CubismVector2(0,0),c=new CubismVector2(0,0);r[0].position=new CubismVector2(e.x,e.y);const m=CubismMath.degreesToRadian(i),p=CubismMath.radianToDirection(m);p.normalize();for(let _=1;_<t;++_)r[_].force=p.multiplyByScaler(r[_].acceleration).add(s),r[_].lastPosition=new CubismVector2(r[_].position.x,r[_].position.y),l=r[_].delay*o*30,u=r[_].position.substract(r[_-1].position),h=CubismMath.directionToRadian(r[_].lastGravity,p)/n,u.x=CubismMath.cos(h)*u.x-u.y*CubismMath.sin(h),u.y=CubismMath.sin(h)*u.x+u.y*CubismMath.cos(h),r[_].position=r[_-1].position.add(u),g=r[_].velocity.multiplyByScaler(l),d=r[_].force.multiplyByScaler(l).multiplyByScaler(l),r[_].position=r[_].position.add(g).add(d),c=r[_].position.substract(r[_-1].position),c.normalize(),r[_].position=r[_-1].position.add(c.multiplyByScaler(r[_].radius)),CubismMath.abs(r[_].position.x)<a&&(r[_].position.x=0),l!=0&&(r[_].velocity=r[_].position.substract(r[_].lastPosition),r[_].velocity=r[_].velocity.divisionByScalar(l),r[_].velocity=r[_].velocity.multiplyByScaler(r[_].mobility)),r[_].force=new CubismVector2(0,0),r[_].lastGravity=new CubismVector2(p.x,p.y)}function updateParticlesForStabilization(r,t,e,i,s,a){let o=new CubismVector2(0,0);r[0].position=new CubismVector2(e.x,e.y);const n=CubismMath.degreesToRadian(i),l=CubismMath.radianToDirection(n);l.normalize();for(let h=1;h<t;++h)r[h].force=l.multiplyByScaler(r[h].acceleration).add(s),r[h].lastPosition=new CubismVector2(r[h].position.x,r[h].position.y),r[h].velocity=new CubismVector2(0,0),o=r[h].force,o.normalize(),o=o.multiplyByScaler(r[h].radius),r[h].position=r[h-1].position.add(o),CubismMath.abs(r[h].position.x)<a&&(r[h].position.x=0),r[h].force=new CubismVector2(0,0),r[h].lastGravity=new CubismVector2(l.x,l.y)}function updateOutputParameterValue(r,t,e,i,s){let a;const o=s.getScale(s.translationScale,s.angleScale);a=i*o,a<t?(a<s.valueBelowMinimum&&(s.valueBelowMinimum=a),a=t):a>e&&(a>s.valueExceededMaximum&&(s.valueExceededMaximum=a),a=e);const n=s.weight/MaximumWeight;n>=1||(a=r[0]*(1-n)+a*n),r[0]=a}function normalizeParameterValue(r,t,e,i,s,a,o,n){let l=0;const h=CubismMath.max(e,t);h<r&&(r=h);const u=CubismMath.min(e,t);u>r&&(r=u);const g=CubismMath.min(s,a),d=CubismMath.max(s,a),c=o,m=getDefaultValue(u,h),p=r-m;switch(sign(p)){case 1:{const _=d-c,C=h-m;C!=0&&(l=p*(_/C),l+=c);break}case-1:{const _=g-c,C=u-m;C!=0&&(l=p*(_/C),l+=c);break}case 0:{l=c;break}}return n?l:l*-1}var Live2DCubismFramework$8;(r=>{r.CubismPhysics=CubismPhysics,r.Options=Options})(Live2DCubismFramework$8||(Live2DCubismFramework$8={}));const ColorChannelCount=4,ClippingMaskMaxCountOnDefault=36,ClippingMaskMaxCountOnMultiRenderTexture=32;class CubismClippingManager{constructor(t){this._renderTextureCount=0,this._clippingMaskBufferSize=256,this._clippingContextListForMask=new csmVector,this._clippingContextListForDraw=new csmVector,this._channelColors=new csmVector,this._tmpBoundsOnModel=new csmRect,this._tmpMatrix=new CubismMatrix44,this._tmpMatrixForMask=new CubismMatrix44,this._tmpMatrixForDraw=new CubismMatrix44,this._clippingContexttConstructor=t;let e=new CubismTextureColor;e.r=1,e.g=0,e.b=0,e.a=0,this._channelColors.pushBack(e),e=new CubismTextureColor,e.r=0,e.g=1,e.b=0,e.a=0,this._channelColors.pushBack(e),e=new CubismTextureColor,e.r=0,e.g=0,e.b=1,e.a=0,this._channelColors.pushBack(e),e=new CubismTextureColor,e.r=0,e.g=0,e.b=0,e.a=1,this._channelColors.pushBack(e)}release(){for(let t=0;t<this._clippingContextListForMask.getSize();t++)this._clippingContextListForMask.at(t)&&(this._clippingContextListForMask.at(t).release(),this._clippingContextListForMask.set(t,void 0)),this._clippingContextListForMask.set(t,null);this._clippingContextListForMask=null;for(let t=0;t<this._clippingContextListForDraw.getSize();t++)this._clippingContextListForDraw.set(t,null);this._clippingContextListForDraw=null;for(let t=0;t<this._channelColors.getSize();t++)this._channelColors.set(t,null);this._channelColors=null,this._clearedFrameBufferFlags!=null&&this._clearedFrameBufferFlags.clear(),this._clearedFrameBufferFlags=null}initialize(t,e){e%1!=0&&(CubismLogWarning("The number of render textures must be specified as an integer. The decimal point is rounded down and corrected to an integer."),e=~~e),e<1&&CubismLogWarning("The number of render textures must be an integer greater than or equal to 1. Set the number of render textures to 1."),this._renderTextureCount=e<1?1:e,this._clearedFrameBufferFlags=new csmVector(this._renderTextureCount);for(let i=0;i<t.getDrawableCount();i++){if(t.getDrawableMaskCounts()[i]<=0){this._clippingContextListForDraw.pushBack(null);continue}let s=this.findSameClip(t.getDrawableMasks()[i],t.getDrawableMaskCounts()[i]);s==null&&(s=new this._clippingContexttConstructor(this,t.getDrawableMasks()[i],t.getDrawableMaskCounts()[i]),this._clippingContextListForMask.pushBack(s)),s.addClippedDrawable(i),this._clippingContextListForDraw.pushBack(s)}}findSameClip(t,e){for(let i=0;i<this._clippingContextListForMask.getSize();i++){const s=this._clippingContextListForMask.at(i),a=s._clippingIdCount;if(a!=e)continue;let o=0;for(let n=0;n<a;n++){const l=s._clippingIdList[n];for(let h=0;h<a;h++)if(t[h]==l){o++;break}}if(o==a)return s}return null}setupMatrixForHighPrecision(t,e){let i=0;for(let s=0;s<this._clippingContextListForMask.getSize();s++){const a=this._clippingContextListForMask.at(s);this.calcClippedDrawTotalBounds(t,a),a._isUsing&&i++}if(i>0){if(this.setupLayoutBounds(0),this._clearedFrameBufferFlags.getSize()!=this._renderTextureCount){this._clearedFrameBufferFlags.clear();for(let s=0;s<this._renderTextureCount;s++)this._clearedFrameBufferFlags.pushBack(!1)}else for(let s=0;s<this._renderTextureCount;s++)this._clearedFrameBufferFlags.set(s,!1);for(let s=0;s<this._clippingContextListForMask.getSize();s++){const a=this._clippingContextListForMask.at(s),o=a._allClippedDrawRect,n=a._layoutBounds,l=.05;let h=0,u=0;const g=t.getPixelsPerUnit(),d=a.getClippingManager().getClippingMaskBufferSize(),c=n.width*d,m=n.height*d;this._tmpBoundsOnModel.setRect(o),this._tmpBoundsOnModel.width*g>c?(this._tmpBoundsOnModel.expand(o.width*l,0),h=n.width/this._tmpBoundsOnModel.width):h=g/c,this._tmpBoundsOnModel.height*g>m?(this._tmpBoundsOnModel.expand(0,o.height*l),u=n.height/this._tmpBoundsOnModel.height):u=g/m,this.createMatrixForMask(e,n,h,u),a._matrixForMask.setMatrix(this._tmpMatrixForMask.getArray()),a._matrixForDraw.setMatrix(this._tmpMatrixForDraw.getArray())}}}createMatrixForMask(t,e,i,s){this._tmpMatrix.loadIdentity(),this._tmpMatrix.translateRelative(-1,-1),this._tmpMatrix.scaleRelative(2,2),this._tmpMatrix.translateRelative(e.x,e.y),this._tmpMatrix.scaleRelative(i,s),this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x,-this._tmpBoundsOnModel.y),this._tmpMatrixForMask.setMatrix(this._tmpMatrix.getArray()),this._tmpMatrix.loadIdentity(),this._tmpMatrix.translateRelative(e.x,e.y*(t?-1:1)),this._tmpMatrix.scaleRelative(i,s*(t?-1:1)),this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x,-this._tmpBoundsOnModel.y),this._tmpMatrixForDraw.setMatrix(this._tmpMatrix.getArray())}setupLayoutBounds(t){const e=this._renderTextureCount<=1?ClippingMaskMaxCountOnDefault:ClippingMaskMaxCountOnMultiRenderTexture*this._renderTextureCount;if(t<=0||t>e){t>e&&CubismLogError(`not supported mask count : {0}
[Details] render texture count : {1}, mask count : {2}`,t-e,this._renderTextureCount,t);for(let h=0;h<this._clippingContextListForMask.getSize();h++){const u=this._clippingContextListForMask.at(h);u._layoutChannelIndex=0,u._layoutBounds.x=0,u._layoutBounds.y=0,u._layoutBounds.width=1,u._layoutBounds.height=1,u._bufferIndex=0}return}const i=this._renderTextureCount<=1?9:8;let s=t/this._renderTextureCount;const a=t%this._renderTextureCount;s=Math.ceil(s);let o=s/ColorChannelCount;const n=s%ColorChannelCount;o=~~o;let l=0;for(let h=0;h<this._renderTextureCount;h++)for(let u=0;u<ColorChannelCount;u++){let g=o+(u<n?1:0);const d=n+(o<1?-1:0);if(u==d&&a>0&&(g-=h<a?0:1),g!=0)if(g==1){const c=this._clippingContextListForMask.at(l++);c._layoutChannelIndex=u,c._layoutBounds.x=0,c._layoutBounds.y=0,c._layoutBounds.width=1,c._layoutBounds.height=1,c._bufferIndex=h}else if(g==2)for(let c=0;c<g;c++){let m=c%2;m=~~m;const p=this._clippingContextListForMask.at(l++);p._layoutChannelIndex=u,p._layoutBounds.x=m*.5,p._layoutBounds.y=0,p._layoutBounds.width=.5,p._layoutBounds.height=1,p._bufferIndex=h}else if(g<=4)for(let c=0;c<g;c++){let m=c%2,p=c/2;m=~~m,p=~~p;const _=this._clippingContextListForMask.at(l++);_._layoutChannelIndex=u,_._layoutBounds.x=m*.5,_._layoutBounds.y=p*.5,_._layoutBounds.width=.5,_._layoutBounds.height=.5,_._bufferIndex=h}else if(g<=i)for(let c=0;c<g;c++){let m=c%3,p=c/3;m=~~m,p=~~p;const _=this._clippingContextListForMask.at(l++);_._layoutChannelIndex=u,_._layoutBounds.x=m/3,_._layoutBounds.y=p/3,_._layoutBounds.width=1/3,_._layoutBounds.height=1/3,_._bufferIndex=h}else{CubismLogError(`not supported mask count : {0}
[Details] render texture count : {1}, mask count : {2}`,t-e,this._renderTextureCount,t);for(let c=0;c<g;c++){const m=this._clippingContextListForMask.at(l++);m._layoutChannelIndex=0,m._layoutBounds.x=0,m._layoutBounds.y=0,m._layoutBounds.width=1,m._layoutBounds.height=1,m._bufferIndex=0}}}}calcClippedDrawTotalBounds(t,e){let i=Number.MAX_VALUE,s=Number.MAX_VALUE,a=Number.MIN_VALUE,o=Number.MIN_VALUE;const n=e._clippedDrawableIndexList.length;for(let l=0;l<n;l++){const h=e._clippedDrawableIndexList[l],u=t.getDrawableVertexCount(h),g=t.getDrawableVertices(h);let d=Number.MAX_VALUE,c=Number.MAX_VALUE,m=-Number.MAX_VALUE,p=-Number.MAX_VALUE;const _=u*Constant.vertexStep;for(let C=Constant.vertexOffset;C<_;C+=Constant.vertexStep){const f=g[C],y=g[C+1];f<d&&(d=f),f>m&&(m=f),y<c&&(c=y),y>p&&(p=y)}if(d!=Number.MAX_VALUE)if(d<i&&(i=d),c<s&&(s=c),m>a&&(a=m),p>o&&(o=p),i==Number.MAX_VALUE)e._allClippedDrawRect.x=0,e._allClippedDrawRect.y=0,e._allClippedDrawRect.width=0,e._allClippedDrawRect.height=0,e._isUsing=!1;else{e._isUsing=!0;const C=a-i,f=o-s;e._allClippedDrawRect.x=i,e._allClippedDrawRect.y=s,e._allClippedDrawRect.width=C,e._allClippedDrawRect.height=f}}}getClippingContextListForDraw(){return this._clippingContextListForDraw}getClippingMaskBufferSize(){return this._clippingMaskBufferSize}getRenderTextureCount(){return this._renderTextureCount}getChannelFlagAsColor(t){return this._channelColors.at(t)}setClippingMaskBufferSize(t){this._clippingMaskBufferSize=t}}let s_instance$3;const ShaderCount=10;class CubismShader_WebGL{static getInstance(){return s_instance$3==null&&(s_instance$3=new CubismShader_WebGL),s_instance$3}static deleteInstance(){s_instance$3&&(s_instance$3.release(),s_instance$3=null)}constructor(){this._shaderSets=new csmVector}release(){this.releaseShaderProgram()}setupShaderProgramForDraw(t,e,i){t.isPremultipliedAlpha()||CubismLogError("NoPremultipliedAlpha is not allowed"),this._shaderSets.getSize()==0&&this.generateShaders();let s,a,o,n;const l=t.getClippingContextBufferForDraw()!=null,h=e.getDrawableInvertedMaskBit(i),u=l?h?2:1:0;let g;switch(e.getDrawableBlendMode(i)){case CubismBlendMode.CubismBlendMode_Normal:default:g=this._shaderSets.at(1+u),s=this.gl.ONE,a=this.gl.ONE_MINUS_SRC_ALPHA,o=this.gl.ONE,n=this.gl.ONE_MINUS_SRC_ALPHA;break;case CubismBlendMode.CubismBlendMode_Additive:g=this._shaderSets.at(4+u),s=this.gl.ONE,a=this.gl.ONE,o=this.gl.ZERO,n=this.gl.ONE;break;case CubismBlendMode.CubismBlendMode_Multiplicative:g=this._shaderSets.at(7+u),s=this.gl.DST_COLOR,a=this.gl.ONE_MINUS_SRC_ALPHA,o=this.gl.ZERO,n=this.gl.ONE;break}this.gl.useProgram(g.shaderProgram),t._bufferData.vertex==null&&(t._bufferData.vertex=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,t._bufferData.vertex);const d=e.getDrawableVertices(i);this.gl.bufferData(this.gl.ARRAY_BUFFER,d,this.gl.DYNAMIC_DRAW),this.gl.enableVertexAttribArray(g.attributePositionLocation),this.gl.vertexAttribPointer(g.attributePositionLocation,2,this.gl.FLOAT,!1,0,0),t._bufferData.uv==null&&(t._bufferData.uv=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,t._bufferData.uv);const c=e.getDrawableVertexUvs(i);if(this.gl.bufferData(this.gl.ARRAY_BUFFER,c,this.gl.DYNAMIC_DRAW),this.gl.enableVertexAttribArray(g.attributeTexCoordLocation),this.gl.vertexAttribPointer(g.attributeTexCoordLocation,2,this.gl.FLOAT,!1,0,0),l){this.gl.activeTexture(this.gl.TEXTURE1);const x=t.getClippingContextBufferForDraw().getClippingManager().getColorBuffer().at(t.getClippingContextBufferForDraw()._bufferIndex);this.gl.bindTexture(this.gl.TEXTURE_2D,x),this.gl.uniform1i(g.samplerTexture1Location,1),this.gl.uniformMatrix4fv(g.uniformClipMatrixLocation,!1,t.getClippingContextBufferForDraw()._matrixForDraw.getArray());const b=t.getClippingContextBufferForDraw()._layoutChannelIndex,M=t.getClippingContextBufferForDraw().getClippingManager().getChannelFlagAsColor(b);this.gl.uniform4f(g.uniformChannelFlagLocation,M.r,M.g,M.b,M.a)}const m=e.getDrawableTextureIndex(i),p=t.getBindedTextures().getValue(m);this.gl.activeTexture(this.gl.TEXTURE0),this.gl.bindTexture(this.gl.TEXTURE_2D,p),this.gl.uniform1i(g.samplerTexture0Location,0);const _=t.getMvpMatrix();this.gl.uniformMatrix4fv(g.uniformMatrixLocation,!1,_.getArray());const C=t.getModelColorWithOpacity(e.getDrawableOpacity(i)),f=e.getMultiplyColor(i),y=e.getScreenColor(i);this.gl.uniform4f(g.uniformBaseColorLocation,C.r,C.g,C.b,C.a),this.gl.uniform4f(g.uniformMultiplyColorLocation,f.r,f.g,f.b,f.a),this.gl.uniform4f(g.uniformScreenColorLocation,y.r,y.g,y.b,y.a),t._bufferData.index==null&&(t._bufferData.index=this.gl.createBuffer());const S=e.getDrawableVertexIndices(i);this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,t._bufferData.index),this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,S,this.gl.DYNAMIC_DRAW),this.gl.blendFuncSeparate(s,a,o,n)}setupShaderProgramForMask(t,e,i){t.isPremultipliedAlpha()||CubismLogError("NoPremultipliedAlpha is not allowed"),this._shaderSets.getSize()==0&&this.generateShaders();const s=this._shaderSets.at(0);this.gl.useProgram(s.shaderProgram),t._bufferData.vertex==null&&(t._bufferData.vertex=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,t._bufferData.vertex);const a=e.getDrawableVertices(i);this.gl.bufferData(this.gl.ARRAY_BUFFER,a,this.gl.DYNAMIC_DRAW),this.gl.enableVertexAttribArray(s.attributePositionLocation),this.gl.vertexAttribPointer(s.attributePositionLocation,2,this.gl.FLOAT,!1,0,0),t._bufferData.uv==null&&(t._bufferData.uv=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,t._bufferData.uv);const o=e.getDrawableTextureIndex(i),n=t.getBindedTextures().getValue(o);this.gl.activeTexture(this.gl.TEXTURE0),this.gl.bindTexture(this.gl.TEXTURE_2D,n),this.gl.uniform1i(s.samplerTexture0Location,0),t._bufferData.uv==null&&(t._bufferData.uv=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,t._bufferData.uv);const l=e.getDrawableVertexUvs(i);this.gl.bufferData(this.gl.ARRAY_BUFFER,l,this.gl.DYNAMIC_DRAW),this.gl.enableVertexAttribArray(s.attributeTexCoordLocation),this.gl.vertexAttribPointer(s.attributeTexCoordLocation,2,this.gl.FLOAT,!1,0,0),t.getClippingContextBufferForMask();const h=t.getClippingContextBufferForMask()._layoutChannelIndex,u=t.getClippingContextBufferForMask().getClippingManager().getChannelFlagAsColor(h);this.gl.uniform4f(s.uniformChannelFlagLocation,u.r,u.g,u.b,u.a),this.gl.uniformMatrix4fv(s.uniformClipMatrixLocation,!1,t.getClippingContextBufferForMask()._matrixForMask.getArray());const g=t.getClippingContextBufferForMask()._layoutBounds;this.gl.uniform4f(s.uniformBaseColorLocation,g.x*2-1,g.y*2-1,g.getRight()*2-1,g.getBottom()*2-1);const d=e.getMultiplyColor(i),c=e.getScreenColor(i);this.gl.uniform4f(s.uniformMultiplyColorLocation,d.r,d.g,d.b,d.a),this.gl.uniform4f(s.uniformScreenColorLocation,c.r,c.g,c.b,c.a);const m=this.gl.ZERO,p=this.gl.ONE_MINUS_SRC_COLOR,_=this.gl.ZERO,C=this.gl.ONE_MINUS_SRC_ALPHA;t._bufferData.index==null&&(t._bufferData.index=this.gl.createBuffer());const f=e.getDrawableVertexIndices(i);this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,t._bufferData.index),this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,f,this.gl.DYNAMIC_DRAW),this.gl.blendFuncSeparate(m,p,_,C)}releaseShaderProgram(){for(let t=0;t<this._shaderSets.getSize();t++)this.gl.deleteProgram(this._shaderSets.at(t).shaderProgram),this._shaderSets.at(t).shaderProgram=0,this._shaderSets.set(t,void 0),this._shaderSets.set(t,null)}generateShaders(){for(let t=0;t<ShaderCount;t++)this._shaderSets.pushBack(new CubismShaderSet);this._shaderSets.at(0).shaderProgram=this.loadShaderProgram(vertexShaderSrcSetupMask,fragmentShaderSrcsetupMask),this._shaderSets.at(1).shaderProgram=this.loadShaderProgram(vertexShaderSrc,fragmentShaderSrcPremultipliedAlpha),this._shaderSets.at(2).shaderProgram=this.loadShaderProgram(vertexShaderSrcMasked,fragmentShaderSrcMaskPremultipliedAlpha),this._shaderSets.at(3).shaderProgram=this.loadShaderProgram(vertexShaderSrcMasked,fragmentShaderSrcMaskInvertedPremultipliedAlpha),this._shaderSets.at(4).shaderProgram=this._shaderSets.at(1).shaderProgram,this._shaderSets.at(5).shaderProgram=this._shaderSets.at(2).shaderProgram,this._shaderSets.at(6).shaderProgram=this._shaderSets.at(3).shaderProgram,this._shaderSets.at(7).shaderProgram=this._shaderSets.at(1).shaderProgram,this._shaderSets.at(8).shaderProgram=this._shaderSets.at(2).shaderProgram,this._shaderSets.at(9).shaderProgram=this._shaderSets.at(3).shaderProgram,this._shaderSets.at(0).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(0).shaderProgram,"a_position"),this._shaderSets.at(0).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(0).shaderProgram,"a_texCoord"),this._shaderSets.at(0).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"s_texture0"),this._shaderSets.at(0).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"u_clipMatrix"),this._shaderSets.at(0).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"u_channelFlag"),this._shaderSets.at(0).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"u_baseColor"),this._shaderSets.at(0).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"u_multiplyColor"),this._shaderSets.at(0).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"u_screenColor"),this._shaderSets.at(1).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(1).shaderProgram,"a_position"),this._shaderSets.at(1).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(1).shaderProgram,"a_texCoord"),this._shaderSets.at(1).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram,"s_texture0"),this._shaderSets.at(1).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram,"u_matrix"),this._shaderSets.at(1).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram,"u_baseColor"),this._shaderSets.at(1).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram,"u_multiplyColor"),this._shaderSets.at(1).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram,"u_screenColor"),this._shaderSets.at(2).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(2).shaderProgram,"a_position"),this._shaderSets.at(2).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(2).shaderProgram,"a_texCoord"),this._shaderSets.at(2).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"s_texture0"),this._shaderSets.at(2).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"s_texture1"),this._shaderSets.at(2).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_matrix"),this._shaderSets.at(2).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_clipMatrix"),this._shaderSets.at(2).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_channelFlag"),this._shaderSets.at(2).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_baseColor"),this._shaderSets.at(2).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_multiplyColor"),this._shaderSets.at(2).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_screenColor"),this._shaderSets.at(3).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(3).shaderProgram,"a_position"),this._shaderSets.at(3).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(3).shaderProgram,"a_texCoord"),this._shaderSets.at(3).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"s_texture0"),this._shaderSets.at(3).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"s_texture1"),this._shaderSets.at(3).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_matrix"),this._shaderSets.at(3).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_clipMatrix"),this._shaderSets.at(3).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_channelFlag"),this._shaderSets.at(3).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_baseColor"),this._shaderSets.at(3).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_multiplyColor"),this._shaderSets.at(3).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_screenColor"),this._shaderSets.at(4).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(4).shaderProgram,"a_position"),this._shaderSets.at(4).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(4).shaderProgram,"a_texCoord"),this._shaderSets.at(4).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram,"s_texture0"),this._shaderSets.at(4).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram,"u_matrix"),this._shaderSets.at(4).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram,"u_baseColor"),this._shaderSets.at(4).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram,"u_multiplyColor"),this._shaderSets.at(4).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram,"u_screenColor"),this._shaderSets.at(5).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(5).shaderProgram,"a_position"),this._shaderSets.at(5).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(5).shaderProgram,"a_texCoord"),this._shaderSets.at(5).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"s_texture0"),this._shaderSets.at(5).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"s_texture1"),this._shaderSets.at(5).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_matrix"),this._shaderSets.at(5).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_clipMatrix"),this._shaderSets.at(5).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_channelFlag"),this._shaderSets.at(5).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_baseColor"),this._shaderSets.at(5).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_multiplyColor"),this._shaderSets.at(5).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_screenColor"),this._shaderSets.at(6).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(6).shaderProgram,"a_position"),this._shaderSets.at(6).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(6).shaderProgram,"a_texCoord"),this._shaderSets.at(6).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"s_texture0"),this._shaderSets.at(6).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"s_texture1"),this._shaderSets.at(6).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_matrix"),this._shaderSets.at(6).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_clipMatrix"),this._shaderSets.at(6).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_channelFlag"),this._shaderSets.at(6).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_baseColor"),this._shaderSets.at(6).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_multiplyColor"),this._shaderSets.at(6).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_screenColor"),this._shaderSets.at(7).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(7).shaderProgram,"a_position"),this._shaderSets.at(7).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(7).shaderProgram,"a_texCoord"),this._shaderSets.at(7).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram,"s_texture0"),this._shaderSets.at(7).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram,"u_matrix"),this._shaderSets.at(7).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram,"u_baseColor"),this._shaderSets.at(7).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram,"u_multiplyColor"),this._shaderSets.at(7).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram,"u_screenColor"),this._shaderSets.at(8).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(8).shaderProgram,"a_position"),this._shaderSets.at(8).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(8).shaderProgram,"a_texCoord"),this._shaderSets.at(8).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"s_texture0"),this._shaderSets.at(8).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"s_texture1"),this._shaderSets.at(8).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_matrix"),this._shaderSets.at(8).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_clipMatrix"),this._shaderSets.at(8).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_channelFlag"),this._shaderSets.at(8).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_baseColor"),this._shaderSets.at(8).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_multiplyColor"),this._shaderSets.at(8).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_screenColor"),this._shaderSets.at(9).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(9).shaderProgram,"a_position"),this._shaderSets.at(9).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(9).shaderProgram,"a_texCoord"),this._shaderSets.at(9).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"s_texture0"),this._shaderSets.at(9).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"s_texture1"),this._shaderSets.at(9).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_matrix"),this._shaderSets.at(9).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_clipMatrix"),this._shaderSets.at(9).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_channelFlag"),this._shaderSets.at(9).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_baseColor"),this._shaderSets.at(9).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_multiplyColor"),this._shaderSets.at(9).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_screenColor")}loadShaderProgram(t,e){let i=this.gl.createProgram(),s=this.compileShaderSource(this.gl.VERTEX_SHADER,t);if(!s)return CubismLogError("Vertex shader compile error!"),0;let a=this.compileShaderSource(this.gl.FRAGMENT_SHADER,e);return a?(this.gl.attachShader(i,s),this.gl.attachShader(i,a),this.gl.linkProgram(i),this.gl.getProgramParameter(i,this.gl.LINK_STATUS)?(this.gl.deleteShader(s),this.gl.deleteShader(a),i):(CubismLogError("Failed to link program: {0}",i),this.gl.deleteShader(s),s=0,this.gl.deleteShader(a),a=0,i&&(this.gl.deleteProgram(i),i=0),0)):(CubismLogError("Vertex shader compile error!"),0)}compileShaderSource(t,e){const i=e,s=this.gl.createShader(t);if(this.gl.shaderSource(s,i),this.gl.compileShader(s),!s){const o=this.gl.getShaderInfoLog(s);CubismLogError("Shader compile log: {0} ",o)}return this.gl.getShaderParameter(s,this.gl.COMPILE_STATUS)?s:(this.gl.deleteShader(s),null)}setGl(t){this.gl=t}}class CubismShaderSet{}var ShaderNames=(r=>(r[r.ShaderNames_SetupMask=0]="ShaderNames_SetupMask",r[r.ShaderNames_NormalPremultipliedAlpha=1]="ShaderNames_NormalPremultipliedAlpha",r[r.ShaderNames_NormalMaskedPremultipliedAlpha=2]="ShaderNames_NormalMaskedPremultipliedAlpha",r[r.ShaderNames_NomralMaskedInvertedPremultipliedAlpha=3]="ShaderNames_NomralMaskedInvertedPremultipliedAlpha",r[r.ShaderNames_AddPremultipliedAlpha=4]="ShaderNames_AddPremultipliedAlpha",r[r.ShaderNames_AddMaskedPremultipliedAlpha=5]="ShaderNames_AddMaskedPremultipliedAlpha",r[r.ShaderNames_AddMaskedPremultipliedAlphaInverted=6]="ShaderNames_AddMaskedPremultipliedAlphaInverted",r[r.ShaderNames_MultPremultipliedAlpha=7]="ShaderNames_MultPremultipliedAlpha",r[r.ShaderNames_MultMaskedPremultipliedAlpha=8]="ShaderNames_MultMaskedPremultipliedAlpha",r[r.ShaderNames_MultMaskedPremultipliedAlphaInverted=9]="ShaderNames_MultMaskedPremultipliedAlphaInverted",r))(ShaderNames||{});const vertexShaderSrcSetupMask="attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;varying vec4       v_myPos;uniform mat4       u_clipMatrix;void main(){   gl_Position = u_clipMatrix * a_position;   v_myPos = u_clipMatrix * a_position;   v_texCoord = a_texCoord;   v_texCoord.y = 1.0 - v_texCoord.y;}",fragmentShaderSrcsetupMask="precision mediump float;varying vec2       v_texCoord;varying vec4       v_myPos;uniform vec4       u_baseColor;uniform vec4       u_channelFlag;uniform sampler2D  s_texture0;void main(){   float isInside =        step(u_baseColor.x, v_myPos.x/v_myPos.w)       * step(u_baseColor.y, v_myPos.y/v_myPos.w)       * step(v_myPos.x/v_myPos.w, u_baseColor.z)       * step(v_myPos.y/v_myPos.w, u_baseColor.w);   gl_FragColor = u_channelFlag * texture2D(s_texture0, v_texCoord).a * isInside;}",vertexShaderSrc="attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;uniform mat4       u_matrix;void main(){   gl_Position = u_matrix * a_position;   v_texCoord = a_texCoord;   v_texCoord.y = 1.0 - v_texCoord.y;}",vertexShaderSrcMasked="attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;varying vec4       v_clipPos;uniform mat4       u_matrix;uniform mat4       u_clipMatrix;void main(){   gl_Position = u_matrix * a_position;   v_clipPos = u_clipMatrix * a_position;   v_texCoord = a_texCoord;   v_texCoord.y = 1.0 - v_texCoord.y;}",fragmentShaderSrcPremultipliedAlpha="precision mediump float;varying vec2       v_texCoord;uniform vec4       u_baseColor;uniform sampler2D  s_texture0;uniform vec4       u_multiplyColor;uniform vec4       u_screenColor;void main(){   vec4 texColor = texture2D(s_texture0, v_texCoord);   texColor.rgb = texColor.rgb * u_multiplyColor.rgb;   texColor.rgb = (texColor.rgb + u_screenColor.rgb * texColor.a) - (texColor.rgb * u_screenColor.rgb);   vec4 color = texColor * u_baseColor;   gl_FragColor = vec4(color.rgb, color.a);}",fragmentShaderSrcMaskPremultipliedAlpha="precision mediump float;varying vec2       v_texCoord;varying vec4       v_clipPos;uniform vec4       u_baseColor;uniform vec4       u_channelFlag;uniform sampler2D  s_texture0;uniform sampler2D  s_texture1;uniform vec4       u_multiplyColor;uniform vec4       u_screenColor;void main(){   vec4 texColor = texture2D(s_texture0, v_texCoord);   texColor.rgb = texColor.rgb * u_multiplyColor.rgb;   texColor.rgb = (texColor.rgb + u_screenColor.rgb * texColor.a) - (texColor.rgb * u_screenColor.rgb);   vec4 col_formask = texColor * u_baseColor;   vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;   float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;   col_formask = col_formask * maskVal;   gl_FragColor = col_formask;}",fragmentShaderSrcMaskInvertedPremultipliedAlpha="precision mediump float;varying vec2      v_texCoord;varying vec4      v_clipPos;uniform sampler2D s_texture0;uniform sampler2D s_texture1;uniform vec4      u_channelFlag;uniform vec4      u_baseColor;uniform vec4      u_multiplyColor;uniform vec4      u_screenColor;void main(){   vec4 texColor = texture2D(s_texture0, v_texCoord);   texColor.rgb = texColor.rgb * u_multiplyColor.rgb;   texColor.rgb = (texColor.rgb + u_screenColor.rgb * texColor.a) - (texColor.rgb * u_screenColor.rgb);   vec4 col_formask = texColor * u_baseColor;   vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;   float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;   col_formask = col_formask * (1.0 - maskVal);   gl_FragColor = col_formask;}";var Live2DCubismFramework$7;(r=>{r.CubismShaderSet=CubismShaderSet,r.CubismShader_WebGL=CubismShader_WebGL,r.ShaderNames=ShaderNames})(Live2DCubismFramework$7||(Live2DCubismFramework$7={}));let s_viewport,s_fbo;class CubismClippingManager_WebGL extends CubismClippingManager{getMaskRenderTexture(){if(this._maskTexture&&this._maskTexture.textures!=null)this._maskTexture.frameNo=this._currentFrameNo;else{this._maskRenderTextures!=null&&this._maskRenderTextures.clear(),this._maskRenderTextures=new csmVector,this._maskColorBuffers!=null&&this._maskColorBuffers.clear(),this._maskColorBuffers=new csmVector;const t=this._clippingMaskBufferSize;for(let e=0;e<this._renderTextureCount;e++)this._maskColorBuffers.pushBack(this.gl.createTexture()),this.gl.bindTexture(this.gl.TEXTURE_2D,this._maskColorBuffers.at(e)),this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,t,t,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,null),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR),this.gl.bindTexture(this.gl.TEXTURE_2D,null),this._maskRenderTextures.pushBack(this.gl.createFramebuffer()),this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,this._maskRenderTextures.at(e)),this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER,this.gl.COLOR_ATTACHMENT0,this.gl.TEXTURE_2D,this._maskColorBuffers.at(e),0);this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,s_fbo),this._maskTexture=new CubismRenderTextureResource(this._currentFrameNo,this._maskRenderTextures)}return this._maskTexture.textures}setGL(t){this.gl=t}constructor(){super(CubismClippingContext_WebGL)}setupClippingContext(t,e){this._currentFrameNo++;let i=0;for(let s=0;s<this._clippingContextListForMask.getSize();s++){const a=this._clippingContextListForMask.at(s);this.calcClippedDrawTotalBounds(t,a),a._isUsing&&i++}if(i>0){this.gl.viewport(0,0,this._clippingMaskBufferSize,this._clippingMaskBufferSize),this._currentMaskRenderTexture=this.getMaskRenderTexture().at(0),e.preDraw(),this.setupLayoutBounds(i),this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,this._currentMaskRenderTexture),this._clearedFrameBufferFlags.getSize()!=this._renderTextureCount&&(this._clearedFrameBufferFlags.clear(),this._clearedFrameBufferFlags=new csmVector(this._renderTextureCount));for(let s=0;s<this._clearedFrameBufferFlags.getSize();s++)this._clearedFrameBufferFlags.set(s,!1);for(let s=0;s<this._clippingContextListForMask.getSize();s++){const a=this._clippingContextListForMask.at(s),o=a._allClippedDrawRect,n=a._layoutBounds,l=.05;let h=0,u=0;const g=this.getMaskRenderTexture().at(a._bufferIndex);this._currentMaskRenderTexture!=g&&(this._currentMaskRenderTexture=g,e.preDraw(),this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,this._currentMaskRenderTexture)),this._tmpBoundsOnModel.setRect(o),this._tmpBoundsOnModel.expand(o.width*l,o.height*l),h=n.width/this._tmpBoundsOnModel.width,u=n.height/this._tmpBoundsOnModel.height,this._tmpMatrix.loadIdentity(),this._tmpMatrix.translateRelative(-1,-1),this._tmpMatrix.scaleRelative(2,2),this._tmpMatrix.translateRelative(n.x,n.y),this._tmpMatrix.scaleRelative(h,u),this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x,-this._tmpBoundsOnModel.y),this._tmpMatrixForMask.setMatrix(this._tmpMatrix.getArray()),this._tmpMatrix.loadIdentity(),this._tmpMatrix.translateRelative(n.x,n.y),this._tmpMatrix.scaleRelative(h,u),this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x,-this._tmpBoundsOnModel.y),this._tmpMatrixForDraw.setMatrix(this._tmpMatrix.getArray()),a._matrixForMask.setMatrix(this._tmpMatrixForMask.getArray()),a._matrixForDraw.setMatrix(this._tmpMatrixForDraw.getArray());const d=a._clippingIdCount;for(let c=0;c<d;c++){const m=a._clippingIdList[c];t.getDrawableDynamicFlagVertexPositionsDidChange(m)&&(e.setIsCulling(t.getDrawableCulling(m)!=!1),this._clearedFrameBufferFlags.at(a._bufferIndex)||(this.gl.clearColor(1,1,1,1),this.gl.clear(this.gl.COLOR_BUFFER_BIT),this._clearedFrameBufferFlags.set(a._bufferIndex,!0)),e.setClippingContextBufferForMask(a),e.drawMeshWebGL(t,m))}}this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,s_fbo),e.setClippingContextBufferForMask(null),this.gl.viewport(s_viewport[0],s_viewport[1],s_viewport[2],s_viewport[3])}}getColorBuffer(){return this._maskColorBuffers}getClippingMaskCount(){return this._clippingContextListForMask.getSize()}}class CubismRenderTextureResource{constructor(t,e){this.frameNo=t,this.textures=e}}class CubismClippingContext_WebGL extends CubismClippingContext{constructor(t,e,i){super(e,i),this._owner=t}getClippingManager(){return this._owner}setGl(t){this._owner.setGL(t)}}class CubismRendererProfile_WebGL{setGlEnable(t,e){e?this.gl.enable(t):this.gl.disable(t)}setGlEnableVertexAttribArray(t,e){e?this.gl.enableVertexAttribArray(t):this.gl.disableVertexAttribArray(t)}save(){if(this.gl==null){CubismLogError(`'gl' is null. WebGLRenderingContext is required.
Please call 'CubimRenderer_WebGL.startUp' function.`);return}this._lastArrayBufferBinding=this.gl.getParameter(this.gl.ARRAY_BUFFER_BINDING),this._lastElementArrayBufferBinding=this.gl.getParameter(this.gl.ELEMENT_ARRAY_BUFFER_BINDING),this._lastProgram=this.gl.getParameter(this.gl.CURRENT_PROGRAM),this._lastActiveTexture=this.gl.getParameter(this.gl.ACTIVE_TEXTURE),this.gl.activeTexture(this.gl.TEXTURE1),this._lastTexture1Binding2D=this.gl.getParameter(this.gl.TEXTURE_BINDING_2D),this.gl.activeTexture(this.gl.TEXTURE0),this._lastTexture0Binding2D=this.gl.getParameter(this.gl.TEXTURE_BINDING_2D),this._lastVertexAttribArrayEnabled[0]=this.gl.getVertexAttrib(0,this.gl.VERTEX_ATTRIB_ARRAY_ENABLED),this._lastVertexAttribArrayEnabled[1]=this.gl.getVertexAttrib(1,this.gl.VERTEX_ATTRIB_ARRAY_ENABLED),this._lastVertexAttribArrayEnabled[2]=this.gl.getVertexAttrib(2,this.gl.VERTEX_ATTRIB_ARRAY_ENABLED),this._lastVertexAttribArrayEnabled[3]=this.gl.getVertexAttrib(3,this.gl.VERTEX_ATTRIB_ARRAY_ENABLED),this._lastScissorTest=this.gl.isEnabled(this.gl.SCISSOR_TEST),this._lastStencilTest=this.gl.isEnabled(this.gl.STENCIL_TEST),this._lastDepthTest=this.gl.isEnabled(this.gl.DEPTH_TEST),this._lastCullFace=this.gl.isEnabled(this.gl.CULL_FACE),this._lastBlend=this.gl.isEnabled(this.gl.BLEND),this._lastFrontFace=this.gl.getParameter(this.gl.FRONT_FACE),this._lastColorMask=this.gl.getParameter(this.gl.COLOR_WRITEMASK),this._lastBlending[0]=this.gl.getParameter(this.gl.BLEND_SRC_RGB),this._lastBlending[1]=this.gl.getParameter(this.gl.BLEND_DST_RGB),this._lastBlending[2]=this.gl.getParameter(this.gl.BLEND_SRC_ALPHA),this._lastBlending[3]=this.gl.getParameter(this.gl.BLEND_DST_ALPHA),this._lastFBO=this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING),this._lastViewport=this.gl.getParameter(this.gl.VIEWPORT)}restore(){if(this.gl==null){CubismLogError(`'gl' is null. WebGLRenderingContext is required.
Please call 'CubimRenderer_WebGL.startUp' function.`);return}this.gl.useProgram(this._lastProgram),this.setGlEnableVertexAttribArray(0,this._lastVertexAttribArrayEnabled[0]),this.setGlEnableVertexAttribArray(1,this._lastVertexAttribArrayEnabled[1]),this.setGlEnableVertexAttribArray(2,this._lastVertexAttribArrayEnabled[2]),this.setGlEnableVertexAttribArray(3,this._lastVertexAttribArrayEnabled[3]),this.setGlEnable(this.gl.SCISSOR_TEST,this._lastScissorTest),this.setGlEnable(this.gl.STENCIL_TEST,this._lastStencilTest),this.setGlEnable(this.gl.DEPTH_TEST,this._lastDepthTest),this.setGlEnable(this.gl.CULL_FACE,this._lastCullFace),this.setGlEnable(this.gl.BLEND,this._lastBlend),this.gl.frontFace(this._lastFrontFace),this.gl.colorMask(this._lastColorMask[0],this._lastColorMask[1],this._lastColorMask[2],this._lastColorMask[3]),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this._lastArrayBufferBinding),this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this._lastElementArrayBufferBinding),this.gl.activeTexture(this.gl.TEXTURE1),this.gl.bindTexture(this.gl.TEXTURE_2D,this._lastTexture1Binding2D),this.gl.activeTexture(this.gl.TEXTURE0),this.gl.bindTexture(this.gl.TEXTURE_2D,this._lastTexture0Binding2D),this.gl.activeTexture(this._lastActiveTexture),this.gl.blendFuncSeparate(this._lastBlending[0],this._lastBlending[1],this._lastBlending[2],this._lastBlending[3])}setGl(t){this.gl=t}constructor(){this._lastVertexAttribArrayEnabled=new Array(4),this._lastColorMask=new Array(4),this._lastBlending=new Array(4),this._lastViewport=new Array(4)}}class CubismRenderer_WebGL extends CubismRenderer{initialize(t,e=1){t.isUsingMasking()&&(this._clippingManager=new CubismClippingManager_WebGL,this._clippingManager.initialize(t,e)),this._sortedDrawableIndexList.resize(t.getDrawableCount(),0),super.initialize(t)}bindTexture(t,e){this._textures.setValue(t,e)}getBindedTextures(){return this._textures}setClippingMaskBufferSize(t){if(!this._model.isUsingMasking())return;const e=this._clippingManager.getRenderTextureCount();this._clippingManager.release(),this._clippingManager=void 0,this._clippingManager=null,this._clippingManager=new CubismClippingManager_WebGL,this._clippingManager.setClippingMaskBufferSize(t),this._clippingManager.initialize(this.getModel(),e)}getClippingMaskBufferSize(){return this._model.isUsingMasking()?this._clippingManager.getClippingMaskBufferSize():-1}getRenderTextureCount(){return this._model.isUsingMasking()?this._clippingManager.getRenderTextureCount():-1}constructor(){super(),this._clippingContextBufferForMask=null,this._clippingContextBufferForDraw=null,this._rendererProfile=new CubismRendererProfile_WebGL,this.firstDraw=!0,this._textures=new csmMap,this._sortedDrawableIndexList=new csmVector,this._bufferData={vertex:WebGLBuffer=null,uv:WebGLBuffer=null,index:WebGLBuffer=null},this._textures.prepareCapacity(32,!0)}release(){this._clippingManager&&(this._clippingManager.release(),this._clippingManager=void 0,this._clippingManager=null),this.gl!=null&&(this.gl.deleteBuffer(this._bufferData.vertex),this._bufferData.vertex=null,this.gl.deleteBuffer(this._bufferData.uv),this._bufferData.uv=null,this.gl.deleteBuffer(this._bufferData.index),this._bufferData.index=null,this._bufferData=null,this._textures=null)}doDrawModel(){if(this.gl==null){CubismLogError(`'gl' is null. WebGLRenderingContext is required.
Please call 'CubimRenderer_WebGL.startUp' function.`);return}this._clippingManager!=null&&(this.preDraw(),this.isUsingHighPrecisionMask()?this._clippingManager.setupMatrixForHighPrecision(this.getModel(),!1):this._clippingManager.setupClippingContext(this.getModel(),this)),this.preDraw();const t=this.getModel().getDrawableCount(),e=this.getModel().getDrawableRenderOrders();for(let i=0;i<t;++i){const s=e[i];this._sortedDrawableIndexList.set(s,i)}for(let i=0;i<t;++i){const s=this._sortedDrawableIndexList.at(i);if(!this.getModel().getDrawableDynamicFlagIsVisible(s))continue;const a=this._clippingManager!=null?this._clippingManager.getClippingContextListForDraw().at(s):null;if(a!=null&&this.isUsingHighPrecisionMask()){a._isUsing&&(this.gl.viewport(0,0,this._clippingManager.getClippingMaskBufferSize(),this._clippingManager.getClippingMaskBufferSize()),this.preDraw(),this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,a.getClippingManager().getMaskRenderTexture().at(a._bufferIndex)),this.gl.clearColor(1,1,1,1),this.gl.clear(this.gl.COLOR_BUFFER_BIT));{const o=a._clippingIdCount;for(let n=0;n<o;n++){const l=a._clippingIdList[n];this._model.getDrawableDynamicFlagVertexPositionsDidChange(l)&&(this.setIsCulling(this._model.getDrawableCulling(l)!=!1),this.setClippingContextBufferForMask(a),this.drawMeshWebGL(this._model,l))}}this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,s_fbo),this.setClippingContextBufferForMask(null),this.gl.viewport(s_viewport[0],s_viewport[1],s_viewport[2],s_viewport[3]),this.preDraw()}this.setClippingContextBufferForDraw(a),this.setIsCulling(this.getModel().getDrawableCulling(s)),this.drawMeshWebGL(this._model,s)}}drawMeshWebGL(t,e){this.isCulling()?this.gl.enable(this.gl.CULL_FACE):this.gl.disable(this.gl.CULL_FACE),this.gl.frontFace(this.gl.CCW),this.isGeneratingMask()?CubismShader_WebGL.getInstance().setupShaderProgramForMask(this,t,e):CubismShader_WebGL.getInstance().setupShaderProgramForDraw(this,t,e);{const i=t.getDrawableVertexIndexCount(e);this.gl.drawElements(this.gl.TRIANGLES,i,this.gl.UNSIGNED_SHORT,0)}this.gl.useProgram(null),this.setClippingContextBufferForDraw(null),this.setClippingContextBufferForMask(null)}saveProfile(){this._rendererProfile.save()}restoreProfile(){this._rendererProfile.restore()}static doStaticRelease(){CubismShader_WebGL.deleteInstance()}setRenderState(t,e){s_fbo=t,s_viewport=e}preDraw(){if(this.firstDraw&&(this.firstDraw=!1),this.gl.disable(this.gl.SCISSOR_TEST),this.gl.disable(this.gl.STENCIL_TEST),this.gl.disable(this.gl.DEPTH_TEST),this.gl.frontFace(this.gl.CW),this.gl.enable(this.gl.BLEND),this.gl.colorMask(!0,!0,!0,!0),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,null),this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,null),this.getAnisotropy()>0&&this._extension)for(let t=0;t<this._textures.getSize();++t)this.gl.bindTexture(this.gl.TEXTURE_2D,this._textures.getValue(t)),this.gl.texParameterf(this.gl.TEXTURE_2D,this._extension.TEXTURE_MAX_ANISOTROPY_EXT,this.getAnisotropy())}setClippingContextBufferForMask(t){this._clippingContextBufferForMask=t}getClippingContextBufferForMask(){return this._clippingContextBufferForMask}setClippingContextBufferForDraw(t){this._clippingContextBufferForDraw=t}getClippingContextBufferForDraw(){return this._clippingContextBufferForDraw}isGeneratingMask(){return this.getClippingContextBufferForMask()!=null}startUp(t){this.gl=t,this._clippingManager&&this._clippingManager.setGL(t),CubismShader_WebGL.getInstance().setGl(t),this._rendererProfile.setGl(t),this._extension=this.gl.getExtension("EXT_texture_filter_anisotropic")||this.gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic")||this.gl.getExtension("MOZ_EXT_texture_filter_anisotropic")}}CubismRenderer.staticRelease=()=>{CubismRenderer_WebGL.doStaticRelease()};var Live2DCubismFramework$6;(r=>{r.CubismClippingContext=CubismClippingContext_WebGL,r.CubismClippingManager_WebGL=CubismClippingManager_WebGL,r.CubismRenderTextureResource=CubismRenderTextureResource,r.CubismRenderer_WebGL=CubismRenderer_WebGL})(Live2DCubismFramework$6||(Live2DCubismFramework$6={}));class DrawableColorData{constructor(t=!1,e=new CubismTextureColor){this.isOverwritten=t,this.color=e}}class PartColorData{constructor(t=!1,e=new CubismTextureColor){this.isOverwritten=t,this.color=e}}class DrawableCullingData{constructor(t=!1,e=!1){this.isOverwritten=t,this.isCulling=e}}class CubismModel{update(){this._model.update(),this._model.drawables.resetDynamicFlags()}getPixelsPerUnit(){return this._model==null?0:this._model.canvasinfo.PixelsPerUnit}getCanvasWidth(){return this._model==null?0:this._model.canvasinfo.CanvasWidth/this._model.canvasinfo.PixelsPerUnit}getCanvasHeight(){return this._model==null?0:this._model.canvasinfo.CanvasHeight/this._model.canvasinfo.PixelsPerUnit}saveParameters(){const t=this._model.parameters.count,e=this._savedParameters.getSize();for(let i=0;i<t;++i)i<e?this._savedParameters.set(i,this._parameterValues[i]):this._savedParameters.pushBack(this._parameterValues[i])}getMultiplyColor(t){return this.getOverwriteFlagForModelMultiplyColors()||this.getOverwriteFlagForDrawableMultiplyColors(t)?this._userMultiplyColors.at(t).color:this.getDrawableMultiplyColor(t)}getScreenColor(t){return this.getOverwriteFlagForModelScreenColors()||this.getOverwriteFlagForDrawableScreenColors(t)?this._userScreenColors.at(t).color:this.getDrawableScreenColor(t)}setMultiplyColorByTextureColor(t,e){this.setMultiplyColorByRGBA(t,e.r,e.g,e.b,e.a)}setMultiplyColorByRGBA(t,e,i,s,a=1){this._userMultiplyColors.at(t).color.r=e,this._userMultiplyColors.at(t).color.g=i,this._userMultiplyColors.at(t).color.b=s,this._userMultiplyColors.at(t).color.a=a}setScreenColorByTextureColor(t,e){this.setScreenColorByRGBA(t,e.r,e.g,e.b,e.a)}setScreenColorByRGBA(t,e,i,s,a=1){this._userScreenColors.at(t).color.r=e,this._userScreenColors.at(t).color.g=i,this._userScreenColors.at(t).color.b=s,this._userScreenColors.at(t).color.a=a}getPartMultiplyColor(t){return this._userPartMultiplyColors.at(t).color}getPartScreenColor(t){return this._userPartScreenColors.at(t).color}setPartColor(t,e,i,s,a,o,n){if(o.at(t).color.r=e,o.at(t).color.g=i,o.at(t).color.b=s,o.at(t).color.a=a,o.at(t).isOverwritten)for(let l=0;l<this._partChildDrawables.at(t).getSize();++l){const h=this._partChildDrawables.at(t).at(l);n.at(h).color.r=e,n.at(h).color.g=i,n.at(h).color.b=s,n.at(h).color.a=a}}setPartMultiplyColorByTextureColor(t,e){this.setPartMultiplyColorByRGBA(t,e.r,e.g,e.b,e.a)}setPartMultiplyColorByRGBA(t,e,i,s,a){this.setPartColor(t,e,i,s,a,this._userPartMultiplyColors,this._userMultiplyColors)}setPartScreenColorByTextureColor(t,e){this.setPartScreenColorByRGBA(t,e.r,e.g,e.b,e.a)}setPartScreenColorByRGBA(t,e,i,s,a){this.setPartColor(t,e,i,s,a,this._userPartScreenColors,this._userScreenColors)}getOverwriteFlagForModelMultiplyColors(){return this._isOverwrittenModelMultiplyColors}getOverwriteFlagForModelScreenColors(){return this._isOverwrittenModelScreenColors}setOverwriteFlagForModelMultiplyColors(t){this._isOverwrittenModelMultiplyColors=t}setOverwriteFlagForModelScreenColors(t){this._isOverwrittenModelScreenColors=t}getOverwriteFlagForDrawableMultiplyColors(t){return this._userMultiplyColors.at(t).isOverwritten}getOverwriteFlagForDrawableScreenColors(t){return this._userScreenColors.at(t).isOverwritten}setOverwriteFlagForDrawableMultiplyColors(t,e){this._userMultiplyColors.at(t).isOverwritten=e}setOverwriteFlagForDrawableScreenColors(t,e){this._userScreenColors.at(t).isOverwritten=e}getOverwriteColorForPartMultiplyColors(t){return this._userPartMultiplyColors.at(t).isOverwritten}getOverwriteColorForPartScreenColors(t){return this._userPartScreenColors.at(t).isOverwritten}setOverwriteColorForPartColors(t,e,i,s){i.at(t).isOverwritten=e;for(let a=0;a<this._partChildDrawables.at(t).getSize();++a){const o=this._partChildDrawables.at(t).at(a);s.at(o).isOverwritten=e,e&&(s.at(o).color.r=i.at(t).color.r,s.at(o).color.g=i.at(t).color.g,s.at(o).color.b=i.at(t).color.b,s.at(o).color.a=i.at(t).color.a)}}setOverwriteColorForPartMultiplyColors(t,e){this._userPartMultiplyColors.at(t).isOverwritten=e,this.setOverwriteColorForPartColors(t,e,this._userPartMultiplyColors,this._userMultiplyColors)}setOverwriteColorForPartScreenColors(t,e){this._userPartScreenColors.at(t).isOverwritten=e,this.setOverwriteColorForPartColors(t,e,this._userPartScreenColors,this._userScreenColors)}getDrawableCulling(t){if(this.getOverwriteFlagForModelCullings()||this.getOverwriteFlagForDrawableCullings(t))return this._userCullings.at(t).isCulling;const e=this._model.drawables.constantFlags;return!Live2DCubismCore.Utils.hasIsDoubleSidedBit(e[t])}setDrawableCulling(t,e){this._userCullings.at(t).isCulling=e}getOverwriteFlagForModelCullings(){return this._isOverwrittenCullings}setOverwriteFlagForModelCullings(t){this._isOverwrittenCullings=t}getOverwriteFlagForDrawableCullings(t){return this._userCullings.at(t).isOverwritten}setOverwriteFlagForDrawableCullings(t,e){this._userCullings.at(t).isOverwritten=e}getModelOapcity(){return this._modelOpacity}setModelOapcity(t){this._modelOpacity=t}getModel(){return this._model}getPartIndex(t){let e;const i=this._model.parts.count;for(e=0;e<i;++e)if(t==this._partIds.at(e))return e;return this._notExistPartId.isExist(t)?this._notExistPartId.getValue(t):(e=i+this._notExistPartId.getSize(),this._notExistPartId.setValue(t,e),this._notExistPartOpacities.appendKey(e),e)}getPartId(t){const e=this._model.parts.ids[t];return CubismFramework.getIdManager().getId(e)}getPartCount(){return this._model.parts.count}setPartOpacityByIndex(t,e){if(this._notExistPartOpacities.isExist(t)){this._notExistPartOpacities.setValue(t,e);return}CSM_ASSERT(0<=t&&t<this.getPartCount()),this._partOpacities[t]=e}setPartOpacityById(t,e){const i=this.getPartIndex(t);i<0||this.setPartOpacityByIndex(i,e)}getPartOpacityByIndex(t){return this._notExistPartOpacities.isExist(t)?this._notExistPartOpacities.getValue(t):(CSM_ASSERT(0<=t&&t<this.getPartCount()),this._partOpacities[t])}getPartOpacityById(t){const e=this.getPartIndex(t);return e<0?0:this.getPartOpacityByIndex(e)}getParameterIndex(t){let e;const i=this._model.parameters.count;for(e=0;e<i;++e)if(t==this._parameterIds.at(e))return e;return this._notExistParameterId.isExist(t)?this._notExistParameterId.getValue(t):(e=this._model.parameters.count+this._notExistParameterId.getSize(),this._notExistParameterId.setValue(t,e),this._notExistParameterValues.appendKey(e),e)}getParameterCount(){return this._model.parameters.count}getParameterType(t){return this._model.parameters.types[t]}getParameterMaximumValue(t){return this._model.parameters.maximumValues[t]}getParameterMinimumValue(t){return this._model.parameters.minimumValues[t]}getParameterDefaultValue(t){return this._model.parameters.defaultValues[t]}getParameterId(t){return CubismFramework.getIdManager().getId(this._model.parameters.ids[t])}getParameterValueByIndex(t){return this._notExistParameterValues.isExist(t)?this._notExistParameterValues.getValue(t):(CSM_ASSERT(0<=t&&t<this.getParameterCount()),this._parameterValues[t])}getParameterValueById(t){const e=this.getParameterIndex(t);return this.getParameterValueByIndex(e)}setParameterValueByIndex(t,e,i=1){if(this._notExistParameterValues.isExist(t)){this._notExistParameterValues.setValue(t,i==1?e:this._notExistParameterValues.getValue(t)*(1-i)+e*i);return}CSM_ASSERT(0<=t&&t<this.getParameterCount()),this._model.parameters.maximumValues[t]<e&&(e=this._model.parameters.maximumValues[t]),this._model.parameters.minimumValues[t]>e&&(e=this._model.parameters.minimumValues[t]),this._parameterValues[t]=i==1?e:this._parameterValues[t]=this._parameterValues[t]*(1-i)+e*i}setParameterValueById(t,e,i=1){const s=this.getParameterIndex(t);this.setParameterValueByIndex(s,e,i)}addParameterValueByIndex(t,e,i=1){this.setParameterValueByIndex(t,this.getParameterValueByIndex(t)+e*i)}addParameterValueById(t,e,i=1){const s=this.getParameterIndex(t);this.addParameterValueByIndex(s,e,i)}multiplyParameterValueById(t,e,i=1){const s=this.getParameterIndex(t);this.multiplyParameterValueByIndex(s,e,i)}multiplyParameterValueByIndex(t,e,i=1){this.setParameterValueByIndex(t,this.getParameterValueByIndex(t)*(1+(e-1)*i))}getDrawableIndex(t){const e=this._model.drawables.count;for(let i=0;i<e;++i)if(this._drawableIds.at(i)==t)return i;return-1}getDrawableCount(){return this._model.drawables.count}getDrawableId(t){const e=this._model.drawables.ids;return CubismFramework.getIdManager().getId(e[t])}getDrawableRenderOrders(){return this._model.drawables.renderOrders}getDrawableTextureIndices(t){return this.getDrawableTextureIndex(t)}getDrawableTextureIndex(t){return this._model.drawables.textureIndices[t]}getDrawableDynamicFlagVertexPositionsDidChange(t){const e=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasVertexPositionsDidChangeBit(e[t])}getDrawableVertexIndexCount(t){return this._model.drawables.indexCounts[t]}getDrawableVertexCount(t){return this._model.drawables.vertexCounts[t]}getDrawableVertices(t){return this.getDrawableVertexPositions(t)}getDrawableVertexIndices(t){return this._model.drawables.indices[t]}getDrawableVertexPositions(t){return this._model.drawables.vertexPositions[t]}getDrawableVertexUvs(t){return this._model.drawables.vertexUvs[t]}getDrawableOpacity(t){return this._model.drawables.opacities[t]}getDrawableMultiplyColor(t){const e=this._model.drawables.multiplyColors,i=t*4,s=new CubismTextureColor;return s.r=e[i],s.g=e[i+1],s.b=e[i+2],s.a=e[i+3],s}getDrawableScreenColor(t){const e=this._model.drawables.screenColors,i=t*4,s=new CubismTextureColor;return s.r=e[i],s.g=e[i+1],s.b=e[i+2],s.a=e[i+3],s}getDrawableParentPartIndex(t){return this._model.drawables.parentPartIndices[t]}getDrawableBlendMode(t){const e=this._model.drawables.constantFlags;return Live2DCubismCore.Utils.hasBlendAdditiveBit(e[t])?CubismBlendMode.CubismBlendMode_Additive:Live2DCubismCore.Utils.hasBlendMultiplicativeBit(e[t])?CubismBlendMode.CubismBlendMode_Multiplicative:CubismBlendMode.CubismBlendMode_Normal}getDrawableInvertedMaskBit(t){const e=this._model.drawables.constantFlags;return Live2DCubismCore.Utils.hasIsInvertedMaskBit(e[t])}getDrawableMasks(){return this._model.drawables.masks}getDrawableMaskCounts(){return this._model.drawables.maskCounts}isUsingMasking(){for(let t=0;t<this._model.drawables.count;++t)if(!(this._model.drawables.maskCounts[t]<=0))return!0;return!1}getDrawableDynamicFlagIsVisible(t){const e=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasIsVisibleBit(e[t])}getDrawableDynamicFlagVisibilityDidChange(t){const e=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasVisibilityDidChangeBit(e[t])}getDrawableDynamicFlagOpacityDidChange(t){const e=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasOpacityDidChangeBit(e[t])}getDrawableDynamicFlagRenderOrderDidChange(t){const e=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasRenderOrderDidChangeBit(e[t])}getDrawableDynamicFlagBlendColorDidChange(t){const e=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasBlendColorDidChangeBit(e[t])}loadParameters(){let t=this._model.parameters.count;const e=this._savedParameters.getSize();t>e&&(t=e);for(let i=0;i<t;++i)this._parameterValues[i]=this._savedParameters.at(i)}initialize(){CSM_ASSERT(this._model),this._parameterValues=this._model.parameters.values,this._partOpacities=this._model.parts.opacities,this._parameterMaximumValues=this._model.parameters.maximumValues,this._parameterMinimumValues=this._model.parameters.minimumValues;{const e=this._model.parameters.ids,i=this._model.parameters.count;this._parameterIds.prepareCapacity(i);for(let s=0;s<i;++s)this._parameterIds.pushBack(CubismFramework.getIdManager().getId(e[s]))}const t=this._model.parts.count;{const e=this._model.parts.ids;this._partIds.prepareCapacity(t);for(let i=0;i<t;++i)this._partIds.pushBack(CubismFramework.getIdManager().getId(e[i]));this._userPartMultiplyColors.prepareCapacity(t),this._userPartScreenColors.prepareCapacity(t),this._partChildDrawables.prepareCapacity(t)}{const e=this._model.drawables.ids,i=this._model.drawables.count;this._userMultiplyColors.prepareCapacity(i),this._userScreenColors.prepareCapacity(i),this._userCullings.prepareCapacity(i);const s=new DrawableCullingData(!1,!1);for(let a=0;a<t;++a){const o=new CubismTextureColor(1,1,1,1),n=new CubismTextureColor(0,0,0,1),l=new PartColorData(!1,o),h=new PartColorData(!1,n);this._userPartMultiplyColors.pushBack(l),this._userPartScreenColors.pushBack(h),this._partChildDrawables.pushBack(new csmVector),this._partChildDrawables.at(a).prepareCapacity(i)}for(let a=0;a<i;++a){const o=new CubismTextureColor(1,1,1,1),n=new CubismTextureColor(0,0,0,1),l=new DrawableColorData(!1,o),h=new DrawableColorData(!1,n);this._drawableIds.pushBack(CubismFramework.getIdManager().getId(e[a])),this._userMultiplyColors.pushBack(l),this._userScreenColors.pushBack(h),this._userCullings.pushBack(s);const u=this.getDrawableParentPartIndex(a);u>=0&&this._partChildDrawables.at(u).pushBack(a)}}}constructor(t){this._model=t,this._parameterValues=null,this._parameterMaximumValues=null,this._parameterMinimumValues=null,this._partOpacities=null,this._savedParameters=new csmVector,this._parameterIds=new csmVector,this._drawableIds=new csmVector,this._partIds=new csmVector,this._isOverwrittenModelMultiplyColors=!1,this._isOverwrittenModelScreenColors=!1,this._isOverwrittenCullings=!1,this._modelOpacity=1,this._userMultiplyColors=new csmVector,this._userScreenColors=new csmVector,this._userCullings=new csmVector,this._userPartMultiplyColors=new csmVector,this._userPartScreenColors=new csmVector,this._partChildDrawables=new csmVector,this._notExistPartId=new csmMap,this._notExistParameterId=new csmMap,this._notExistParameterValues=new csmMap,this._notExistPartOpacities=new csmMap}release(){this._model.release(),this._model=null}}var Live2DCubismFramework$5;(r=>{r.CubismModel=CubismModel})(Live2DCubismFramework$5||(Live2DCubismFramework$5={}));class CubismMoc{static create(t,e){let i=null;if(e&&!this.hasMocConsistency(t))return CubismLogError("Inconsistent MOC3."),i;const s=Live2DCubismCore.Moc.fromArrayBuffer(t);return s&&(i=new CubismMoc(s),i._mocVersion=Live2DCubismCore.Version.csmGetMocVersion(s,t)),i}static delete(t){t._moc._release(),t._moc=null,t=null}createModel(){let t=null;const e=Live2DCubismCore.Model.fromMoc(this._moc);return e&&(t=new CubismModel(e),t.initialize(),++this._modelCount),t}deleteModel(t){t!=null&&(t.release(),t=null,--this._modelCount)}constructor(t){this._moc=t,this._modelCount=0,this._mocVersion=0}release(){CSM_ASSERT(this._modelCount==0),this._moc._release(),this._moc=null}getLatestMocVersion(){return Live2DCubismCore.Version.csmGetLatestMocVersion()}getMocVersion(){return this._mocVersion}static hasMocConsistency(t){return Live2DCubismCore.Moc.prototype.hasMocConsistency(t)===1}}var Live2DCubismFramework$4;(r=>{r.CubismMoc=CubismMoc})(Live2DCubismFramework$4||(Live2DCubismFramework$4={}));const Meta="Meta",UserDataCount="UserDataCount",TotalUserDataSize="TotalUserDataSize",UserData="UserData",Target="Target",Id="Id",Value="Value";class CubismModelUserDataJson{constructor(t,e){this._json=CubismJson.create(t,e)}release(){CubismJson.delete(this._json)}getUserDataCount(){return this._json.getRoot().getValueByString(Meta).getValueByString(UserDataCount).toInt()}getTotalUserDataSize(){return this._json.getRoot().getValueByString(Meta).getValueByString(TotalUserDataSize).toInt()}getUserDataTargetType(t){return this._json.getRoot().getValueByString(UserData).getValueByIndex(t).getValueByString(Target).getRawString()}getUserDataId(t){return CubismFramework.getIdManager().getId(this._json.getRoot().getValueByString(UserData).getValueByIndex(t).getValueByString(Id).getRawString())}getUserDataValue(t){return this._json.getRoot().getValueByString(UserData).getValueByIndex(t).getValueByString(Value).getRawString()}}var Live2DCubismFramework$3;(r=>{r.CubismModelUserDataJson=CubismModelUserDataJson})(Live2DCubismFramework$3||(Live2DCubismFramework$3={}));const ArtMesh="ArtMesh";class CubismModelUserDataNode{}class CubismModelUserData{static create(t,e){const i=new CubismModelUserData;return i.parseUserData(t,e),i}static delete(t){t!=null&&(t.release(),t=null)}getArtMeshUserDatas(){return this._artMeshUserDataNode}parseUserData(t,e){let i=new CubismModelUserDataJson(t,e);if(!i){i.release(),i=void 0;return}const s=CubismFramework.getIdManager().getId(ArtMesh),a=i.getUserDataCount();for(let o=0;o<a;o++){const n=new CubismModelUserDataNode;n.targetId=i.getUserDataId(o),n.targetType=CubismFramework.getIdManager().getId(i.getUserDataTargetType(o)),n.value=new csmString(i.getUserDataValue(o)),this._userDataNodes.pushBack(n),n.targetType==s&&this._artMeshUserDataNode.pushBack(n)}i.release(),i=void 0}constructor(){this._userDataNodes=new csmVector,this._artMeshUserDataNode=new csmVector}release(){for(let t=0;t<this._userDataNodes.getSize();++t)this._userDataNodes.set(t,null);this._userDataNodes=null}}var Live2DCubismFramework$2;(r=>{r.CubismModelUserData=CubismModelUserData,r.CubismModelUserDataNode=CubismModelUserDataNode})(Live2DCubismFramework$2||(Live2DCubismFramework$2={}));class CubismUserModel{isInitialized(){return this._initialized}setInitialized(t){this._initialized=t}isUpdating(){return this._updating}setUpdating(t){this._updating=t}setDragging(t,e){this._dragManager.set(t,e)}setAcceleration(t,e,i){this._accelerationX=t,this._accelerationY=e,this._accelerationZ=i}getModelMatrix(){return this._modelMatrix}setOpacity(t){this._opacity=t}getOpacity(){return this._opacity}loadModel(t,e=!1){if(this._moc=CubismMoc.create(t,e),this._moc==null){CubismLogError("Failed to CubismMoc.create().");return}if(this._model=this._moc.createModel(),this._model==null){CubismLogError("Failed to CreateModel().");return}this._model.saveParameters(),this._modelMatrix=new CubismModelMatrix(this._model.getCanvasWidth(),this._model.getCanvasHeight())}loadMotion(t,e,i,s){return t==null||e==0?(CubismLogError("Failed to loadMotion()."),null):CubismMotion.create(t,e,s)}loadExpression(t,e,i){return t==null||e==0?(CubismLogError("Failed to loadExpression()."),null):CubismExpressionMotion.create(t,e)}loadPose(t,e){if(t==null||e==0){CubismLogError("Failed to loadPose().");return}this._pose=CubismPose.create(t,e)}loadUserData(t,e){if(t==null||e==0){CubismLogError("Failed to loadUserData().");return}this._modelUserData=CubismModelUserData.create(t,e)}loadPhysics(t,e){if(t==null||e==0){CubismLogError("Failed to loadPhysics().");return}this._physics=CubismPhysics.create(t,e)}isHit(t,e,i){const s=this._model.getDrawableIndex(t);if(s<0)return!1;const a=this._model.getDrawableVertexCount(s),o=this._model.getDrawableVertices(s);let n=o[0],l=o[0],h=o[1],u=o[1];for(let c=1;c<a;++c){const m=o[Constant.vertexOffset+c*Constant.vertexStep],p=o[Constant.vertexOffset+c*Constant.vertexStep+1];m<n&&(n=m),m>l&&(l=m),p<h&&(h=p),p>u&&(u=p)}const g=this._modelMatrix.invertTransformX(e),d=this._modelMatrix.invertTransformY(i);return n<=g&&g<=l&&h<=d&&d<=u}getModel(){return this._model}getRenderer(){return this._renderer}createRenderer(t=1){this._renderer&&this.deleteRenderer(),this._renderer=new CubismRenderer_WebGL,this._renderer.initialize(this._model,t)}deleteRenderer(){this._renderer!=null&&(this._renderer.release(),this._renderer=null)}motionEventFired(t){CubismLogInfo("{0}",t.s)}static cubismDefaultMotionEventCallback(t,e,i){const s=i;s!=null&&s.motionEventFired(e)}constructor(){this._moc=null,this._model=null,this._motionManager=null,this._expressionManager=null,this._eyeBlink=null,this._breath=null,this._modelMatrix=null,this._pose=null,this._dragManager=null,this._physics=null,this._modelUserData=null,this._initialized=!1,this._updating=!1,this._opacity=1,this._lipsync=!0,this._lastLipSyncValue=0,this._dragX=0,this._dragY=0,this._accelerationX=0,this._accelerationY=0,this._accelerationZ=0,this._mocConsistency=!1,this._debugMode=!1,this._renderer=null,this._motionManager=new CubismMotionManager,this._motionManager.setEventCallback(CubismUserModel.cubismDefaultMotionEventCallback,this),this._expressionManager=new CubismExpressionMotionManager,this._dragManager=new CubismTargetPoint}release(){this._motionManager!=null&&(this._motionManager.release(),this._motionManager=null),this._expressionManager!=null&&(this._expressionManager.release(),this._expressionManager=null),this._moc!=null&&(this._moc.deleteModel(this._model),this._moc.release(),this._moc=null),this._modelMatrix=null,CubismPose.delete(this._pose),CubismEyeBlink.delete(this._eyeBlink),CubismBreath.delete(this._breath),this._dragManager=null,CubismPhysics.delete(this._physics),CubismModelUserData.delete(this._modelUserData),this.deleteRenderer()}}var Live2DCubismFramework$1;(r=>{r.CubismUserModel=CubismUserModel})(Live2DCubismFramework$1||(Live2DCubismFramework$1={}));const F=class F{static loadFileAsBytes(t,e){fetch(t).then(i=>i.arrayBuffer()).then(i=>e(i,i.byteLength))}static getDeltaTime(){return this.s_deltaTime}static updateTime(){this.s_currentFrame=Date.now(),this.s_deltaTime=(this.s_currentFrame-this.s_lastFrame)/1e3,this.s_lastFrame=this.s_currentFrame}static printMessage(t){console.log(t)}};F.lastUpdate=Date.now(),F.s_currentFrame=0,F.s_lastFrame=0,F.s_deltaTime=0;let LAppPal=F,s_instance$2=null;class LAppWavFileHandler{constructor(){this._loadFiletoBytes=(t,e)=>{this._byteReader._fileByte=t,this._byteReader._fileDataView=new DataView(this._byteReader._fileByte),this._byteReader._fileSize=e},this._pcmData=null,this._userTimeSeconds=0,this._lastRms=0,this._sampleOffset=0,this._wavFileInfo=new WavFileInfo,this._byteReader=new ByteReader}static getInstance(){return s_instance$2==null&&(s_instance$2=new LAppWavFileHandler),s_instance$2}static releaseInstance(){s_instance$2!=null&&(s_instance$2=void 0),s_instance$2=null}update(t){let e,i;if(this._pcmData==null||this._sampleOffset>=this._wavFileInfo._samplesPerChannel)return this._lastRms=0,!1;this._userTimeSeconds+=t,e=Math.floor(this._userTimeSeconds*this._wavFileInfo._samplingRate),e>this._wavFileInfo._samplesPerChannel&&(e=this._wavFileInfo._samplesPerChannel),i=0;for(let s=0;s<this._wavFileInfo._numberOfChannels;s++)for(let a=this._sampleOffset;a<e;a++){const o=this._pcmData[s][a];i+=o*o}return i=Math.sqrt(i/(this._wavFileInfo._numberOfChannels*(e-this._sampleOffset))),this._lastRms=i,this._sampleOffset=e,!0}start(t){this._sampleOffset=0,this._userTimeSeconds=0,this._lastRms=0,this.loadWavFile(t)}getRms(){return this._lastRms}loadWavFile(t){return new Promise(e=>{let i=!1;this._pcmData!=null&&this.releasePcmData();const s=async()=>fetch(t).then(a=>a.arrayBuffer());(async()=>{if(this._byteReader._fileByte=await s(),this._byteReader._fileDataView=new DataView(this._byteReader._fileByte),this._byteReader._fileSize=this._byteReader._fileByte.byteLength,this._byteReader._readOffset=0,this._byteReader._fileByte==null||this._byteReader._fileSize<4){e(!1);return}this._wavFileInfo._fileName=t;try{if(!this._byteReader.getCheckSignature("RIFF"))throw i=!1,new Error('Cannot find Signeture "RIFF".');if(this._byteReader.get32LittleEndian(),!this._byteReader.getCheckSignature("WAVE"))throw i=!1,new Error('Cannot find Signeture "WAVE".');if(!this._byteReader.getCheckSignature("fmt "))throw i=!1,new Error('Cannot find Signeture "fmt".');const a=this._byteReader.get32LittleEndian();if(this._byteReader.get16LittleEndian()!=1)throw i=!1,new Error("File is not linear PCM.");for(this._wavFileInfo._numberOfChannels=this._byteReader.get16LittleEndian(),this._wavFileInfo._samplingRate=this._byteReader.get32LittleEndian(),this._byteReader.get32LittleEndian(),this._byteReader.get16LittleEndian(),this._wavFileInfo._bitsPerSample=this._byteReader.get16LittleEndian(),a>16&&(this._byteReader._readOffset+=a-16);!this._byteReader.getCheckSignature("data")&&this._byteReader._readOffset<this._byteReader._fileSize;)this._byteReader._readOffset+=this._byteReader.get32LittleEndian()+4;if(this._byteReader._readOffset>=this._byteReader._fileSize)throw i=!1,new Error('Cannot find "data" Chunk.');{const o=this._byteReader.get32LittleEndian();this._wavFileInfo._samplesPerChannel=o*8/(this._wavFileInfo._bitsPerSample*this._wavFileInfo._numberOfChannels)}this._pcmData=new Array(this._wavFileInfo._numberOfChannels);for(let o=0;o<this._wavFileInfo._numberOfChannels;o++)this._pcmData[o]=new Float32Array(this._wavFileInfo._samplesPerChannel);for(let o=0;o<this._wavFileInfo._samplesPerChannel;o++)for(let n=0;n<this._wavFileInfo._numberOfChannels;n++)this._pcmData[n][o]=this.getPcmSample();i=!0,e(i)}catch(a){console.log(a)}})().then(()=>{e(i)})})}getPcmSample(){let t;switch(this._wavFileInfo._bitsPerSample){case 8:t=this._byteReader.get8()-128,t<<=24;break;case 16:t=this._byteReader.get16LittleEndian()<<16;break;case 24:t=this._byteReader.get24LittleEndian()<<8;break;default:t=0;break}return t/2147483647}getPcmDataChannel(t){return!this._pcmData||!(t<this._pcmData.length)?null:Float32Array.from(this._pcmData[t])}getWavSamplingRate(){return!this._wavFileInfo||this._wavFileInfo._samplingRate<1?null:this._wavFileInfo._samplingRate}releasePcmData(){for(let t=0;t<this._wavFileInfo._numberOfChannels;t++)delete this._pcmData[t];delete this._pcmData,this._pcmData=null}}class WavFileInfo{constructor(){this._fileName="",this._numberOfChannels=0,this._bitsPerSample=0,this._samplingRate=0,this._samplesPerChannel=0}}class ByteReader{constructor(){this._fileByte=null,this._fileDataView=null,this._fileSize=0,this._readOffset=0}get8(){const t=this._fileDataView.getUint8(this._readOffset);return this._readOffset++,t}get16LittleEndian(){const t=this._fileDataView.getUint8(this._readOffset+1)<<8|this._fileDataView.getUint8(this._readOffset);return this._readOffset+=2,t}get24LittleEndian(){const t=this._fileDataView.getUint8(this._readOffset+2)<<16|this._fileDataView.getUint8(this._readOffset+1)<<8|this._fileDataView.getUint8(this._readOffset);return this._readOffset+=3,t}get32LittleEndian(){const t=this._fileDataView.getUint8(this._readOffset+3)<<24|this._fileDataView.getUint8(this._readOffset+2)<<16|this._fileDataView.getUint8(this._readOffset+1)<<8|this._fileDataView.getUint8(this._readOffset);return this._readOffset+=4,t}getCheckSignature(t){const e=new Uint8Array(4),i=new TextEncoder().encode(t);if(t.length!=4)return!1;for(let s=0;s<4;s++)e[s]=this.get8();return e[0]==i[0]&&e[1]==i[1]&&e[2]==i[2]&&e[3]==i[3]}}class LAppModel extends CubismUserModel{loadAssets(t,e){this._modelHomeDir=t,fetch(`${t}${e}`).then(i=>i.arrayBuffer()).then(i=>{const s=new CubismModelSettingJson(i,i.byteLength);this._state=1,this.setupModel(s)}).catch(i=>{CubismLogError(`Failed to load file ${this._modelHomeDir}${e}`)})}setupModel(t){if(this._updating=!0,this._initialized=!1,this._modelSetting=t,this._modelSetting.getModelFileName()!=""){const d=this._modelSetting.getModelFileName();fetch(`${this._modelHomeDir}${d}`).then(c=>{if(c.ok)return c.arrayBuffer();if(c.status>=400)return CubismLogError(`Failed to load file ${this._modelHomeDir}${d}`),new ArrayBuffer(0)}).then(c=>{this.loadModel(c,this._mocConsistency),this._state=3,e()}),this._state=2}else LAppPal.printMessage("Model data does not exist.");const e=()=>{if(this._modelSetting.getExpressionCount()>0){const d=this._modelSetting.getExpressionCount();for(let c=0;c<d;c++){const m=this._modelSetting.getExpressionName(c),p=this._modelSetting.getExpressionFileName(c);fetch(`${this._modelHomeDir}${p}`).then(_=>{if(_.ok)return _.arrayBuffer();if(_.status>=400)return CubismLogError(`Failed to load file ${this._modelHomeDir}${p}`),new ArrayBuffer(0)}).then(_=>{const C=this.loadExpression(_,_.byteLength,m);this._expressions.getValue(m)!=null&&(ACubismMotion.delete(this._expressions.getValue(m)),this._expressions.setValue(m,null)),this._expressions.setValue(m,C),this._expressionCount++,this._expressionCount>=d&&(this._state=5,i())})}this._state=4}else this._state=5,i()},i=()=>{if(this._modelSetting.getPhysicsFileName()!=""){const d=this._modelSetting.getPhysicsFileName();fetch(`${this._modelHomeDir}${d}`).then(c=>{if(c.ok)return c.arrayBuffer();if(c.status>=400)return CubismLogError(`Failed to load file ${this._modelHomeDir}${d}`),new ArrayBuffer(0)}).then(c=>{this.loadPhysics(c,c.byteLength),this._state=7,s()}),this._state=6}else this._state=7,s()},s=()=>{if(this._modelSetting.getPoseFileName()!=""){const d=this._modelSetting.getPoseFileName();fetch(`${this._modelHomeDir}${d}`).then(c=>{if(c.ok)return c.arrayBuffer();if(c.status>=400)return CubismLogError(`Failed to load file ${this._modelHomeDir}${d}`),new ArrayBuffer(0)}).then(c=>{this.loadPose(c,c.byteLength),this._state=9,a()}),this._state=8}else this._state=9,a()},a=()=>{this._modelSetting.getEyeBlinkParameterCount()>0&&(this._eyeBlink=CubismEyeBlink.create(this._modelSetting),this._state=10),o()},o=()=>{this._breath=CubismBreath.create();const d=new csmVector;d.pushBack(new BreathParameterData(this._idParamAngleX,0,15,6.5345,.5)),d.pushBack(new BreathParameterData(this._idParamAngleY,0,8,3.5345,.5)),d.pushBack(new BreathParameterData(this._idParamAngleZ,0,10,5.5345,.5)),d.pushBack(new BreathParameterData(this._idParamBodyAngleX,0,4,15.5345,.5)),d.pushBack(new BreathParameterData(CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamBreath),.5,.5,3.2345,1)),this._breath.setParameters(d),this._state=11,n()},n=()=>{if(this._modelSetting.getUserDataFile()!=""){const d=this._modelSetting.getUserDataFile();fetch(`${this._modelHomeDir}${d}`).then(c=>{if(c.ok)return c.arrayBuffer();if(c.status>=400)return CubismLogError(`Failed to load file ${this._modelHomeDir}${d}`),new ArrayBuffer(0)}).then(c=>{this.loadUserData(c,c.byteLength),this._state=13,l()}),this._state=12}else this._state=13,l()},l=()=>{const d=this._modelSetting.getEyeBlinkParameterCount();for(let c=0;c<d;++c)this._eyeBlinkIds.pushBack(this._modelSetting.getEyeBlinkParameterId(c));this._state=14,h()},h=()=>{const d=this._modelSetting.getLipSyncParameterCount();for(let c=0;c<d;++c)this._lipSyncIds.pushBack(this._modelSetting.getLipSyncParameterId(c));this._state=15,u()},u=()=>{const d=new csmMap;if(this._modelSetting==null||this._modelMatrix==null){CubismLogError("Failed to setupLayout().");return}this._modelSetting.getLayoutMap(d),this._modelMatrix.setupFromLayout(d),this._state=16,g()},g=()=>{this._state=17,this._model.saveParameters(),this._allMotionCount=0,this._motionCount=0;const d=[],c=this._modelSetting.getMotionGroupCount();for(let m=0;m<c;m++)d[m]=this._modelSetting.getMotionGroupName(m),this._allMotionCount+=this._modelSetting.getMotionCount(d[m]);for(let m=0;m<c;m++)this.preLoadMotionGroup(d[m]);c==0&&(this._state=20,this._motionManager.stopAllMotions(),this._updating=!1,this._initialized=!0,this.createRenderer(),this.setupTextures(),this.getRenderer().startUp(gl))}}setupTextures(){if(this._state==20){const e=this._modelSetting.getTextureCount();for(let i=0;i<e;i++){if(this._modelSetting.getTextureFileName(i)==""){console.log("getTextureFileName null");continue}let s=this._modelSetting.getTextureFileName(i);s=this._modelHomeDir+s;const a=o=>{this.getRenderer().bindTexture(i,o.id),this._textureCount++,this._textureCount>=e&&(this._state=22)};LAppDelegate.getInstance().getTextureManager().createTextureFromPngFile(s,!0,a),this.getRenderer().setIsPremultipliedAlpha(!0)}this._state=21}}reloadRenderer(){this.deleteRenderer(),this.createRenderer(),this.setupTextures()}update(){if(this._state!=22)return;const t=LAppPal.getDeltaTime();this._userTimeSeconds+=t,this._dragManager.update(t),this._dragX=this._dragManager.getX(),this._dragY=this._dragManager.getY();let e=!1;if(this._model.loadParameters(),this._motionManager.isFinished()?this.startRandomMotion(MotionGroupIdle,PriorityIdle):e=this._motionManager.updateMotion(this._model,t),this._model.saveParameters(),e||this._eyeBlink!=null&&this._eyeBlink.updateParameters(this._model,t),this._expressionManager!=null&&this._expressionManager.updateMotion(this._model,t),this._model.addParameterValueById(this._idParamAngleX,this._dragX*30),this._model.addParameterValueById(this._idParamAngleY,this._dragY*30),this._model.addParameterValueById(this._idParamAngleZ,this._dragX*this._dragY*-30),this._model.addParameterValueById(this._idParamBodyAngleX,this._dragX*10),this._model.addParameterValueById(this._idParamEyeBallX,this._dragX),this._model.addParameterValueById(this._idParamEyeBallY,this._dragY),this._breath!=null&&this._breath.updateParameters(this._model,t),this._physics!=null&&this._physics.evaluate(this._model,t),this._lipsync){let i=0;this._wavFileHandler.update(t),i=this._wavFileHandler.getRms();for(let s=0;s<this._lipSyncIds.getSize();++s)this._model.addParameterValueById(this._lipSyncIds.at(s),i,.8)}this._pose!=null&&this._pose.updateParameters(this._model,t),this._model.update()}startMotion(t,e,i,s){if(i==PriorityForce)this._motionManager.setReservePriority(i);else if(!this._motionManager.reserveMotion(i))return this._debugMode&&LAppPal.printMessage("[APP]can't start motion."),InvalidMotionQueueEntryHandleValue;const a=this._modelSetting.getMotionFileName(t,e),o=`${t}_${e}`;let n=this._motions.getValue(o),l=!1;n==null?fetch(`${this._modelHomeDir}${a}`).then(u=>{if(u.ok)return u.arrayBuffer();if(u.status>=400)return CubismLogError(`Failed to load file ${this._modelHomeDir}${a}`),new ArrayBuffer(0)}).then(u=>{if(n=this.loadMotion(u,u.byteLength,null,s),n==null)return;let g=this._modelSetting.getMotionFadeInTimeValue(t,e);g>=0&&n.setFadeInTime(g),g=this._modelSetting.getMotionFadeOutTimeValue(t,e),g>=0&&n.setFadeOutTime(g),n.setEffectIds(this._eyeBlinkIds,this._lipSyncIds),l=!0}):n.setFinishedMotionHandler(s);const h=this._modelSetting.getMotionSoundFileName(t,e);if(h.localeCompare("")!=0){let u=h;u=this._modelHomeDir+u,this._wavFileHandler.start(u)}return this._debugMode&&LAppPal.printMessage(`[APP]start motion: [${t}_${e}`),this._motionManager.startMotionPriority(n,l,i)}startRandomMotion(t,e,i){if(this._modelSetting.getMotionCount(t)==0)return InvalidMotionQueueEntryHandleValue;const s=Math.floor(Math.random()*this._modelSetting.getMotionCount(t));return this.startMotion(t,s,e,i)}setExpression(t){const e=this._expressions.getValue(t);this._debugMode&&LAppPal.printMessage(`[APP]expression: [${t}]`),e!=null?this._expressionManager.startMotionPriority(e,!1,PriorityForce):this._debugMode&&LAppPal.printMessage(`[APP]expression[${t}] is null`)}setRandomExpression(){if(this._expressions.getSize()==0)return;const t=Math.floor(Math.random()*this._expressions.getSize());for(let e=0;e<this._expressions.getSize();e++)if(e==t){const i=this._expressions._keyValues[e].first;this.setExpression(i);return}}motionEventFired(t){CubismLogInfo("{0} is fired on LAppModel!!",t.s)}hitTest(t,e,i){if(this._opacity<1)return!1;const s=this._modelSetting.getHitAreasCount();for(let a=0;a<s;a++)if(this._modelSetting.getHitAreaName(a)==t){const o=this._modelSetting.getHitAreaId(a);return this.isHit(o,e,i)}return!1}preLoadMotionGroup(t){for(let e=0;e<this._modelSetting.getMotionCount(t);e++){const i=this._modelSetting.getMotionFileName(t,e),s=`${t}_${e}`;this._debugMode&&LAppPal.printMessage(`[APP]load motion: ${i} => [${s}]`),fetch(`${this._modelHomeDir}${i}`).then(a=>{if(a.ok)return a.arrayBuffer();if(a.status>=400)return CubismLogError(`Failed to load file ${this._modelHomeDir}${i}`),new ArrayBuffer(0)}).then(a=>{const o=this.loadMotion(a,a.byteLength,s);if(o!=null){let n=this._modelSetting.getMotionFadeInTimeValue(t,e);n>=0&&o.setFadeInTime(n),n=this._modelSetting.getMotionFadeOutTimeValue(t,e),n>=0&&o.setFadeOutTime(n),o.setEffectIds(this._eyeBlinkIds,this._lipSyncIds),this._motions.getValue(s)!=null&&ACubismMotion.delete(this._motions.getValue(s)),this._motions.setValue(s,o),this._motionCount++,this._motionCount>=this._allMotionCount&&(this._state=20,this._motionManager.stopAllMotions(),this._updating=!1,this._initialized=!0,this.createRenderer(),this.setupTextures(),this.getRenderer().startUp(gl))}else this._allMotionCount--})}}releaseMotions(){this._motions.clear()}releaseExpressions(){this._expressions.clear()}doDraw(){if(this._model==null)return;const t=[0,0,canvas.width,canvas.height];this.getRenderer().setRenderState(frameBuffer,t),this.getRenderer().drawModel()}draw(t){this._model!=null&&this._state==22&&(t.multiplyByMatrix(this._modelMatrix),this.getRenderer().setMvpMatrix(t),this.doDraw())}async hasMocConsistencyFromFile(){if(CSM_ASSERT(this._modelSetting.getModelFileName().localeCompare("")),this._modelSetting.getModelFileName()!=""){const t=this._modelSetting.getModelFileName(),i=await(await fetch(`${this._modelHomeDir}${t}`)).arrayBuffer();return this._consistency=CubismMoc.hasMocConsistency(i),this._consistency?CubismLogInfo("Consistent MOC3."):CubismLogInfo("Inconsistent MOC3."),this._consistency}else LAppPal.printMessage("Model data does not exist.")}constructor(){super(),this._modelSetting=null,this._modelHomeDir=null,this._userTimeSeconds=0,this._eyeBlinkIds=new csmVector,this._lipSyncIds=new csmVector,this._motions=new csmMap,this._expressions=new csmMap,this._hitArea=new csmVector,this._userArea=new csmVector,this._idParamAngleX=CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamAngleX),this._idParamAngleY=CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamAngleY),this._idParamAngleZ=CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamAngleZ),this._idParamEyeBallX=CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamEyeBallX),this._idParamEyeBallY=CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamEyeBallY),this._idParamBodyAngleX=CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamBodyAngleX),this._mocConsistency=!0,this._state=0,this._expressionCount=0,this._textureCount=0,this._motionCount=0,this._allMotionCount=0,this._wavFileHandler=new LAppWavFileHandler,this._consistency=!1}}let s_instance$1=null;class LAppLive2DManager{constructor(){this._finishedMotion=t=>{LAppPal.printMessage("Motion Finished:"),console.log(t)},this._viewMatrix=new CubismMatrix44,this._models=new csmVector,this._sceneIndex=0,this.changeScene(this._sceneIndex)}static getInstance(){return s_instance$1==null&&(s_instance$1=new LAppLive2DManager),s_instance$1}static releaseInstance(){s_instance$1!=null&&(s_instance$1=void 0),s_instance$1=null}getModel(t){return t<this._models.getSize()?this._models.at(t):null}releaseAllModel(){for(let t=0;t<this._models.getSize();t++)this._models.at(t).release(),this._models.set(t,null);this._models.clear()}onDrag(t,e){for(let i=0;i<this._models.getSize();i++){const s=this.getModel(i);s&&s.setDragging(t,e)}}onTap(t,e){LAppPal.printMessage(`[APP]tap point: {x: ${t.toFixed(2)} y: ${e.toFixed(2)}}`);for(let i=0;i<this._models.getSize();i++)this._models.at(i).hitTest(HitAreaNameHead,t,e)?(LAppPal.printMessage(`[APP]hit area: [${HitAreaNameHead}]`),this._models.at(i).setRandomExpression()):this._models.at(i).hitTest(HitAreaNameBody,t,e)&&(LAppPal.printMessage(`[APP]hit area: [${HitAreaNameBody}]`),this._models.at(i).startRandomMotion(MotionGroupTapBody,PriorityNormal,this._finishedMotion))}onUpdate(){const{width:t,height:e}=canvas,i=this._models.getSize();for(let s=0;s<i;++s){const a=new CubismMatrix44,o=this.getModel(s);o.getModel()&&(o.getModel().getCanvasWidth()>1&&t<e?(o.getModelMatrix().setWidth(2),a.scale(1,t/e)):a.scale(e/t,1),this._viewMatrix!=null&&a.multiplyByMatrix(this._viewMatrix)),o.update(),o.draw(a)}}nextScene(){const t=(this._sceneIndex+1)%ModelDirSize;this.changeScene(t)}changeScene(t){this._sceneIndex=t,LAppPal.printMessage(`[APP]model index: ${this._sceneIndex}`);const e=ModelDir[t],i=ResourcesPath+e+"/";let s=ModelDir[t];s+=".model3.json",this.releaseAllModel(),this._models.pushBack(new LAppModel),this._models.at(0).loadAssets(i,s)}setViewMatrix(t){for(let e=0;e<16;e++)this._viewMatrix.getArray()[e]=t.getArray()[e]}}class LAppTextureManager{constructor(){this._textures=new csmVector}release(){for(let t=this._textures.begin();t.notEqual(this._textures.end());t.preIncrement())gl.deleteTexture(t.ptr().id);this._textures=null}createTextureFromPngFile(t,e,i){for(let a=this._textures.begin();a.notEqual(this._textures.end());a.preIncrement())if(a.ptr().fileName==t&&a.ptr().usePremultply==e){a.ptr().img=new Image,a.ptr().img.addEventListener("load",()=>i(a.ptr()),{passive:!0}),a.ptr().img.src=t;return}const s=new Image;s.addEventListener("load",()=>{const a=gl.createTexture();gl.bindTexture(gl.TEXTURE_2D,a),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR_MIPMAP_LINEAR),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR),e&&gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1),gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,s),gl.generateMipmap(gl.TEXTURE_2D),gl.bindTexture(gl.TEXTURE_2D,null);const o=new TextureInfo;o!=null&&(o.fileName=t,o.width=s.width,o.height=s.height,o.id=a,o.img=s,o.usePremultply=e,this._textures.pushBack(o)),i(o)},{passive:!0}),s.src=t}releaseTextures(){for(let t=0;t<this._textures.getSize();t++)this._textures.set(t,null);this._textures.clear()}releaseTextureByTexture(t){for(let e=0;e<this._textures.getSize();e++)if(this._textures.at(e).id==t){this._textures.set(e,null),this._textures.remove(e);break}}releaseTextureByFilePath(t){for(let e=0;e<this._textures.getSize();e++)if(this._textures.at(e).fileName==t){this._textures.set(e,null),this._textures.remove(e);break}}}class TextureInfo{constructor(){this.id=null,this.width=0,this.height=0}}class CubismViewMatrix extends CubismMatrix44{constructor(){super(),this._screenLeft=0,this._screenRight=0,this._screenTop=0,this._screenBottom=0,this._maxLeft=0,this._maxRight=0,this._maxTop=0,this._maxBottom=0,this._maxScale=0,this._minScale=0}adjustTranslate(t,e){this._tr[0]*this._maxLeft+(this._tr[12]+t)>this._screenLeft&&(t=this._screenLeft-this._tr[0]*this._maxLeft-this._tr[12]),this._tr[0]*this._maxRight+(this._tr[12]+t)<this._screenRight&&(t=this._screenRight-this._tr[0]*this._maxRight-this._tr[12]),this._tr[5]*this._maxTop+(this._tr[13]+e)<this._screenTop&&(e=this._screenTop-this._tr[5]*this._maxTop-this._tr[13]),this._tr[5]*this._maxBottom+(this._tr[13]+e)>this._screenBottom&&(e=this._screenBottom-this._tr[5]*this._maxBottom-this._tr[13]);const i=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,t,e,0,1]);CubismMatrix44.multiply(i,this._tr,this._tr)}adjustScale(t,e,i){const s=this.getMaxScale(),a=this.getMinScale(),o=i*this._tr[0];o<a?this._tr[0]>0&&(i=a/this._tr[0]):o>s&&this._tr[0]>0&&(i=s/this._tr[0]);const n=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,t,e,0,1]),l=new Float32Array([i,0,0,0,0,i,0,0,0,0,1,0,0,0,0,1]),h=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,-t,-e,0,1]);CubismMatrix44.multiply(h,this._tr,this._tr),CubismMatrix44.multiply(l,this._tr,this._tr),CubismMatrix44.multiply(n,this._tr,this._tr)}setScreenRect(t,e,i,s){this._screenLeft=t,this._screenRight=e,this._screenBottom=i,this._screenTop=s}setMaxScreenRect(t,e,i,s){this._maxLeft=t,this._maxRight=e,this._maxTop=s,this._maxBottom=i}setMaxScale(t){this._maxScale=t}setMinScale(t){this._minScale=t}getMaxScale(){return this._maxScale}getMinScale(){return this._minScale}isMaxScale(){return this.getScaleX()>=this._maxScale}isMinScale(){return this.getScaleX()<=this._minScale}getScreenLeft(){return this._screenLeft}getScreenRight(){return this._screenRight}getScreenBottom(){return this._screenBottom}getScreenTop(){return this._screenTop}getMaxLeft(){return this._maxLeft}getMaxRight(){return this._maxRight}getMaxBottom(){return this._maxBottom}getMaxTop(){return this._maxTop}}var Live2DCubismFramework;(r=>{r.CubismViewMatrix=CubismViewMatrix})(Live2DCubismFramework||(Live2DCubismFramework={}));class LAppSprite{constructor(t,e,i,s,a){this._rect=new Rect,this._rect.left=t-i*.5,this._rect.right=t+i*.5,this._rect.up=e+s*.5,this._rect.down=e-s*.5,this._texture=a,this._vertexBuffer=null,this._uvBuffer=null,this._indexBuffer=null,this._positionLocation=null,this._uvLocation=null,this._textureLocation=null,this._positionArray=null,this._uvArray=null,this._indexArray=null,this._firstDraw=!0}release(){this._rect=null,gl.deleteTexture(this._texture),this._texture=null,gl.deleteBuffer(this._uvBuffer),this._uvBuffer=null,gl.deleteBuffer(this._vertexBuffer),this._vertexBuffer=null,gl.deleteBuffer(this._indexBuffer),this._indexBuffer=null}getTexture(){return this._texture}render(t){if(this._texture!=null){if(this._firstDraw){this._positionLocation=gl.getAttribLocation(t,"position"),gl.enableVertexAttribArray(this._positionLocation),this._uvLocation=gl.getAttribLocation(t,"uv"),gl.enableVertexAttribArray(this._uvLocation),this._textureLocation=gl.getUniformLocation(t,"texture"),gl.uniform1i(this._textureLocation,0),this._uvArray=new Float32Array([1,0,0,0,0,1,1,1]),this._uvBuffer=gl.createBuffer();{const e=canvas.width,i=canvas.height;this._positionArray=new Float32Array([(this._rect.right-e*.5)/(e*.5),(this._rect.up-i*.5)/(i*.5),(this._rect.left-e*.5)/(e*.5),(this._rect.up-i*.5)/(i*.5),(this._rect.left-e*.5)/(e*.5),(this._rect.down-i*.5)/(i*.5),(this._rect.right-e*.5)/(e*.5),(this._rect.down-i*.5)/(i*.5)]),this._vertexBuffer=gl.createBuffer()}this._indexArray=new Uint16Array([0,1,2,3,2,0]),this._indexBuffer=gl.createBuffer(),this._firstDraw=!1}gl.bindBuffer(gl.ARRAY_BUFFER,this._uvBuffer),gl.bufferData(gl.ARRAY_BUFFER,this._uvArray,gl.STATIC_DRAW),gl.vertexAttribPointer(this._uvLocation,2,gl.FLOAT,!1,0,0),gl.bindBuffer(gl.ARRAY_BUFFER,this._vertexBuffer),gl.bufferData(gl.ARRAY_BUFFER,this._positionArray,gl.STATIC_DRAW),gl.vertexAttribPointer(this._positionLocation,2,gl.FLOAT,!1,0,0),gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this._indexBuffer),gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,this._indexArray,gl.DYNAMIC_DRAW),gl.bindTexture(gl.TEXTURE_2D,this._texture),gl.drawElements(gl.TRIANGLES,this._indexArray.length,gl.UNSIGNED_SHORT,0)}}isHit(t,e){const{height:i}=canvas,s=i-e;return t>=this._rect.left&&t<=this._rect.right&&s<=this._rect.up&&s>=this._rect.down}}class Rect{}class TouchManager{constructor(){this._startX=0,this._startY=0,this._lastX=0,this._lastY=0,this._lastX1=0,this._lastY1=0,this._lastX2=0,this._lastY2=0,this._lastTouchDistance=0,this._deltaX=0,this._deltaY=0,this._scale=1,this._touchSingle=!1,this._flipAvailable=!1}getCenterX(){return this._lastX}getCenterY(){return this._lastY}getDeltaX(){return this._deltaX}getDeltaY(){return this._deltaY}getStartX(){return this._startX}getStartY(){return this._startY}getScale(){return this._scale}getX(){return this._lastX}getY(){return this._lastY}getX1(){return this._lastX1}getY1(){return this._lastY1}getX2(){return this._lastX2}getY2(){return this._lastY2}isSingleTouch(){return this._touchSingle}isFlickAvailable(){return this._flipAvailable}disableFlick(){this._flipAvailable=!1}touchesBegan(t,e){this._lastX=t,this._lastY=e,this._startX=t,this._startY=e,this._lastTouchDistance=-1,this._flipAvailable=!0,this._touchSingle=!0}touchesMoved(t,e){this._lastX=t,this._lastY=e,this._lastTouchDistance=-1,this._touchSingle=!0}getFlickDistance(){return this.calculateDistance(this._startX,this._startY,this._lastX,this._lastY)}calculateDistance(t,e,i,s){return Math.sqrt((t-i)*(t-i)+(e-s)*(e-s))}calculateMovingAmount(t,e){if(t>0!=e>0)return 0;const i=t>0?1:-1,s=Math.abs(t),a=Math.abs(e);return i*(s<a?s:a)}}class LAppView{constructor(){this._programId=null,this._back=null,this._gear=null,this._touchManager=new TouchManager,this._deviceToScreen=new CubismMatrix44,this._viewMatrix=new CubismViewMatrix}initialize(){const{width:t,height:e}=canvas,i=t/e,s=-i,a=i,o=ViewLogicalLeft,n=ViewLogicalRight;if(this._viewMatrix.setScreenRect(s,a,o,n),this._viewMatrix.scale(ViewScale*2,ViewScale*2),this._viewMatrix.translate(0,-1.2),this._deviceToScreen.loadIdentity(),t>e){const l=Math.abs(a-s);this._deviceToScreen.scaleRelative(l/t,-l/t)}else{const l=Math.abs(n-o);this._deviceToScreen.scaleRelative(l/e,-l/e)}this._deviceToScreen.translateRelative(-t*.5,-e*.5),this._viewMatrix.setMaxScale(ViewMaxScale),this._viewMatrix.setMinScale(ViewMinScale),this._viewMatrix.setMaxScreenRect(ViewLogicalMaxLeft,ViewLogicalMaxRight,ViewLogicalMaxBottom,ViewLogicalMaxTop)}release(){this._viewMatrix=null,this._touchManager=null,this._deviceToScreen=null,this._gear.release(),this._gear=null,this._back&&(this._back.release(),this._back=null),gl.deleteProgram(this._programId),this._programId=null}render(){gl.useProgram(this._programId),this._back&&this._back.render(this._programId),this._gear&&this._gear.render(this._programId),gl.flush();const t=LAppLive2DManager.getInstance();t.setViewMatrix(this._viewMatrix),t.onUpdate()}initializeSprite(){const t=canvas.width,e=canvas.height,i=LAppDelegate.getInstance().getTextureManager(),s=ResourcesPath;let a="";a=BackImageName;const o=l=>{const h=t*.5,u=e*.5,g=t,d=e;this._back=new LAppSprite(h,u,g,d,l.id)};i.createTextureFromPngFile(s+a,!1,o),a=GearImageName;const n=l=>{const h=t-l.width*.5,u=e-l.height*.5,g=l.width,d=l.height;this._gear=new LAppSprite(h,u,g,d,l.id)};i.createTextureFromPngFile(s+a,!1,n),this._programId==null&&(this._programId=LAppDelegate.getInstance().createShader())}onTouchesBegan(t,e){this._touchManager.touchesBegan(t*window.devicePixelRatio,e*window.devicePixelRatio)}onTouchesMoved(t,e){const i=this.transformViewX(this._touchManager.getX()),s=this.transformViewY(this._touchManager.getY());this._touchManager.touchesMoved(t*window.devicePixelRatio,e*window.devicePixelRatio),LAppLive2DManager.getInstance().onDrag(i,s)}onTouchesEnded(t,e){const i=LAppLive2DManager.getInstance();i.onDrag(0,0);{const s=this._deviceToScreen.transformX(this._touchManager.getX()),a=this._deviceToScreen.transformY(this._touchManager.getY());i.onTap(s,a),this._gear.isHit(t*window.devicePixelRatio,e*window.devicePixelRatio)&&i.nextScene()}}transformViewX(t){const e=this._deviceToScreen.transformX(t);return this._viewMatrix.invertTransformX(e)}transformViewY(t){const e=this._deviceToScreen.transformY(t);return this._viewMatrix.invertTransformY(e)}transformScreenX(t){return this._deviceToScreen.transformX(t)}transformScreenY(t){return this._deviceToScreen.transformY(t)}}let s_instance=null,frameBuffer=null;class LAppDelegate{static getInstance(){return s_instance==null&&(s_instance=new LAppDelegate),s_instance}static releaseInstance(){s_instance!=null&&s_instance.release(),s_instance=null}initialize(){return document.body.appendChild(canvas),this._resizeCanvas(),frameBuffer||(frameBuffer=gl.getParameter(gl.FRAMEBUFFER_BINDING)),gl.enable(gl.BLEND),gl.blendFunc(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA),"ontouchend"in canvas?(canvas.addEventListener("touchstart",onTouchBegan,{passive:!0}),canvas.addEventListener("touchmove",onTouchMoved,{passive:!0}),canvas.addEventListener("touchend",onTouchEnded,{passive:!0}),canvas.addEventListener("touchcancel",onTouchCancel,{passive:!0})):(canvas.addEventListener("mousedown",onClickBegan,{passive:!0}),canvas.addEventListener("mousemove",onMouseMoved,{passive:!0}),canvas.addEventListener("mouseup",onClickEnded,{passive:!0})),this._view.initialize(),this.initializeCubism(),!0}onResize(){this._resizeCanvas(),this._view.initialize(),this._view.initializeSprite()}release(){this._textureManager.release(),this._textureManager=null,this._view.release(),this._view=null,LAppLive2DManager.releaseInstance(),CubismFramework.dispose()}run(){const t=()=>{s_instance!=null&&(LAppPal.updateTime(),gl.clearColor(0,0,0,1),gl.enable(gl.DEPTH_TEST),gl.depthFunc(gl.LEQUAL),gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT),gl.clearDepth(1),gl.enable(gl.BLEND),gl.blendFunc(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA),this._view.render(),requestAnimationFrame(t))};t()}createShader(){const t=gl.createShader(gl.VERTEX_SHADER);if(t==null)return LAppPal.printMessage("failed to create vertexShader"),null;gl.shaderSource(t,"precision mediump float;attribute vec3 position;attribute vec2 uv;varying vec2 vuv;void main(void){   gl_Position = vec4(position, 1.0);   vuv = uv;}"),gl.compileShader(t);const i=gl.createShader(gl.FRAGMENT_SHADER);if(i==null)return LAppPal.printMessage("failed to create fragmentShader"),null;gl.shaderSource(i,"precision mediump float;varying vec2 vuv;uniform sampler2D texture;void main(void){   gl_FragColor = texture2D(texture, vuv);}"),gl.compileShader(i);const a=gl.createProgram();return gl.attachShader(a,t),gl.attachShader(a,i),gl.deleteShader(t),gl.deleteShader(i),gl.linkProgram(a),gl.useProgram(a),a}getView(){return this._view}getTextureManager(){return this._textureManager}constructor(){this._captured=!1,this._mouseX=0,this._mouseY=0,this._isEnd=!1,this._cubismOption=new Option,this._view=new LAppView,this._textureManager=new LAppTextureManager}initializeCubism(){this._cubismOption.logFunction=LAppPal.printMessage,this._cubismOption.loggingLevel=CubismLoggingLevel,CubismFramework.startUp(this._cubismOption),CubismFramework.initialize(),LAppLive2DManager.getInstance(),LAppPal.updateTime(),this._view.initializeSprite()}_resizeCanvas(){canvas.width=canvas.clientWidth*window.devicePixelRatio,canvas.height=canvas.clientHeight*window.devicePixelRatio,gl.viewport(0,0,gl.drawingBufferWidth,gl.drawingBufferHeight)}}function onClickBegan(r){if(!LAppDelegate.getInstance()._view){LAppPal.printMessage("view notfound");return}LAppDelegate.getInstance()._captured=!0;const t=r.pageX,e=r.pageY;LAppDelegate.getInstance()._view.onTouchesBegan(t,e)}function onMouseMoved(r){if(!LAppDelegate.getInstance()._captured)return;if(!LAppDelegate.getInstance()._view){LAppPal.printMessage("view notfound");return}const t=r.target.getBoundingClientRect(),e=r.clientX-t.left,i=r.clientY-t.top;LAppDelegate.getInstance()._view.onTouchesMoved(e,i)}function onClickEnded(r){if(LAppDelegate.getInstance()._captured=!1,!LAppDelegate.getInstance()._view){LAppPal.printMessage("view notfound");return}const t=r.target.getBoundingClientRect(),e=r.clientX-t.left,i=r.clientY-t.top;LAppDelegate.getInstance()._view.onTouchesEnded(e,i)}function onTouchBegan(r){if(!LAppDelegate.getInstance()._view){LAppPal.printMessage("view notfound");return}LAppDelegate.getInstance()._captured=!0;const t=r.changedTouches[0].pageX,e=r.changedTouches[0].pageY;LAppDelegate.getInstance()._view.onTouchesBegan(t,e)}function onTouchMoved(r){if(!LAppDelegate.getInstance()._captured)return;if(!LAppDelegate.getInstance()._view){LAppPal.printMessage("view notfound");return}const t=r.target.getBoundingClientRect(),e=r.changedTouches[0].clientX-t.left,i=r.changedTouches[0].clientY-t.top;LAppDelegate.getInstance()._view.onTouchesMoved(e,i)}function onTouchEnded(r){if(LAppDelegate.getInstance()._captured=!1,!LAppDelegate.getInstance()._view){LAppPal.printMessage("view notfound");return}const t=r.target.getBoundingClientRect(),e=r.changedTouches[0].clientX-t.left,i=r.changedTouches[0].clientY-t.top;LAppDelegate.getInstance()._view.onTouchesEnded(e,i)}function onTouchCancel(r){if(LAppDelegate.getInstance()._captured=!1,!LAppDelegate.getInstance()._view){LAppPal.printMessage("view notfound");return}const t=r.target.getBoundingClientRect(),e=r.changedTouches[0].clientX-t.left,i=r.changedTouches[0].clientY-t.top;LAppDelegate.getInstance()._view.onTouchesEnded(e,i)}window.addEventListener("load",()=>{!LAppGlManager.getInstance()||!LAppDelegate.getInstance().initialize()||LAppDelegate.getInstance().run()},{passive:!0});window.addEventListener("beforeunload",()=>LAppDelegate.releaseInstance(),{passive:!0});window.addEventListener("resize",()=>{LAppDelegate.getInstance().onResize()},{passive:!0});window.addEventListener("DOMContentLoaded",()=>{const inputText=document.getElementById("inputText"),logContent=document.getElementById("logContent"),logContainer=document.getElementById("logContainer"),manageElementButton=document.getElementById("manageElementButton"),managementContainer=document.getElementById("managementContainer"),urlInput=document.getElementById("urlInput"),urlDisplayNameInput=document.getElementById("urlDisplayNameInput"),urlIconInput=document.getElementById("urlIconInput"),addUrlButton=document.getElementById("addUrlButton"),urlListTableBody=document.getElementById("urlListTableBody"),closeManagementButton=document.getElementById("closeManagementButton"),urlButtonsContainer=document.getElementById("urlButtonsContainer"),youtubeIdInput=document.getElementById("youtubeIdInput"),addYoutubeButton=document.getElementById("addYoutubeButton"),twitterIdInput=document.getElementById("twitterIdInput"),addTwitterButton=document.getElementById("addTwitterButton"),facebookIdInput=document.getElementById("facebookIdInput"),addFacebookButton=document.getElementById("addFacebookButton"),instagramIdInput=document.getElementById("instagramIdInput"),addInstagramButton=document.getElementById("addInstagramButton"),niconicoIdInput=document.getElementById("niconicoIdInput"),addNiconicoButton=document.getElementById("addNiconicoButton");let isShiftPressed=!1;const saveUrlsToLocalStorage=()=>{const r=Array.from(urlListTableBody.children).map(t=>{const e=t.children[0].textContent,i=t.children[1].textContent;return{displayName:e,url:i}});localStorage.setItem("urls",JSON.stringify(r))},loadUrlsFromLocalStorage=()=>{JSON.parse(localStorage.getItem("urls")||"[]").forEach(({displayName:t,url:e})=>{addUrlButtonFunction(e,t)})},addUrlButtonFunction=(r,t,e="")=>{if(r&&t){const i=document.createElement("tr"),s=document.createElement("td"),a=document.createElement("td"),o=document.createElement("td");s.textContent=t,a.textContent=r;const n=document.createElement("button");if(n.textContent=t,n.className="app-icon",n.addEventListener("click",()=>{window.open(r,"_blank")}),e){const d=document.createElement("img");d.src=e,n.prepend(d)}const l=document.createElement("button");l.textContent="↑",l.addEventListener("click",()=>{const d=i.previousElementSibling;d&&urlListTableBody.insertBefore(i,d),saveUrlsToLocalStorage()});const h=document.createElement("button");h.textContent="↓",h.addEventListener("click",()=>{const d=i.nextElementSibling;d&&urlListTableBody.insertBefore(d,i),saveUrlsToLocalStorage()});const u=document.createElement("button");u.textContent="編集",u.addEventListener("click",()=>{const d=prompt("新しいURLを入力してください:",r),c=prompt("新しい表示名を入力してください:",t);d&&c&&(s.textContent=c,a.textContent=d,n.textContent=c,n.onclick=()=>window.open(d,"_blank"),saveUrlsToLocalStorage())});const g=document.createElement("button");g.textContent="削除",g.addEventListener("click",()=>{urlListTableBody.removeChild(i),urlButtonsContainer.removeChild(n),saveUrlsToLocalStorage()}),o.appendChild(l),o.appendChild(h),o.appendChild(u),o.appendChild(g),i.appendChild(s),i.appendChild(a),i.appendChild(o),urlListTableBody.appendChild(i),urlButtonsContainer.appendChild(n),saveUrlsToLocalStorage()}},updateUrlList=()=>{const r=Array.from(urlListTableBody.children);urlListTableBody.innerHTML="";for(const t of r)urlListTableBody.appendChild(t)};inputText.addEventListener("keydown",async event=>{if(event.key==="Enter"&&!isShiftPressed){event.preventDefault(),logContent.innerHTML+=`<div style="background-color: rgba(173, 216, 230, 0.5);">${inputText.value}</div>`,logContent.scrollTo({top:logContent.scrollHeight,behavior:"smooth"});const response=await fetch("https://27asamqngc.execute-api.ap-southeast-2.amazonaws.com/beta/",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({input:inputText.value})}),combinedResponse=await response.json();console.log("VV"+JSON.stringify(combinedResponse)),eval(JSON.stringify(combinedResponse)),inputText.value="",window.addEventListener("DOMContentLoaded",async()=>{}),logContainer.scrollTo({top:logContainer.scrollHeight,behavior:"smooth"})}else event.key==="Shift"&&(isShiftPressed=!0)}),inputText.addEventListener("keyup",r=>{r.key==="Shift"&&(isShiftPressed=!1)}),manageElementButton.addEventListener("click",()=>{updateUrlList(),managementContainer.style.display="flex"}),closeManagementButton.addEventListener("click",()=>{managementContainer.style.display="none"}),addUrlButton.addEventListener("click",()=>{const r=urlInput.value,t=urlDisplayNameInput.value,e=urlIconInput.value;addUrlButtonFunction(r,t,e),urlInput.value="",urlDisplayNameInput.value="",urlIconInput.value=""}),addYoutubeButton.addEventListener("click",()=>{const t=`https://www.youtube.com/watch?v=${youtubeIdInput.value}`;addUrlButtonFunction(t,"YouTube","../../Resources/youtube.png"),youtubeIdInput.value=""}),addTwitterButton.addEventListener("click",()=>{const t=`https://twitter.com/${twitterIdInput.value}`;addUrlButtonFunction(t,"Twitter","../../Resources/twitter.png"),twitterIdInput.value=""}),addFacebookButton.addEventListener("click",()=>{const t=`https://www.facebook.com/${facebookIdInput.value}`;addUrlButtonFunction(t,"Facebook"),facebookIdInput.value=""}),addInstagramButton.addEventListener("click",()=>{const t=`https://www.instagram.com/${instagramIdInput.value}`;addUrlButtonFunction(t,"Instagram","../../Resources/insta.png"),instagramIdInput.value=""}),addNiconicoButton.addEventListener("click",()=>{const t=`https://www.nicovideo.jp/watch/${niconicoIdInput.value}`;addUrlButtonFunction(t,"Niconico動画"),niconicoIdInput.value=""}),loadUrlsFromLocalStorage()});
//# sourceMappingURL=index-v_aKMnsb.js.map
